/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Twilio
 * Enabling phones, VoIP, and messaging to be embedded into web, desktop, and mobile software.
 *
 * OpenAPI spec version: 2010-04-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from 'url'
import * as portableFetch from 'portable-fetch'
import { Configuration } from './configuration'

const BASE_PATH = 'https://api.twilio.com/2010-04-01'.replace(/\/+$/, '')

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ',',
    ssv: ' ',
    tsv: '\t',
    pipes: '|',
}

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string
    options: any
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration

    constructor(
        configuration?: Configuration,
        protected basePath: string = BASE_PATH,
        protected fetch: FetchAPI = portableFetch
    ) {
        if (configuration) {
            this.configuration = configuration
            this.basePath = configuration.basePath || this.basePath
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: 'RequiredError'
    constructor(public field: string, msg?: string) {
        super(msg)
    }
}

/**
 *
 * @export
 * @interface Account
 */
export interface Account {
    /**
     *
     * @type {string}
     * @memberof Account
     */
    auth_token?: string
    /**
     * The date that this account was created, in GMT in RFC 2822 format
     * @type {string}
     * @memberof Account
     */
    date_created?: string
    /**
     * The date that this account was last updated, in GMT in RFC 2822 format.
     * @type {string}
     * @memberof Account
     */
    date_updated?: string
    /**
     * A human readable description of this account, up to 64 characters long. By default the FriendlyName is your email address.
     * @type {string}
     * @memberof Account
     */
    friendly_name?: string
    /**
     * A 34 character string that uniquely identifies this account.
     * @type {string}
     * @memberof Account
     */
    sid?: string
    /**
     * The status of this account. Usually active, but can be suspended or closed.
     * @type {string}
     * @memberof Account
     */
    status?: string
    /**
     *
     * @type {any}
     * @memberof Account
     */
    subresource_uris?: any
    /**
     * The type of this account. Either Trial or Full if you've upgraded.
     * @type {string}
     * @memberof Account
     */
    type?: string
    /**
     *
     * @type {string}
     * @memberof Account
     */
    uri?: string
}

/**
 *
 * @export
 * @interface Accounts
 */
export interface Accounts {
    /**
     *
     * @type {Array<AccountsAccounts>}
     * @memberof Accounts
     */
    accounts?: Array<AccountsAccounts>
    /**
     *
     * @type {number}
     * @memberof Accounts
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof Accounts
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Accounts
     */
    last_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof Accounts
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof Accounts
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof Accounts
     */
    page_size?: number
    /**
     *
     * @type {number}
     * @memberof Accounts
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof Accounts
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof Accounts
     */
    uri?: string
}

/**
 *
 * @export
 * @interface AccountsAccounts
 */
export interface AccountsAccounts {
    /**
     * The date that this account was created, in GMT in RFC 2822 format
     * @type {string}
     * @memberof AccountsAccounts
     */
    date_created?: string
    /**
     * The date that this account was last updated, in GMT in RFC 2822 format.
     * @type {string}
     * @memberof AccountsAccounts
     */
    date_updated?: string
    /**
     * A human readable description of this account, up to 64 characters long. By default the FriendlyName is your email address.
     * @type {string}
     * @memberof AccountsAccounts
     */
    friendly_name?: string
    /**
     * A 34 character string that uniquely identifies this account.
     * @type {string}
     * @memberof AccountsAccounts
     */
    sid?: string
    /**
     * The status of this account. Usually active, but can be suspended or closed.
     * @type {string}
     * @memberof AccountsAccounts
     */
    status?: string
    /**
     * The type of this account. Either Trial or Full if you've upgraded.
     * @type {string}
     * @memberof AccountsAccounts
     */
    type?: string
}

/**
 *
 * @export
 * @interface AppResource
 */
export interface AppResource {
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    sms_fallback_method?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    sms_fallback_url?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    sms_method?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    sms_status_callback?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    sms_url?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    status_callback?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    status_callback_method?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    uri?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    voice_caller_id_lookup?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    voice_fallback_method?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    voice_fallback_url?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    voice_method?: string
    /**
     *
     * @type {string}
     * @memberof AppResource
     */
    voice_url?: string
}

/**
 *
 * @export
 * @interface AppResources
 */
export interface AppResources {
    /**
     *
     * @type {Array<AppResourcesApplications>}
     * @memberof AppResources
     */
    applications?: Array<AppResourcesApplications>
    /**
     *
     * @type {number}
     * @memberof AppResources
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof AppResources
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof AppResources
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof AppResources
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof AppResources
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof AppResources
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof AppResources
     */
    page_size?: number
    /**
     *
     * @type {string}
     * @memberof AppResources
     */
    previous_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof AppResources
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof AppResources
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof AppResources
     */
    uri?: string
}

/**
 *
 * @export
 * @interface AppResourcesApplications
 */
export interface AppResourcesApplications {
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    sms_fallback_method?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    sms_fallback_url?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    sms_method?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    sms_status_callback?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    sms_url?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    status_callback?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    status_callback_method?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    uri?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    voice_caller_id_lookup?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    voice_fallback_method?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    voice_fallback_url?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    voice_method?: string
    /**
     *
     * @type {string}
     * @memberof AppResourcesApplications
     */
    voice_url?: string
}

/**
 *
 * @export
 * @interface Application
 */
export interface Application {
    /**
     *
     * @type {string}
     * @memberof Application
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof Application
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof Application
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof Application
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof Application
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof Application
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof Application
     */
    sms_fallback_method?: string
    /**
     *
     * @type {any}
     * @memberof Application
     */
    sms_fallback_url?: any
    /**
     *
     * @type {string}
     * @memberof Application
     */
    sms_method?: string
    /**
     *
     * @type {any}
     * @memberof Application
     */
    sms_status_callback?: any
    /**
     *
     * @type {any}
     * @memberof Application
     */
    sms_url?: any
    /**
     *
     * @type {any}
     * @memberof Application
     */
    status_callback?: any
    /**
     *
     * @type {any}
     * @memberof Application
     */
    status_callback_method?: any
    /**
     *
     * @type {string}
     * @memberof Application
     */
    uri?: string
    /**
     *
     * @type {any}
     * @memberof Application
     */
    voice_caller_id_lookup?: any
    /**
     *
     * @type {string}
     * @memberof Application
     */
    voice_fallback_method?: string
    /**
     *
     * @type {any}
     * @memberof Application
     */
    voice_fallback_url?: any
    /**
     *
     * @type {string}
     * @memberof Application
     */
    voice_method?: string
    /**
     *
     * @type {string}
     * @memberof Application
     */
    voice_url?: string
}

/**
 *
 * @export
 * @interface Applications
 */
export interface Applications {
    /**
     *
     * @type {Array<ApplicationsApplications>}
     * @memberof Applications
     */
    applications?: Array<ApplicationsApplications>
    /**
     *
     * @type {number}
     * @memberof Applications
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof Applications
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Applications
     */
    last_page_uri?: string
    /**
     *
     * @type {any}
     * @memberof Applications
     */
    next_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof Applications
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof Applications
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof Applications
     */
    page_size?: number
    /**
     *
     * @type {any}
     * @memberof Applications
     */
    previous_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof Applications
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof Applications
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof Applications
     */
    uri?: string
}

/**
 *
 * @export
 * @interface ApplicationsApplications
 */
export interface ApplicationsApplications {
    /**
     *
     * @type {string}
     * @memberof ApplicationsApplications
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof ApplicationsApplications
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof ApplicationsApplications
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof ApplicationsApplications
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof ApplicationsApplications
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof ApplicationsApplications
     */
    sid?: string
    /**
     *
     * @type {any}
     * @memberof ApplicationsApplications
     */
    sms_fallback_method?: any
    /**
     *
     * @type {any}
     * @memberof ApplicationsApplications
     */
    sms_fallback_url?: any
    /**
     *
     * @type {any}
     * @memberof ApplicationsApplications
     */
    sms_method?: any
    /**
     *
     * @type {any}
     * @memberof ApplicationsApplications
     */
    sms_status_callback?: any
    /**
     *
     * @type {any}
     * @memberof ApplicationsApplications
     */
    sms_url?: any
    /**
     *
     * @type {any}
     * @memberof ApplicationsApplications
     */
    status_callback?: any
    /**
     *
     * @type {any}
     * @memberof ApplicationsApplications
     */
    status_callback_method?: any
    /**
     *
     * @type {string}
     * @memberof ApplicationsApplications
     */
    uri?: string
    /**
     *
     * @type {any}
     * @memberof ApplicationsApplications
     */
    voice_caller_id_lookup?: any
    /**
     *
     * @type {any}
     * @memberof ApplicationsApplications
     */
    voice_fallback_method?: any
    /**
     *
     * @type {any}
     * @memberof ApplicationsApplications
     */
    voice_fallback_url?: any
    /**
     *
     * @type {string}
     * @memberof ApplicationsApplications
     */
    voice_method?: string
    /**
     *
     * @type {string}
     * @memberof ApplicationsApplications
     */
    voice_url?: string
}

/**
 *
 * @export
 * @interface AuthApp
 */
export interface AuthApp {
    /**
     *
     * @type {string}
     * @memberof AuthApp
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof AuthApp
     */
    connect_app_company_name?: string
    /**
     *
     * @type {string}
     * @memberof AuthApp
     */
    connect_app_description?: string
    /**
     *
     * @type {string}
     * @memberof AuthApp
     */
    connect_app_friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof AuthApp
     */
    connect_app_homepage_url?: string
    /**
     *
     * @type {string}
     * @memberof AuthApp
     */
    connect_app_sid?: string
    /**
     *
     * @type {Array<string>}
     * @memberof AuthApp
     */
    permissions?: Array<string>
}

/**
 *
 * @export
 * @interface AuthApps
 */
export interface AuthApps {
    /**
     *
     * @type {Array<AuthAppsAuthorizedConnectApps>}
     * @memberof AuthApps
     */
    authorized_connect_apps?: Array<AuthAppsAuthorizedConnectApps>
    /**
     *
     * @type {number}
     * @memberof AuthApps
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof AuthApps
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof AuthApps
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof AuthApps
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof AuthApps
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof AuthApps
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof AuthApps
     */
    page_size?: number
    /**
     *
     * @type {string}
     * @memberof AuthApps
     */
    previous_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof AuthApps
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof AuthApps
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof AuthApps
     */
    uri?: string
}

/**
 *
 * @export
 * @interface AuthAppsAuthorizedConnectApps
 */
export interface AuthAppsAuthorizedConnectApps {
    /**
     *
     * @type {string}
     * @memberof AuthAppsAuthorizedConnectApps
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof AuthAppsAuthorizedConnectApps
     */
    connect_app_company_name?: string
    /**
     *
     * @type {string}
     * @memberof AuthAppsAuthorizedConnectApps
     */
    connect_app_description?: string
    /**
     *
     * @type {string}
     * @memberof AuthAppsAuthorizedConnectApps
     */
    connect_app_friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof AuthAppsAuthorizedConnectApps
     */
    connect_app_homepage_url?: string
    /**
     *
     * @type {string}
     * @memberof AuthAppsAuthorizedConnectApps
     */
    connect_app_sid?: string
    /**
     *
     * @type {Array<string>}
     * @memberof AuthAppsAuthorizedConnectApps
     */
    permissions?: Array<string>
}

/**
 *
 * @export
 * @interface AvailablePhoneNumbers
 */
export interface AvailablePhoneNumbers {
    /**
     *
     * @type {Array<AvailablePhoneNumbersAvailablePhoneNumbers>}
     * @memberof AvailablePhoneNumbers
     */
    available_phone_numbers?: Array<AvailablePhoneNumbersAvailablePhoneNumbers>
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumbers
     */
    uri?: string
}

/**
 *
 * @export
 * @interface AvailablePhoneNumbersAvailablePhoneNumbers
 */
export interface AvailablePhoneNumbersAvailablePhoneNumbers {
    /**
     *
     * @type {AvailablePhoneNumbersCapabilities}
     * @memberof AvailablePhoneNumbersAvailablePhoneNumbers
     */
    capabilities?: AvailablePhoneNumbersCapabilities
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumbersAvailablePhoneNumbers
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumbersAvailablePhoneNumbers
     */
    iso_country?: string
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumbersAvailablePhoneNumbers
     */
    lata?: string
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumbersAvailablePhoneNumbers
     */
    latitude?: string
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumbersAvailablePhoneNumbers
     */
    longitude?: string
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumbersAvailablePhoneNumbers
     */
    phone_number?: string
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumbersAvailablePhoneNumbers
     */
    postal_code?: string
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumbersAvailablePhoneNumbers
     */
    rate_center?: string
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumbersAvailablePhoneNumbers
     */
    region?: string
}

/**
 *
 * @export
 * @interface AvailablePhoneNumbersCapabilities
 */
export interface AvailablePhoneNumbersCapabilities {
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumbersCapabilities
     */
    MMS?: string
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumbersCapabilities
     */
    SMS?: string
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumbersCapabilities
     */
    voice?: string
}

/**
 *
 * @export
 * @interface Call
 */
export interface Call {
    /**
     * The unique id of the Account responsible for creating this call.
     * @type {string}
     * @memberof Call
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    answered_by?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    caller_name?: string
    /**
     * GMT in RFC 2822 format.
     * @type {string}
     * @memberof Call
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    direction?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    duration?: string
    /**
     * Given as GMT in RFC 2822 format.
     * @type {string}
     * @memberof Call
     */
    end_time?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    formatted_from?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    formatted_to?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    forwarded_from?: string
    /**
     * The phone number, SIP address or Client identifier that made this call. Phone numbers are in E.164 format (e.g. +16175551212).
     * @type {string}
     * @memberof Call
     */
    from?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    parent_call_sid?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    phone_number_sid?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    price?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    sid?: string
    /**
     * Given as GMT in RFC 2822 format.
     * @type {string}
     * @memberof Call
     */
    start_time?: string
    /**
     *
     * @type {any}
     * @memberof Call
     */
    status?: any
    /**
     *
     * @type {CallSubresourceUris}
     * @memberof Call
     */
    subresource_uris?: CallSubresourceUris
    /**
     * Phone numbers are in E.164 format (e.g. +16175551212). SIP addresses are formated as name@company.com. Client identifiers are formatted client:name.
     * @type {string}
     * @memberof Call
     */
    to?: string
    /**
     *
     * @type {string}
     * @memberof Call
     */
    uri?: string
}

/**
 *
 * @export
 * @interface CallInstance
 */
export interface CallInstance {
    /**
     * The unique id of the Account responsible for creating this call.
     * @type {string}
     * @memberof CallInstance
     */
    account_sid?: string
    /**
     * If this call was initiated with answering machine detection, either human or machine. Empty otherwise.
     * @type {any}
     * @memberof CallInstance
     */
    answered_by?: any
    /**
     *
     * @type {string}
     * @memberof CallInstance
     */
    api_version?: string
    /**
     * If this call was an incoming call to a phone number with Caller ID Lookup enabled, the caller's name. Empty otherwise.
     * @type {string}
     * @memberof CallInstance
     */
    caller_name?: string
    /**
     * GMT in RFC 2822 format.
     * @type {string}
     * @memberof CallInstance
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof CallInstance
     */
    date_updated?: string
    /**
     * A string describing the direction of the call. inbound for inbound calls, outbound-api for calls initiated via the REST API or outbound-dial for calls initiated by a <Dial> verb.
     * @type {any}
     * @memberof CallInstance
     */
    direction?: any
    /**
     * The length of the call in seconds.
     * @type {string}
     * @memberof CallInstance
     */
    duration?: string
    /**
     * Given as GMT in RFC 2822 format.
     * @type {string}
     * @memberof CallInstance
     */
    end_time?: string
    /**
     * If this call was an incoming call forwarded from another number, the forwarding phone number (depends on carrier supporting forwarding). Empty otherwise.
     * @type {string}
     * @memberof CallInstance
     */
    forwarded_from?: string
    /**
     * The phone number, SIP address or Client identifier that made this call. Phone numbers are in E.164 format (e.g. +16175551212).
     * @type {string}
     * @memberof CallInstance
     */
    from?: string
    /**
     *
     * @type {string}
     * @memberof CallInstance
     */
    parent_call_sid?: string
    /**
     * If the call was inbound, this is the Sid of the IncomingPhoneNumber that received the call. If the call was outbound, it is the Sid of the OutgoingCallerId from which the call was placed.
     * @type {string}
     * @memberof CallInstance
     */
    phone_number_sid?: string
    /**
     * The charge for this call, in the currency associated with the account. Populated after the call is completed. May not be immediately available.
     * @type {string}
     * @memberof CallInstance
     */
    price?: string
    /**
     * The currency in which Price is measured, in ISO 4127 format.
     * @type {string}
     * @memberof CallInstance
     */
    price_unit?: string
    /**
     *
     * @type {string}
     * @memberof CallInstance
     */
    sid?: string
    /**
     * Given as GMT in RFC 2822 format.
     * @type {string}
     * @memberof CallInstance
     */
    start_time?: string
    /**
     * A string representing the status of the call.
     * @type {any}
     * @memberof CallInstance
     */
    status?: any
    /**
     *
     * @type {any}
     * @memberof CallInstance
     */
    subresource_uris?: any
    /**
     * Phone numbers are in E.164 format (e.g. +16175551212). SIP addresses are formated as name@company.com. Client identifiers are formatted client:name.
     * @type {string}
     * @memberof CallInstance
     */
    to?: string
    /**
     * The URI for this resource, relative to https://api.twilio.com
     * @type {string}
     * @memberof CallInstance
     */
    uri?: string
}

/**
 *
 * @export
 * @interface CallSubresourceUris
 */
export interface CallSubresourceUris {
    /**
     *
     * @type {string}
     * @memberof CallSubresourceUris
     */
    notifications?: string
    /**
     *
     * @type {string}
     * @memberof CallSubresourceUris
     */
    recordings?: string
}

/**
 *
 * @export
 * @interface Calls
 */
export interface Calls {
    /**
     *
     * @type {Array<CallsCalls>}
     * @memberof Calls
     */
    calls?: Array<CallsCalls>
    /**
     *
     * @type {number}
     * @memberof Calls
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof Calls
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Calls
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Calls
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof Calls
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof Calls
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof Calls
     */
    page_size?: number
    /**
     *
     * @type {any}
     * @memberof Calls
     */
    previous_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof Calls
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof Calls
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof Calls
     */
    uri?: string
}

/**
 *
 * @export
 * @interface CallsCalls
 */
export interface CallsCalls {
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    account_sid?: string
    /**
     *
     * @type {any}
     * @memberof CallsCalls
     */
    answered_by?: any
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    api_version?: string
    /**
     *
     * @type {any}
     * @memberof CallsCalls
     */
    caller_name?: any
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    direction?: string
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    duration?: string
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    end_time?: string
    /**
     *
     * @type {any}
     * @memberof CallsCalls
     */
    forwarded_from?: any
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    from?: string
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    from_formatted?: string
    /**
     *
     * @type {any}
     * @memberof CallsCalls
     */
    parent_call_sid?: any
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    phone_number_sid?: string
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    price?: string
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    start_time?: string
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    status?: string
    /**
     *
     * @type {CallSubresourceUris}
     * @memberof CallsCalls
     */
    subresource_uris?: CallSubresourceUris
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    to?: string
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    to_formatted?: string
    /**
     *
     * @type {string}
     * @memberof CallsCalls
     */
    uri?: string
}

/**
 *
 * @export
 * @interface Conference
 */
export interface Conference {
    /**
     *
     * @type {string}
     * @memberof Conference
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof Conference
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof Conference
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof Conference
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof Conference
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof Conference
     */
    sid?: string
    /**
     *
     * @type {any}
     * @memberof Conference
     */
    status?: any
    /**
     *
     * @type {ConferenceSubresourceUris}
     * @memberof Conference
     */
    subresource_uris?: ConferenceSubresourceUris
    /**
     *
     * @type {string}
     * @memberof Conference
     */
    uri?: string
}

/**
 *
 * @export
 * @interface ConferenceSubresourceUris
 */
export interface ConferenceSubresourceUris {
    /**
     *
     * @type {string}
     * @memberof ConferenceSubresourceUris
     */
    participants?: string
}

/**
 *
 * @export
 * @interface Conferences
 */
export interface Conferences {
    /**
     *
     * @type {Array<ConferencesConferences>}
     * @memberof Conferences
     */
    conferences?: Array<ConferencesConferences>
    /**
     *
     * @type {number}
     * @memberof Conferences
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof Conferences
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Conferences
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Conferences
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof Conferences
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof Conferences
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof Conferences
     */
    page_size?: number
    /**
     *
     * @type {string}
     * @memberof Conferences
     */
    previous_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof Conferences
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof Conferences
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof Conferences
     */
    uri?: string
}

/**
 *
 * @export
 * @interface ConferencesConferences
 */
export interface ConferencesConferences {
    /**
     *
     * @type {string}
     * @memberof ConferencesConferences
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof ConferencesConferences
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof ConferencesConferences
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof ConferencesConferences
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof ConferencesConferences
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof ConferencesConferences
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof ConferencesConferences
     */
    status?: string
    /**
     *
     * @type {ConferenceSubresourceUris}
     * @memberof ConferencesConferences
     */
    subresource_uris?: ConferenceSubresourceUris
    /**
     *
     * @type {string}
     * @memberof ConferencesConferences
     */
    uri?: string
}

/**
 *
 * @export
 * @interface ConnectApp
 */
export interface ConnectApp {
    /**
     *
     * @type {string}
     * @memberof ConnectApp
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof ConnectApp
     */
    authorize_redirect_url?: string
    /**
     *
     * @type {string}
     * @memberof ConnectApp
     */
    company_name?: string
    /**
     *
     * @type {string}
     * @memberof ConnectApp
     */
    deauthorize_callback_method?: string
    /**
     *
     * @type {string}
     * @memberof ConnectApp
     */
    deauthorize_callback_url?: string
    /**
     *
     * @type {string}
     * @memberof ConnectApp
     */
    description?: string
    /**
     *
     * @type {string}
     * @memberof ConnectApp
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof ConnectApp
     */
    homepage_url?: string
    /**
     *
     * @type {Array<string>}
     * @memberof ConnectApp
     */
    permissions?: Array<string>
    /**
     *
     * @type {string}
     * @memberof ConnectApp
     */
    sid?: string
}

/**
 *
 * @export
 * @interface ConnectApps
 */
export interface ConnectApps {
    /**
     *
     * @type {Array<ConnectAppsConnectApps>}
     * @memberof ConnectApps
     */
    connect_apps?: Array<ConnectAppsConnectApps>
    /**
     *
     * @type {number}
     * @memberof ConnectApps
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof ConnectApps
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof ConnectApps
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof ConnectApps
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof ConnectApps
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof ConnectApps
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof ConnectApps
     */
    page_size?: number
    /**
     *
     * @type {string}
     * @memberof ConnectApps
     */
    previous_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof ConnectApps
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof ConnectApps
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof ConnectApps
     */
    uri?: string
}

/**
 *
 * @export
 * @interface ConnectAppsConnectApps
 */
export interface ConnectAppsConnectApps {
    /**
     *
     * @type {string}
     * @memberof ConnectAppsConnectApps
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof ConnectAppsConnectApps
     */
    authorize_redirect_url?: string
    /**
     *
     * @type {string}
     * @memberof ConnectAppsConnectApps
     */
    company_name?: string
    /**
     *
     * @type {string}
     * @memberof ConnectAppsConnectApps
     */
    deauthorize_callback_method?: string
    /**
     *
     * @type {string}
     * @memberof ConnectAppsConnectApps
     */
    deauthorize_callback_url?: string
    /**
     *
     * @type {string}
     * @memberof ConnectAppsConnectApps
     */
    description?: string
    /**
     *
     * @type {string}
     * @memberof ConnectAppsConnectApps
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof ConnectAppsConnectApps
     */
    homepage_url?: string
    /**
     *
     * @type {Array<string>}
     * @memberof ConnectAppsConnectApps
     */
    permissions?: Array<string>
    /**
     *
     * @type {string}
     * @memberof ConnectAppsConnectApps
     */
    sid?: string
}

/**
 *
 * @export
 * @interface Credential
 */
export interface Credential {
    /**
     *
     * @type {string}
     * @memberof Credential
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof Credential
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof Credential
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof Credential
     */
    uri?: string
    /**
     *
     * @type {string}
     * @memberof Credential
     */
    username?: string
}

/**
 *
 * @export
 * @interface CredentialList
 */
export interface CredentialList {
    /**
     *
     * @type {string}
     * @memberof CredentialList
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof CredentialList
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof CredentialList
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof CredentialList
     */
    sid?: string
    /**
     *
     * @type {CredentialListSubresourceUris}
     * @memberof CredentialList
     */
    subresource_uris?: CredentialListSubresourceUris
    /**
     *
     * @type {string}
     * @memberof CredentialList
     */
    uri?: string
}

/**
 *
 * @export
 * @interface CredentialListMapping
 */
export interface CredentialListMapping {
    /**
     *
     * @type {string}
     * @memberof CredentialListMapping
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof CredentialListMapping
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof CredentialListMapping
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof CredentialListMapping
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof CredentialListMapping
     */
    sid?: string
    /**
     *
     * @type {CredentialListSubresourceUris}
     * @memberof CredentialListMapping
     */
    subresource_uris?: CredentialListSubresourceUris
    /**
     *
     * @type {string}
     * @memberof CredentialListMapping
     */
    uri?: string
}

/**
 *
 * @export
 * @interface CredentialListMappings
 */
export interface CredentialListMappings {
    /**
     *
     * @type {Array<Array<any>>}
     * @memberof CredentialListMappings
     */
    credential_list_mappings?: Array<Array<any>>
    /**
     *
     * @type {number}
     * @memberof CredentialListMappings
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof CredentialListMappings
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof CredentialListMappings
     */
    last_page_uri?: string
    /**
     *
     * @type {any}
     * @memberof CredentialListMappings
     */
    next_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof CredentialListMappings
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof CredentialListMappings
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof CredentialListMappings
     */
    page_size?: number
    /**
     *
     * @type {any}
     * @memberof CredentialListMappings
     */
    previous_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof CredentialListMappings
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof CredentialListMappings
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof CredentialListMappings
     */
    uri?: string
}

/**
 *
 * @export
 * @interface CredentialListSubresourceUris
 */
export interface CredentialListSubresourceUris {
    /**
     *
     * @type {string}
     * @memberof CredentialListSubresourceUris
     */
    credentials?: string
}

/**
 *
 * @export
 * @interface CredentialLists
 */
export interface CredentialLists {
    /**
     *
     * @type {Array<CredentialListsCredentialLists>}
     * @memberof CredentialLists
     */
    credential_lists?: Array<CredentialListsCredentialLists>
    /**
     *
     * @type {number}
     * @memberof CredentialLists
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof CredentialLists
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof CredentialLists
     */
    last_page_uri?: string
    /**
     *
     * @type {any}
     * @memberof CredentialLists
     */
    next_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof CredentialLists
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof CredentialLists
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof CredentialLists
     */
    page_size?: number
    /**
     *
     * @type {any}
     * @memberof CredentialLists
     */
    previous_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof CredentialLists
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof CredentialLists
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof CredentialLists
     */
    uri?: string
}

/**
 *
 * @export
 * @interface CredentialListsCredentialLists
 */
export interface CredentialListsCredentialLists {
    /**
     *
     * @type {string}
     * @memberof CredentialListsCredentialLists
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof CredentialListsCredentialLists
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof CredentialListsCredentialLists
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof CredentialListsCredentialLists
     */
    sid?: string
    /**
     *
     * @type {CredentialListSubresourceUris}
     * @memberof CredentialListsCredentialLists
     */
    subresource_uris?: CredentialListSubresourceUris
    /**
     *
     * @type {string}
     * @memberof CredentialListsCredentialLists
     */
    uri?: string
}

/**
 *
 * @export
 * @interface Credentials
 */
export interface Credentials {
    /**
     *
     * @type {Array<CredentialsCredentials>}
     * @memberof Credentials
     */
    credentials?: Array<CredentialsCredentials>
    /**
     *
     * @type {number}
     * @memberof Credentials
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof Credentials
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Credentials
     */
    last_page_uri?: string
    /**
     *
     * @type {any}
     * @memberof Credentials
     */
    next_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof Credentials
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof Credentials
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof Credentials
     */
    page_size?: number
    /**
     *
     * @type {any}
     * @memberof Credentials
     */
    previous_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof Credentials
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof Credentials
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof Credentials
     */
    uri?: string
}

/**
 *
 * @export
 * @interface CredentialsCredentials
 */
export interface CredentialsCredentials {
    /**
     *
     * @type {string}
     * @memberof CredentialsCredentials
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof CredentialsCredentials
     */
    credential_list_sid?: string
    /**
     *
     * @type {string}
     * @memberof CredentialsCredentials
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof CredentialsCredentials
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof CredentialsCredentials
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof CredentialsCredentials
     */
    uri?: string
    /**
     *
     * @type {string}
     * @memberof CredentialsCredentials
     */
    username?: string
}

/**
 *
 * @export
 * @interface Domain
 */
export interface Domain {
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    auth_type?: string
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    domain_name?: string
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    sid?: string
    /**
     *
     * @type {DomainSubresourceUris}
     * @memberof Domain
     */
    subresource_uris?: DomainSubresourceUris
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    uri?: string
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    voice_fallback_method?: string
    /**
     *
     * @type {any}
     * @memberof Domain
     */
    voice_fallback_url?: any
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    voice_method?: string
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    voice_status_callback_method?: string
    /**
     *
     * @type {any}
     * @memberof Domain
     */
    voice_status_callback_url?: any
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    voice_url?: string
}

/**
 *
 * @export
 * @interface DomainSubresourceUris
 */
export interface DomainSubresourceUris {
    /**
     *
     * @type {string}
     * @memberof DomainSubresourceUris
     */
    credential_list_mappings?: string
    /**
     *
     * @type {string}
     * @memberof DomainSubresourceUris
     */
    ip_access_control_list_mappings?: string
}

/**
 *
 * @export
 * @interface Domains
 */
export interface Domains {
    /**
     *
     * @type {number}
     * @memberof Domains
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof Domains
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Domains
     */
    last_page_uri?: string
    /**
     *
     * @type {any}
     * @memberof Domains
     */
    next_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof Domains
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof Domains
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof Domains
     */
    page_size?: number
    /**
     *
     * @type {any}
     * @memberof Domains
     */
    previous_page_uri?: any
    /**
     *
     * @type {Array<DomainsSipDomains>}
     * @memberof Domains
     */
    sip_domains?: Array<DomainsSipDomains>
    /**
     *
     * @type {number}
     * @memberof Domains
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof Domains
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof Domains
     */
    uri?: string
}

/**
 *
 * @export
 * @interface DomainsSipDomains
 */
export interface DomainsSipDomains {
    /**
     *
     * @type {string}
     * @memberof DomainsSipDomains
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof DomainsSipDomains
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof DomainsSipDomains
     */
    auth_type?: string
    /**
     *
     * @type {string}
     * @memberof DomainsSipDomains
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof DomainsSipDomains
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof DomainsSipDomains
     */
    domain_name?: string
    /**
     *
     * @type {string}
     * @memberof DomainsSipDomains
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof DomainsSipDomains
     */
    sid?: string
    /**
     *
     * @type {DomainSubresourceUris}
     * @memberof DomainsSipDomains
     */
    subresource_uris?: DomainSubresourceUris
    /**
     *
     * @type {string}
     * @memberof DomainsSipDomains
     */
    uri?: string
    /**
     *
     * @type {string}
     * @memberof DomainsSipDomains
     */
    voice_fallback_method?: string
    /**
     *
     * @type {any}
     * @memberof DomainsSipDomains
     */
    voice_fallback_url?: any
    /**
     *
     * @type {string}
     * @memberof DomainsSipDomains
     */
    voice_method?: string
    /**
     *
     * @type {string}
     * @memberof DomainsSipDomains
     */
    voice_status_callback_method?: string
    /**
     *
     * @type {any}
     * @memberof DomainsSipDomains
     */
    voice_status_callback_url?: any
    /**
     *
     * @type {string}
     * @memberof DomainsSipDomains
     */
    voice_url?: string
}

/**
 *
 * @export
 * @interface IncomingCall
 */
export interface IncomingCall {
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    api_version?: string
    /**
     *
     * @type {IncomingCallCapabilities}
     * @memberof IncomingCall
     */
    capabilities?: IncomingCallCapabilities
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    phone_number?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    sms_application_sid?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    sms_fallback_method?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    sms_fallback_url?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    sms_method?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    sms_url?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    status_callback?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    status_callback_method?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    uri?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    voice_application_sid?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    voice_caller_id_lookup?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    voice_fallback_method?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    voice_fallback_url?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    voice_method?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCall
     */
    voice_url?: string
}

/**
 *
 * @export
 * @interface IncomingCallCapabilities
 */
export interface IncomingCallCapabilities {
    /**
     *
     * @type {string}
     * @memberof IncomingCallCapabilities
     */
    sms?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCallCapabilities
     */
    voice?: string
}

/**
 *
 * @export
 * @interface IncomingCalls
 */
export interface IncomingCalls {
    /**
     *
     * @type {number}
     * @memberof IncomingCalls
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof IncomingCalls
     */
    first_page_uri?: string
    /**
     *
     * @type {Array<IncomingCallsIncomingPhoneNumbers>}
     * @memberof IncomingCalls
     */
    incoming_phone_numbers?: Array<IncomingCallsIncomingPhoneNumbers>
    /**
     *
     * @type {string}
     * @memberof IncomingCalls
     */
    last_page_uri?: string
    /**
     *
     * @type {any}
     * @memberof IncomingCalls
     */
    next_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof IncomingCalls
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof IncomingCalls
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof IncomingCalls
     */
    page_size?: number
    /**
     *
     * @type {any}
     * @memberof IncomingCalls
     */
    previous_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof IncomingCalls
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof IncomingCalls
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof IncomingCalls
     */
    uri?: string
}

/**
 *
 * @export
 * @interface IncomingCallsCapabilities
 */
export interface IncomingCallsCapabilities {
    /**
     *
     * @type {boolean}
     * @memberof IncomingCallsCapabilities
     */
    sms?: boolean
    /**
     *
     * @type {boolean}
     * @memberof IncomingCallsCapabilities
     */
    voice?: boolean
}

/**
 *
 * @export
 * @interface IncomingCallsIncomingPhoneNumbers
 */
export interface IncomingCallsIncomingPhoneNumbers {
    /**
     *
     * @type {string}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    api_version?: string
    /**
     *
     * @type {IncomingCallsCapabilities}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    capabilities?: IncomingCallsCapabilities
    /**
     *
     * @type {string}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    phone_number?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    sms_application_sid?: string
    /**
     *
     * @type {any}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    sms_fallback_method?: any
    /**
     *
     * @type {any}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    sms_fallback_url?: any
    /**
     *
     * @type {any}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    sms_method?: any
    /**
     *
     * @type {any}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    sms_url?: any
    /**
     *
     * @type {any}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    status_callback?: any
    /**
     *
     * @type {any}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    status_callback_method?: any
    /**
     *
     * @type {string}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    uri?: string
    /**
     *
     * @type {any}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    voice_application_sid?: any
    /**
     *
     * @type {any}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    voice_caller_id_lookup?: any
    /**
     *
     * @type {any}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    voice_fallback_method?: any
    /**
     *
     * @type {any}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    voice_fallback_url?: any
    /**
     *
     * @type {string}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    voice_method?: string
    /**
     *
     * @type {string}
     * @memberof IncomingCallsIncomingPhoneNumbers
     */
    voice_url?: string
}

/**
 *
 * @export
 * @interface IpAccessControlList
 */
export interface IpAccessControlList {
    /**
     *
     * @type {string}
     * @memberof IpAccessControlList
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof IpAccessControlList
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof IpAccessControlList
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof IpAccessControlList
     */
    sid?: string
    /**
     *
     * @type {IpAccessControlListSubresourceUris}
     * @memberof IpAccessControlList
     */
    subresource_uris?: IpAccessControlListSubresourceUris
    /**
     *
     * @type {string}
     * @memberof IpAccessControlList
     */
    uri?: string
}

/**
 *
 * @export
 * @interface IpAccessControlListMapping
 */
export interface IpAccessControlListMapping {
    /**
     *
     * @type {string}
     * @memberof IpAccessControlListMapping
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof IpAccessControlListMapping
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof IpAccessControlListMapping
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof IpAccessControlListMapping
     */
    sid?: string
    /**
     *
     * @type {IpAccessControlListSubresourceUris}
     * @memberof IpAccessControlListMapping
     */
    subresource_uris?: IpAccessControlListSubresourceUris
    /**
     *
     * @type {string}
     * @memberof IpAccessControlListMapping
     */
    uri?: string
}

/**
 *
 * @export
 * @interface IpAccessControlListMappings
 */
export interface IpAccessControlListMappings {
    /**
     *
     * @type {string}
     * @memberof IpAccessControlListMappings
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof IpAccessControlListMappings
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof IpAccessControlListMappings
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof IpAccessControlListMappings
     */
    sid?: string
    /**
     *
     * @type {IpAccessControlListSubresourceUris}
     * @memberof IpAccessControlListMappings
     */
    subresource_uris?: IpAccessControlListSubresourceUris
    /**
     *
     * @type {string}
     * @memberof IpAccessControlListMappings
     */
    uri?: string
}

/**
 *
 * @export
 * @interface IpAccessControlListSubresourceUris
 */
export interface IpAccessControlListSubresourceUris {
    /**
     *
     * @type {string}
     * @memberof IpAccessControlListSubresourceUris
     */
    addresses?: string
}

/**
 *
 * @export
 * @interface IpAddress
 */
export interface IpAddress {
    /**
     *
     * @type {string}
     * @memberof IpAddress
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof IpAddress
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof IpAddress
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof IpAddress
     */
    ip_address?: string
    /**
     *
     * @type {string}
     * @memberof IpAddress
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof IpAddress
     */
    uri?: string
}

/**
 *
 * @export
 * @interface IpAddresses
 */
export interface IpAddresses {
    /**
     *
     * @type {number}
     * @memberof IpAddresses
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof IpAddresses
     */
    first_page_uri?: string
    /**
     *
     * @type {Array<IpAddressesIpAddresses>}
     * @memberof IpAddresses
     */
    ip_addresses?: Array<IpAddressesIpAddresses>
    /**
     *
     * @type {string}
     * @memberof IpAddresses
     */
    last_page_uri?: string
    /**
     *
     * @type {any}
     * @memberof IpAddresses
     */
    next_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof IpAddresses
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof IpAddresses
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof IpAddresses
     */
    page_size?: number
    /**
     *
     * @type {any}
     * @memberof IpAddresses
     */
    previous_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof IpAddresses
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof IpAddresses
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof IpAddresses
     */
    uri?: string
}

/**
 *
 * @export
 * @interface IpAddressesIpAddresses
 */
export interface IpAddressesIpAddresses {
    /**
     *
     * @type {string}
     * @memberof IpAddressesIpAddresses
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof IpAddressesIpAddresses
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof IpAddressesIpAddresses
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof IpAddressesIpAddresses
     */
    ip_address?: string
    /**
     *
     * @type {string}
     * @memberof IpAddressesIpAddresses
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof IpAddressesIpAddresses
     */
    uri?: string
}

/**
 *
 * @export
 * @interface Media
 */
export interface Media {
    /**
     *
     * @type {string}
     * @memberof Media
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof Media
     */
    content_type?: string
    /**
     *
     * @type {string}
     * @memberof Media
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof Media
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof Media
     */
    parent_sid?: string
    /**
     *
     * @type {string}
     * @memberof Media
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof Media
     */
    uri?: string
}

/**
 *
 * @export
 * @interface MediaList
 */
export interface MediaList {
    /**
     *
     * @type {number}
     * @memberof MediaList
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof MediaList
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof MediaList
     */
    last_page_uri?: string
    /**
     *
     * @type {Array<MediaListMediaList>}
     * @memberof MediaList
     */
    media_list?: Array<MediaListMediaList>
    /**
     *
     * @type {any}
     * @memberof MediaList
     */
    next_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof MediaList
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof MediaList
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof MediaList
     */
    page_size?: number
    /**
     *
     * @type {any}
     * @memberof MediaList
     */
    previous_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof MediaList
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof MediaList
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof MediaList
     */
    uri?: string
}

/**
 *
 * @export
 * @interface MediaListMediaList
 */
export interface MediaListMediaList {
    /**
     *
     * @type {string}
     * @memberof MediaListMediaList
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof MediaListMediaList
     */
    content_type?: string
    /**
     *
     * @type {string}
     * @memberof MediaListMediaList
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof MediaListMediaList
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof MediaListMediaList
     */
    parent_sid?: string
    /**
     *
     * @type {string}
     * @memberof MediaListMediaList
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof MediaListMediaList
     */
    uri?: string
}

/**
 *
 * @export
 * @interface Member
 */
export interface Member {
    /**
     *
     * @type {string}
     * @memberof Member
     */
    call_sid?: string
    /**
     *
     * @type {string}
     * @memberof Member
     */
    date_enqueued?: string
    /**
     *
     * @type {number}
     * @memberof Member
     */
    position?: number
    /**
     *
     * @type {string}
     * @memberof Member
     */
    uri?: string
    /**
     *
     * @type {number}
     * @memberof Member
     */
    wait_time?: number
}

/**
 *
 * @export
 * @interface Members
 */
export interface Members {
    /**
     *
     * @type {number}
     * @memberof Members
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof Members
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Members
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Members
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof Members
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof Members
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof Members
     */
    page_size?: number
    /**
     *
     * @type {string}
     * @memberof Members
     */
    previous_page_uri?: string
    /**
     *
     * @type {Array<MembersQueueMembers>}
     * @memberof Members
     */
    queue_members?: Array<MembersQueueMembers>
    /**
     *
     * @type {number}
     * @memberof Members
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof Members
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof Members
     */
    uri?: string
}

/**
 *
 * @export
 * @interface MembersQueueMembers
 */
export interface MembersQueueMembers {
    /**
     *
     * @type {string}
     * @memberof MembersQueueMembers
     */
    call_sid?: string
    /**
     *
     * @type {string}
     * @memberof MembersQueueMembers
     */
    date_enqueued?: string
    /**
     *
     * @type {number}
     * @memberof MembersQueueMembers
     */
    position?: number
    /**
     *
     * @type {string}
     * @memberof MembersQueueMembers
     */
    uri?: string
    /**
     *
     * @type {number}
     * @memberof MembersQueueMembers
     */
    wait_time?: number
}

/**
 *
 * @export
 * @interface Message
 */
export interface Message {
    /**
     *
     * @type {string}
     * @memberof Message
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    body?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    date_sent?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    direction?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    from?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    num_media?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    num_segments?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    price?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    status?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    to?: string
    /**
     *
     * @type {string}
     * @memberof Message
     */
    uri?: string
}

/**
 *
 * @export
 * @interface Messages
 */
export interface Messages {
    /**
     *
     * @type {number}
     * @memberof Messages
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof Messages
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Messages
     */
    last_page_uri?: string
    /**
     *
     * @type {Array<MessagesMessages>}
     * @memberof Messages
     */
    messages?: Array<MessagesMessages>
    /**
     *
     * @type {string}
     * @memberof Messages
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof Messages
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof Messages
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof Messages
     */
    page_size?: number
    /**
     *
     * @type {any}
     * @memberof Messages
     */
    previous_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof Messages
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof Messages
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof Messages
     */
    uri?: string
}

/**
 *
 * @export
 * @interface MessagesMessages
 */
export interface MessagesMessages {
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    body?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    date_sent?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    direction?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    from?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    num_media?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    num_segments?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    price?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    status?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    to?: string
    /**
     *
     * @type {string}
     * @memberof MessagesMessages
     */
    uri?: string
}

/**
 *
 * @export
 * @interface MobilePhoneNumbers
 */
export interface MobilePhoneNumbers {
    /**
     *
     * @type {Array<MobilePhoneNumbersAvailablePhoneNumbers>}
     * @memberof MobilePhoneNumbers
     */
    available_phone_numbers?: Array<MobilePhoneNumbersAvailablePhoneNumbers>
    /**
     *
     * @type {string}
     * @memberof MobilePhoneNumbers
     */
    uri?: string
}

/**
 *
 * @export
 * @interface MobilePhoneNumbersAvailablePhoneNumbers
 */
export interface MobilePhoneNumbersAvailablePhoneNumbers {
    /**
     *
     * @type {AvailablePhoneNumbersCapabilities}
     * @memberof MobilePhoneNumbersAvailablePhoneNumbers
     */
    capabilities?: AvailablePhoneNumbersCapabilities
    /**
     *
     * @type {string}
     * @memberof MobilePhoneNumbersAvailablePhoneNumbers
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof MobilePhoneNumbersAvailablePhoneNumbers
     */
    iso_country?: string
    /**
     *
     * @type {any}
     * @memberof MobilePhoneNumbersAvailablePhoneNumbers
     */
    lata?: any
    /**
     *
     * @type {any}
     * @memberof MobilePhoneNumbersAvailablePhoneNumbers
     */
    latitude?: any
    /**
     *
     * @type {any}
     * @memberof MobilePhoneNumbersAvailablePhoneNumbers
     */
    longitude?: any
    /**
     *
     * @type {string}
     * @memberof MobilePhoneNumbersAvailablePhoneNumbers
     */
    phone_number?: string
    /**
     *
     * @type {any}
     * @memberof MobilePhoneNumbersAvailablePhoneNumbers
     */
    postal_code?: any
    /**
     *
     * @type {any}
     * @memberof MobilePhoneNumbersAvailablePhoneNumbers
     */
    rate_center?: any
    /**
     *
     * @type {string}
     * @memberof MobilePhoneNumbersAvailablePhoneNumbers
     */
    region?: string
}

/**
 *
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    call_sid?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    error_code?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    log?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    message_date?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    message_text?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    more_info?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    request_method?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    request_url?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    request_variables?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    response_body?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    response_headers?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    uri?: string
}

/**
 *
 * @export
 * @interface Notifications
 */
export interface Notifications {
    /**
     *
     * @type {number}
     * @memberof Notifications
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof Notifications
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Notifications
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Notifications
     */
    next_page_uri?: string
    /**
     *
     * @type {Array<NotificationsNotifications>}
     * @memberof Notifications
     */
    notifications?: Array<NotificationsNotifications>
    /**
     *
     * @type {number}
     * @memberof Notifications
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof Notifications
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof Notifications
     */
    page_size?: number
    /**
     *
     * @type {string}
     * @memberof Notifications
     */
    previous_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof Notifications
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof Notifications
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof Notifications
     */
    uri?: string
}

/**
 *
 * @export
 * @interface NotificationsNotifications
 */
export interface NotificationsNotifications {
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    call_sid?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    error_code?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    log?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    message_date?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    message_text?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    more_info?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    request_method?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    request_url?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    request_variables?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    response_body?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    response_headers?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof NotificationsNotifications
     */
    uri?: string
}

/**
 *
 * @export
 * @interface OutCaller
 */
export interface OutCaller {
    /**
     *
     * @type {string}
     * @memberof OutCaller
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof OutCaller
     */
    call_sid?: string
    /**
     *
     * @type {string}
     * @memberof OutCaller
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof OutCaller
     */
    phone_number?: string
    /**
     *
     * @type {number}
     * @memberof OutCaller
     */
    validation_code?: number
}

/**
 *
 * @export
 * @interface OutCallerId
 */
export interface OutCallerId {
    /**
     *
     * @type {string}
     * @memberof OutCallerId
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof OutCallerId
     */
    call_sid?: string
    /**
     *
     * @type {string}
     * @memberof OutCallerId
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof OutCallerId
     */
    phone_number?: string
    /**
     *
     * @type {number}
     * @memberof OutCallerId
     */
    validation_code?: number
}

/**
 *
 * @export
 * @interface OutCallerIds
 */
export interface OutCallerIds {
    /**
     *
     * @type {number}
     * @memberof OutCallerIds
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof OutCallerIds
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof OutCallerIds
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof OutCallerIds
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof OutCallerIds
     */
    num_pages?: number
    /**
     *
     * @type {OutCallerIdsOutgoingCallerIds}
     * @memberof OutCallerIds
     */
    outgoing_caller_ids?: OutCallerIdsOutgoingCallerIds
    /**
     *
     * @type {number}
     * @memberof OutCallerIds
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof OutCallerIds
     */
    page_size?: number
    /**
     *
     * @type {string}
     * @memberof OutCallerIds
     */
    previous_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof OutCallerIds
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof OutCallerIds
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof OutCallerIds
     */
    uri?: string
}

/**
 *
 * @export
 * @interface OutCallerIdsOutgoingCallerIds
 */
export interface OutCallerIdsOutgoingCallerIds {
    /**
     *
     * @type {string}
     * @memberof OutCallerIdsOutgoingCallerIds
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof OutCallerIdsOutgoingCallerIds
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof OutCallerIdsOutgoingCallerIds
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof OutCallerIdsOutgoingCallerIds
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof OutCallerIdsOutgoingCallerIds
     */
    phone_number?: string
    /**
     *
     * @type {string}
     * @memberof OutCallerIdsOutgoingCallerIds
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof OutCallerIdsOutgoingCallerIds
     */
    uri?: string
}

/**
 *
 * @export
 * @interface OutgoingCallerId
 */
export interface OutgoingCallerId {
    /**
     *
     * @type {string}
     * @memberof OutgoingCallerId
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof OutgoingCallerId
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof OutgoingCallerId
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof OutgoingCallerId
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof OutgoingCallerId
     */
    phone_number?: string
    /**
     *
     * @type {string}
     * @memberof OutgoingCallerId
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof OutgoingCallerId
     */
    uri?: string
}

/**
 *
 * @export
 * @interface Participant
 */
export interface Participant {
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    call_sid?: string
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    conference_sid?: string
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    date_updated?: string
    /**
     *
     * @type {boolean}
     * @memberof Participant
     */
    end_conference_on_exit?: boolean
    /**
     *
     * @type {boolean}
     * @memberof Participant
     */
    muted?: boolean
    /**
     *
     * @type {boolean}
     * @memberof Participant
     */
    start_conference_on_enter?: boolean
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    uri?: string
}

/**
 *
 * @export
 * @interface Participants
 */
export interface Participants {
    /**
     *
     * @type {number}
     * @memberof Participants
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof Participants
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Participants
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Participants
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof Participants
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof Participants
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof Participants
     */
    page_size?: number
    /**
     *
     * @type {Array<ParticipantsParticipants>}
     * @memberof Participants
     */
    participants?: Array<ParticipantsParticipants>
    /**
     *
     * @type {string}
     * @memberof Participants
     */
    previous_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof Participants
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof Participants
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof Participants
     */
    uri?: string
}

/**
 *
 * @export
 * @interface ParticipantsParticipants
 */
export interface ParticipantsParticipants {
    /**
     *
     * @type {string}
     * @memberof ParticipantsParticipants
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof ParticipantsParticipants
     */
    call_sid?: string
    /**
     *
     * @type {string}
     * @memberof ParticipantsParticipants
     */
    conference_sid?: string
    /**
     *
     * @type {string}
     * @memberof ParticipantsParticipants
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof ParticipantsParticipants
     */
    date_updated?: string
    /**
     *
     * @type {boolean}
     * @memberof ParticipantsParticipants
     */
    end_conference_on_exit?: boolean
    /**
     *
     * @type {boolean}
     * @memberof ParticipantsParticipants
     */
    muted?: boolean
    /**
     *
     * @type {boolean}
     * @memberof ParticipantsParticipants
     */
    start_conference_on_enter?: boolean
    /**
     *
     * @type {string}
     * @memberof ParticipantsParticipants
     */
    uri?: string
}

/**
 *
 * @export
 * @interface PhoneLocalNumbers
 */
export interface PhoneLocalNumbers {
    /**
     *
     * @type {Array<AvailablePhoneNumbersAvailablePhoneNumbers>}
     * @memberof PhoneLocalNumbers
     */
    available_phone_numbers?: Array<AvailablePhoneNumbersAvailablePhoneNumbers>
    /**
     *
     * @type {string}
     * @memberof PhoneLocalNumbers
     */
    uri?: string
}

/**
 *
 * @export
 * @interface PhoneMobileNumbers
 */
export interface PhoneMobileNumbers {
    /**
     *
     * @type {Array<MobilePhoneNumbersAvailablePhoneNumbers>}
     * @memberof PhoneMobileNumbers
     */
    available_phone_numbers?: Array<MobilePhoneNumbersAvailablePhoneNumbers>
    /**
     *
     * @type {string}
     * @memberof PhoneMobileNumbers
     */
    uri?: string
}

/**
 *
 * @export
 * @interface PhoneNumbers
 */
export interface PhoneNumbers {
    /**
     *
     * @type {Array<PhoneNumbersAvailablePhoneNumbers>}
     * @memberof PhoneNumbers
     */
    available_phone_numbers?: Array<PhoneNumbersAvailablePhoneNumbers>
    /**
     *
     * @type {string}
     * @memberof PhoneNumbers
     */
    uri?: string
}

/**
 *
 * @export
 * @interface PhoneNumbersAvailablePhoneNumbers
 */
export interface PhoneNumbersAvailablePhoneNumbers {
    /**
     * A nicely-formatted version of the phone number.
     * @type {string}
     * @memberof PhoneNumbersAvailablePhoneNumbers
     */
    friendly_name?: string
    /**
     * The ISO country code of this phone number.
     * @type {string}
     * @memberof PhoneNumbersAvailablePhoneNumbers
     */
    iso_country?: string
    /**
     * The LATA of this phone number.
     * @type {string}
     * @memberof PhoneNumbersAvailablePhoneNumbers
     */
    lata?: string
    /**
     * The latitude coordinate of this phone number.
     * @type {string}
     * @memberof PhoneNumbersAvailablePhoneNumbers
     */
    latitude?: string
    /**
     * The longitude coordinate of this phone number.
     * @type {string}
     * @memberof PhoneNumbersAvailablePhoneNumbers
     */
    longitude?: string
    /**
     * The phone number, in E.164 (i.e. '+1') format.
     * @type {string}
     * @memberof PhoneNumbersAvailablePhoneNumbers
     */
    phone_number?: string
    /**
     * The postal (zip) code of this phone number.
     * @type {string}
     * @memberof PhoneNumbersAvailablePhoneNumbers
     */
    postal_code?: string
    /**
     * The rate center of this phone number.
     * @type {string}
     * @memberof PhoneNumbersAvailablePhoneNumbers
     */
    rate_center?: string
    /**
     * The two-letter state or province abbreviation of this phone number.
     * @type {string}
     * @memberof PhoneNumbersAvailablePhoneNumbers
     */
    region?: string
}

/**
 *
 * @export
 * @interface PhoneTollFreeNumbers
 */
export interface PhoneTollFreeNumbers {
    /**
     *
     * @type {Array<PhoneTollFreeNumbersAvailablePhoneNumbers>}
     * @memberof PhoneTollFreeNumbers
     */
    available_phone_numbers?: Array<PhoneTollFreeNumbersAvailablePhoneNumbers>
    /**
     *
     * @type {string}
     * @memberof PhoneTollFreeNumbers
     */
    uri?: string
}

/**
 *
 * @export
 * @interface PhoneTollFreeNumbersAvailablePhoneNumbers
 */
export interface PhoneTollFreeNumbersAvailablePhoneNumbers {
    /**
     *
     * @type {AvailablePhoneNumbersCapabilities}
     * @memberof PhoneTollFreeNumbersAvailablePhoneNumbers
     */
    capabilities?: AvailablePhoneNumbersCapabilities
    /**
     *
     * @type {string}
     * @memberof PhoneTollFreeNumbersAvailablePhoneNumbers
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof PhoneTollFreeNumbersAvailablePhoneNumbers
     */
    iso_country?: string
    /**
     *
     * @type {string}
     * @memberof PhoneTollFreeNumbersAvailablePhoneNumbers
     */
    phone_number?: string
}

/**
 *
 * @export
 * @interface Queue
 */
export interface Queue {
    /**
     *
     * @type {number}
     * @memberof Queue
     */
    average_wait_time?: number
    /**
     *
     * @type {number}
     * @memberof Queue
     */
    current_size?: number
    /**
     *
     * @type {string}
     * @memberof Queue
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof Queue
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof Queue
     */
    friendly_name?: string
    /**
     *
     * @type {number}
     * @memberof Queue
     */
    max_size?: number
    /**
     *
     * @type {string}
     * @memberof Queue
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof Queue
     */
    uri?: string
}

/**
 *
 * @export
 * @interface Queues
 */
export interface Queues {
    /**
     *
     * @type {number}
     * @memberof Queues
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof Queues
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Queues
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Queues
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof Queues
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof Queues
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof Queues
     */
    page_size?: number
    /**
     *
     * @type {string}
     * @memberof Queues
     */
    previous_page_uri?: string
    /**
     *
     * @type {Array<QueuesQueues>}
     * @memberof Queues
     */
    queues?: Array<QueuesQueues>
    /**
     *
     * @type {number}
     * @memberof Queues
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof Queues
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof Queues
     */
    uri?: string
}

/**
 *
 * @export
 * @interface QueuesQueues
 */
export interface QueuesQueues {
    /**
     *
     * @type {number}
     * @memberof QueuesQueues
     */
    average_wait_time?: number
    /**
     *
     * @type {number}
     * @memberof QueuesQueues
     */
    current_size?: number
    /**
     *
     * @type {string}
     * @memberof QueuesQueues
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof QueuesQueues
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof QueuesQueues
     */
    friendly_name?: string
    /**
     *
     * @type {number}
     * @memberof QueuesQueues
     */
    max_size?: number
    /**
     *
     * @type {string}
     * @memberof QueuesQueues
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof QueuesQueues
     */
    uri?: string
}

/**
 *
 * @export
 * @interface Recordings
 */
export interface Recordings {
    /**
     *
     * @type {number}
     * @memberof Recordings
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof Recordings
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Recordings
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Recordings
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof Recordings
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof Recordings
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof Recordings
     */
    page_size?: number
    /**
     *
     * @type {string}
     * @memberof Recordings
     */
    previous_page_uri?: string
    /**
     *
     * @type {Array<RecordingsRecordings>}
     * @memberof Recordings
     */
    recordings?: Array<RecordingsRecordings>
    /**
     *
     * @type {number}
     * @memberof Recordings
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof Recordings
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof Recordings
     */
    uri?: string
}

/**
 *
 * @export
 * @interface RecordingsRecordings
 */
export interface RecordingsRecordings {
    /**
     *
     * @type {string}
     * @memberof RecordingsRecordings
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof RecordingsRecordings
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof RecordingsRecordings
     */
    call_sid?: string
    /**
     *
     * @type {string}
     * @memberof RecordingsRecordings
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof RecordingsRecordings
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof RecordingsRecordings
     */
    duration?: string
    /**
     *
     * @type {string}
     * @memberof RecordingsRecordings
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof RecordingsRecordings
     */
    uri?: string
}

/**
 *
 * @export
 * @interface ShortCode
 */
export interface ShortCode {
    /**
     *
     * @type {string}
     * @memberof ShortCode
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof ShortCode
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof ShortCode
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof ShortCode
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof ShortCode
     */
    short_code?: string
    /**
     *
     * @type {string}
     * @memberof ShortCode
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof ShortCode
     */
    sms_fallback_method?: string
    /**
     *
     * @type {string}
     * @memberof ShortCode
     */
    sms_fallback_url?: string
    /**
     *
     * @type {string}
     * @memberof ShortCode
     */
    sms_method?: string
    /**
     *
     * @type {string}
     * @memberof ShortCode
     */
    sms_url?: string
    /**
     *
     * @type {string}
     * @memberof ShortCode
     */
    uri?: string
}

/**
 *
 * @export
 * @interface ShortCodes
 */
export interface ShortCodes {
    /**
     *
     * @type {number}
     * @memberof ShortCodes
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof ShortCodes
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof ShortCodes
     */
    last_page_uri?: string
    /**
     *
     * @type {any}
     * @memberof ShortCodes
     */
    next_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof ShortCodes
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof ShortCodes
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof ShortCodes
     */
    page_size?: number
    /**
     *
     * @type {any}
     * @memberof ShortCodes
     */
    previous_page_uri?: any
    /**
     *
     * @type {Array<ShortCodesShortCodes>}
     * @memberof ShortCodes
     */
    short_codes?: Array<ShortCodesShortCodes>
    /**
     *
     * @type {number}
     * @memberof ShortCodes
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof ShortCodes
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof ShortCodes
     */
    uri?: string
}

/**
 *
 * @export
 * @interface ShortCodesShortCodes
 */
export interface ShortCodesShortCodes {
    /**
     *
     * @type {string}
     * @memberof ShortCodesShortCodes
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof ShortCodesShortCodes
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof ShortCodesShortCodes
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof ShortCodesShortCodes
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof ShortCodesShortCodes
     */
    short_code?: string
    /**
     *
     * @type {string}
     * @memberof ShortCodesShortCodes
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof ShortCodesShortCodes
     */
    sms_fallback_method?: string
    /**
     *
     * @type {string}
     * @memberof ShortCodesShortCodes
     */
    sms_fallback_url?: string
    /**
     *
     * @type {string}
     * @memberof ShortCodesShortCodes
     */
    sms_method?: string
    /**
     *
     * @type {string}
     * @memberof ShortCodesShortCodes
     */
    sms_url?: string
    /**
     *
     * @type {string}
     * @memberof ShortCodesShortCodes
     */
    uri?: string
}

/**
 *
 * @export
 * @interface Transcription
 */
export interface Transcription {
    /**
     *
     * @type {string}
     * @memberof Transcription
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof Transcription
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof Transcription
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof Transcription
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof Transcription
     */
    duration?: string
    /**
     *
     * @type {string}
     * @memberof Transcription
     */
    price?: string
    /**
     *
     * @type {string}
     * @memberof Transcription
     */
    recording_sid?: string
    /**
     *
     * @type {string}
     * @memberof Transcription
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof Transcription
     */
    status?: string
    /**
     *
     * @type {string}
     * @memberof Transcription
     */
    transcription_text?: string
    /**
     *
     * @type {string}
     * @memberof Transcription
     */
    type?: string
    /**
     *
     * @type {string}
     * @memberof Transcription
     */
    uri?: string
}

/**
 *
 * @export
 * @interface Transcriptions
 */
export interface Transcriptions {
    /**
     *
     * @type {number}
     * @memberof Transcriptions
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof Transcriptions
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Transcriptions
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof Transcriptions
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof Transcriptions
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof Transcriptions
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof Transcriptions
     */
    page_size?: number
    /**
     *
     * @type {any}
     * @memberof Transcriptions
     */
    previous_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof Transcriptions
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof Transcriptions
     */
    total?: number
    /**
     *
     * @type {Array<TranscriptionsTranscriptions>}
     * @memberof Transcriptions
     */
    transcriptions?: Array<TranscriptionsTranscriptions>
    /**
     *
     * @type {string}
     * @memberof Transcriptions
     */
    uri?: string
}

/**
 *
 * @export
 * @interface TranscriptionsTranscriptions
 */
export interface TranscriptionsTranscriptions {
    /**
     *
     * @type {string}
     * @memberof TranscriptionsTranscriptions
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof TranscriptionsTranscriptions
     */
    api_version?: string
    /**
     *
     * @type {string}
     * @memberof TranscriptionsTranscriptions
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof TranscriptionsTranscriptions
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof TranscriptionsTranscriptions
     */
    duration?: string
    /**
     *
     * @type {string}
     * @memberof TranscriptionsTranscriptions
     */
    price?: string
    /**
     *
     * @type {string}
     * @memberof TranscriptionsTranscriptions
     */
    recording_sid?: string
    /**
     *
     * @type {string}
     * @memberof TranscriptionsTranscriptions
     */
    sid?: string
    /**
     *
     * @type {string}
     * @memberof TranscriptionsTranscriptions
     */
    status?: string
    /**
     *
     * @type {string}
     * @memberof TranscriptionsTranscriptions
     */
    transcription_text?: string
    /**
     *
     * @type {string}
     * @memberof TranscriptionsTranscriptions
     */
    type?: string
    /**
     *
     * @type {string}
     * @memberof TranscriptionsTranscriptions
     */
    uri?: string
}

/**
 *
 * @export
 * @interface UsageRecords
 */
export interface UsageRecords {
    /**
     *
     * @type {number}
     * @memberof UsageRecords
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof UsageRecords
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecords
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecords
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof UsageRecords
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof UsageRecords
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof UsageRecords
     */
    page_size?: number
    /**
     *
     * @type {string}
     * @memberof UsageRecords
     */
    previous_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof UsageRecords
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof UsageRecords
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof UsageRecords
     */
    uri?: string
    /**
     *
     * @type {UsageRecordsUsageRecords}
     * @memberof UsageRecords
     */
    usage_records?: UsageRecordsUsageRecords
}

/**
 *
 * @export
 * @interface UsageRecordsUsageRecords
 */
export interface UsageRecordsUsageRecords {
    /**
     *
     * @type {string}
     * @memberof UsageRecordsUsageRecords
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecordsUsageRecords
     */
    category?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecordsUsageRecords
     */
    count?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecordsUsageRecords
     */
    count_unit?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecordsUsageRecords
     */
    description?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecordsUsageRecords
     */
    end_date?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecordsUsageRecords
     */
    price?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecordsUsageRecords
     */
    price_unit?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecordsUsageRecords
     */
    start_date?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecordsUsageRecords
     */
    subresource_uris?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecordsUsageRecords
     */
    uri?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecordsUsageRecords
     */
    usage?: string
    /**
     *
     * @type {string}
     * @memberof UsageRecordsUsageRecords
     */
    usage_unit?: string
}

/**
 *
 * @export
 * @interface UsageTrigger
 */
export interface UsageTrigger {
    /**
     * The account this trigger monitors.
     * @type {string}
     * @memberof UsageTrigger
     */
    account_sid?: string
    /**
     * The HTTP method Twilio will use when making a request to the CallbackUrl. GET or POST.
     * @type {any}
     * @memberof UsageTrigger
     */
    callback_method?: any
    /**
     * Twilio will make a request to this url when the trigger fires.
     * @type {string}
     * @memberof UsageTrigger
     */
    callback_url?: string
    /**
     * The current value of the field the trigger is watching.
     * @type {string}
     * @memberof UsageTrigger
     */
    current_value?: string
    /**
     * The date the trigger was created, given as GMT RFC 2822 format.
     * @type {string}
     * @memberof UsageTrigger
     */
    date_created?: string
    /**
     * The date the trigger was last fired, given as GMT RFC 2822 format.
     * @type {string}
     * @memberof UsageTrigger
     */
    date_fired?: string
    /**
     * The date the trigger was last updated, given as GMT RFC 2822 format.
     * @type {string}
     * @memberof UsageTrigger
     */
    date_updated?: string
    /**
     * A user-specified, human-readable name for the trigger.
     * @type {string}
     * @memberof UsageTrigger
     */
    friendly_name?: string
    /**
     * How this trigger recurs. Empty for non-recurring triggers. One of daily, monthly, or yearly for recurring triggers. A trigger will only fire once during each recurring period. Recurring periods are in GMT.
     * @type {string}
     * @memberof UsageTrigger
     */
    recurring?: string
    /**
     * The trigger's unique Sid.
     * @type {string}
     * @memberof UsageTrigger
     */
    sid?: string
    /**
     * The field in the UsageRecord that fires the trigger. One of count, usage, or price.
     * @type {any}
     * @memberof UsageTrigger
     */
    trigger_by?: any
    /**
     * The value at which the trigger will fire. Must be a positive numeric value.
     * @type {string}
     * @memberof UsageTrigger
     */
    trigger_value?: string
    /**
     * The URI for this resource, relative to https://api.twilio.com.
     * @type {string}
     * @memberof UsageTrigger
     */
    uri?: string
    /**
     * The usage category the trigger watches. One of the supported usage categories.
     * @type {string}
     * @memberof UsageTrigger
     */
    usage_category?: string
    /**
     * The URI of the UsageRecord this trigger is watching, relative to https://api.twilio.com.
     * @type {string}
     * @memberof UsageTrigger
     */
    usage_record_uri?: string
}

/**
 *
 * @export
 * @interface UsageTriggers
 */
export interface UsageTriggers {
    /**
     *
     * @type {number}
     * @memberof UsageTriggers
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof UsageTriggers
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof UsageTriggers
     */
    last_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof UsageTriggers
     */
    next_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof UsageTriggers
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof UsageTriggers
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof UsageTriggers
     */
    page_size?: number
    /**
     *
     * @type {string}
     * @memberof UsageTriggers
     */
    previous_page_uri?: string
    /**
     *
     * @type {number}
     * @memberof UsageTriggers
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof UsageTriggers
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof UsageTriggers
     */
    uri?: string
    /**
     *
     * @type {Array<UsageTriggersUsageTriggers>}
     * @memberof UsageTriggers
     */
    usage_triggers?: Array<UsageTriggersUsageTriggers>
}

/**
 *
 * @export
 * @interface UsageTriggersUsageTriggers
 */
export interface UsageTriggersUsageTriggers {
    /**
     *
     * @type {string}
     * @memberof UsageTriggersUsageTriggers
     */
    account_sid?: string
    /**
     *
     * @type {any}
     * @memberof UsageTriggersUsageTriggers
     */
    callback_method?: any
    /**
     *
     * @type {string}
     * @memberof UsageTriggersUsageTriggers
     */
    callback_url?: string
    /**
     *
     * @type {string}
     * @memberof UsageTriggersUsageTriggers
     */
    current_value?: string
    /**
     *
     * @type {string}
     * @memberof UsageTriggersUsageTriggers
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof UsageTriggersUsageTriggers
     */
    date_fired?: string
    /**
     *
     * @type {string}
     * @memberof UsageTriggersUsageTriggers
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof UsageTriggersUsageTriggers
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof UsageTriggersUsageTriggers
     */
    recurring?: string
    /**
     *
     * @type {string}
     * @memberof UsageTriggersUsageTriggers
     */
    sid?: string
    /**
     *
     * @type {any}
     * @memberof UsageTriggersUsageTriggers
     */
    trigger_by?: any
    /**
     *
     * @type {string}
     * @memberof UsageTriggersUsageTriggers
     */
    trigger_value?: string
    /**
     *
     * @type {string}
     * @memberof UsageTriggersUsageTriggers
     */
    uri?: string
    /**
     *
     * @type {string}
     * @memberof UsageTriggersUsageTriggers
     */
    usage_category?: string
    /**
     *
     * @type {string}
     * @memberof UsageTriggersUsageTriggers
     */
    usage_record_uri?: string
}

/**
 *
 * @export
 * @interface UserLists
 */
export interface UserLists {
    /**
     *
     * @type {Array<UserListsCredentialListMappings>}
     * @memberof UserLists
     */
    credential_list_mappings?: Array<UserListsCredentialListMappings>
    /**
     *
     * @type {number}
     * @memberof UserLists
     */
    end?: number
    /**
     *
     * @type {string}
     * @memberof UserLists
     */
    first_page_uri?: string
    /**
     *
     * @type {string}
     * @memberof UserLists
     */
    last_page_uri?: string
    /**
     *
     * @type {any}
     * @memberof UserLists
     */
    next_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof UserLists
     */
    num_pages?: number
    /**
     *
     * @type {number}
     * @memberof UserLists
     */
    page?: number
    /**
     *
     * @type {number}
     * @memberof UserLists
     */
    page_size?: number
    /**
     *
     * @type {any}
     * @memberof UserLists
     */
    previous_page_uri?: any
    /**
     *
     * @type {number}
     * @memberof UserLists
     */
    start?: number
    /**
     *
     * @type {number}
     * @memberof UserLists
     */
    total?: number
    /**
     *
     * @type {string}
     * @memberof UserLists
     */
    uri?: string
}

/**
 *
 * @export
 * @interface UserListsCredentialListMappings
 */
export interface UserListsCredentialListMappings {
    /**
     *
     * @type {string}
     * @memberof UserListsCredentialListMappings
     */
    account_sid?: string
    /**
     *
     * @type {string}
     * @memberof UserListsCredentialListMappings
     */
    date_created?: string
    /**
     *
     * @type {string}
     * @memberof UserListsCredentialListMappings
     */
    date_updated?: string
    /**
     *
     * @type {string}
     * @memberof UserListsCredentialListMappings
     */
    friendly_name?: string
    /**
     *
     * @type {string}
     * @memberof UserListsCredentialListMappings
     */
    sid?: string
    /**
     *
     * @type {CredentialListSubresourceUris}
     * @memberof UserListsCredentialListMappings
     */
    subresource_uris?: CredentialListSubresourceUris
    /**
     *
     * @type {string}
     * @memberof UserListsCredentialListMappings
     */
    uri?: string
}

/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function(
    configuration?: Configuration
) {
    return {
        /**
         * Delete this application.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ApplicationSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'ApplicationSid' is not null or undefined
            if (ApplicationSid === null || ApplicationSid === undefined) {
                throw new RequiredError(
                    'ApplicationSid',
                    'Required parameter ApplicationSid was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Applications/{ApplicationSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'ApplicationSid'}}`,
                    encodeURIComponent(String(ApplicationSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get application instance resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ApplicationSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'ApplicationSid' is not null or undefined
            if (ApplicationSid === null || ApplicationSid === undefined) {
                throw new RequiredError(
                    'ApplicationSid',
                    'Required parameter ApplicationSid was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Applications/{ApplicationSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'ApplicationSid'}}`,
                    encodeURIComponent(String(ApplicationSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Tries to update the application's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ApplicationSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'ApplicationSid' is not null or undefined
            if (ApplicationSid === null || ApplicationSid === undefined) {
                throw new RequiredError(
                    'ApplicationSid',
                    'Required parameter ApplicationSid was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Applications/{ApplicationSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'ApplicationSid'}}`,
                    encodeURIComponent(String(ApplicationSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of Application resource representations, each representing an application within your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidApplicationsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidApplicationsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Applications{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Creates a new application within your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidApplicationsmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidApplicationsmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Applications{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get the properties of the authorized application.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ConnectAppSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'ConnectAppSid' is not null or undefined
            if (ConnectAppSid === null || ConnectAppSid === undefined) {
                throw new RequiredError(
                    'ConnectAppSid',
                    'Required parameter ConnectAppSid was null or undefined when calling accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/AuthorizedConnectApps/{ConnectAppSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'ConnectAppSid'}}`,
                    encodeURIComponent(String(ConnectAppSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of Connect App resource representations, each representing a Connect App you've authorized to access your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/AuthorizedConnectApps{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of local AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number tha is currently available for provisioning within your account.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(
            AccountSid: string,
            IsoCountryCode: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'IsoCountryCode' is not null or undefined
            if (IsoCountryCode === null || IsoCountryCode === undefined) {
                throw new RequiredError(
                    'IsoCountryCode',
                    'Required parameter IsoCountryCode was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/AvailablePhoneNumbers/{IsoCountryCode}/Local{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'IsoCountryCode'}}`,
                    encodeURIComponent(String(IsoCountryCode))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of mobile AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number that is currently available for provisioning within your account.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(
            AccountSid: string,
            IsoCountryCode: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'IsoCountryCode' is not null or undefined
            if (IsoCountryCode === null || IsoCountryCode === undefined) {
                throw new RequiredError(
                    'IsoCountryCode',
                    'Required parameter IsoCountryCode was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/AvailablePhoneNumbers/{IsoCountryCode}/Mobile{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'IsoCountryCode'}}`,
                    encodeURIComponent(String(IsoCountryCode))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of toll-free AvailablePhoneNumber elements that match the specified filters, each representing a phone number that is currently available for provisioning within your account. To provision an available phone number, POST the number to the IncomingPhoneNumbers resource.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(
            AccountSid: string,
            IsoCountryCode: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'IsoCountryCode' is not null or undefined
            if (IsoCountryCode === null || IsoCountryCode === undefined) {
                throw new RequiredError(
                    'IsoCountryCode',
                    'Required parameter IsoCountryCode was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/AvailablePhoneNumbers/{IsoCountryCode}/TollFree{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'IsoCountryCode'}}`,
                    encodeURIComponent(String(IsoCountryCode))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of all AvailablePhoneNumber subresources for your account by ISO Country. For full information about our phone number support, see our Phone Number CSV (http://www.twilio.com/resources/rates/international-phone-number-rates.csv).
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/AvailablePhoneNumbers{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of notifications generated for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {string} CallSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(
            AccountSid: string,
            CallSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError(
                    'CallSid',
                    'Required parameter CallSid was null or undefined when calling accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Calls/{CallSid}/Notifications{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)))
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
         * @param {string} AccountSid
         * @param {string} CallSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(
            AccountSid: string,
            CallSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError(
                    'CallSid',
                    'Required parameter CallSid was null or undefined when calling accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Calls/{CallSid}/Recordings{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)))
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns the single Call resource identified by {CallSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidCallsCallSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidCallsCallSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError(
                    'CallSid',
                    'Required parameter CallSid was null or undefined when calling accountsAccountSidCallsCallSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Calls/{CallSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)))
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Modify a phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidCallsCallSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidCallsCallSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError(
                    'CallSid',
                    'Required parameter CallSid was null or undefined when calling accountsAccountSidCallsCallSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Calls/{CallSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)))
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of phone calls made to and from the account identified by {AccountSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidCallsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidCallsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Calls{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * To make a call, make an HTTP POST request. Initiate a new phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidCallsmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidCallsmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Calls{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Kick this participant from the conference.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(
            AccountSid: string,
            ConferenceSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'ConferenceSid' is not null or undefined
            if (ConferenceSid === null || ConferenceSid === undefined) {
                throw new RequiredError(
                    'ConferenceSid',
                    'Required parameter ConferenceSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError(
                    'CallSid',
                    'Required parameter CallSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'ConferenceSid'}}`,
                    encodeURIComponent(String(ConferenceSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)))
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a representation of this participant.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(
            AccountSid: string,
            ConferenceSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'ConferenceSid' is not null or undefined
            if (ConferenceSid === null || ConferenceSid === undefined) {
                throw new RequiredError(
                    'ConferenceSid',
                    'Required parameter ConferenceSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError(
                    'CallSid',
                    'Required parameter CallSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'ConferenceSid'}}`,
                    encodeURIComponent(String(ConferenceSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)))
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Updates the status of a participant.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(
            AccountSid: string,
            ConferenceSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'ConferenceSid' is not null or undefined
            if (ConferenceSid === null || ConferenceSid === undefined) {
                throw new RequiredError(
                    'ConferenceSid',
                    'Required parameter ConferenceSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError(
                    'CallSid',
                    'Required parameter CallSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'ConferenceSid'}}`,
                    encodeURIComponent(String(ConferenceSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)))
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns the list of participants in the conference identified by {ConferenceSid}.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(
            AccountSid: string,
            ConferenceSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'ConferenceSid' is not null or undefined
            if (ConferenceSid === null || ConferenceSid === undefined) {
                throw new RequiredError(
                    'ConferenceSid',
                    'Required parameter ConferenceSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'ConferenceSid'}}`,
                    encodeURIComponent(String(ConferenceSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a representation of the conference identified by {ConferenceSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConferenceSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ConferenceSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'ConferenceSid' is not null or undefined
            if (ConferenceSid === null || ConferenceSid === undefined) {
                throw new RequiredError(
                    'ConferenceSid',
                    'Required parameter ConferenceSid was null or undefined when calling accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Conferences/{ConferenceSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'ConferenceSid'}}`,
                    encodeURIComponent(String(ConferenceSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of conferences within an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidConferencesmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConferencesmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Conferences{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get the properties of a Connect App.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ConnectAppSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'ConnectAppSid' is not null or undefined
            if (ConnectAppSid === null || ConnectAppSid === undefined) {
                throw new RequiredError(
                    'ConnectAppSid',
                    'Required parameter ConnectAppSid was null or undefined when calling accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/ConnectApps/{ConnectAppSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'ConnectAppSid'}}`,
                    encodeURIComponent(String(ConnectAppSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Tries to update the Connect App's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ConnectAppSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'ConnectAppSid' is not null or undefined
            if (ConnectAppSid === null || ConnectAppSid === undefined) {
                throw new RequiredError(
                    'ConnectAppSid',
                    'Required parameter ConnectAppSid was null or undefined when calling accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/ConnectApps/{ConnectAppSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'ConnectAppSid'}}`,
                    encodeURIComponent(String(ConnectAppSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of Connect App resource representations, each representing a Connect App in your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidConnectAppsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConnectAppsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/ConnectApps{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Release this phone number from your account. Twilio will no longer answer calls to this number, and you will stop being billed the monthly phone number fee. The phone number will eventually be recycled and potentially given to another customer, so use with care. If you make a mistake, contac us. We may be able to give you the number back.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IncomingPhoneNumberSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'IncomingPhoneNumberSid' is not null or undefined
            if (
                IncomingPhoneNumberSid === null ||
                IncomingPhoneNumberSid === undefined
            ) {
                throw new RequiredError(
                    'IncomingPhoneNumberSid',
                    'Required parameter IncomingPhoneNumberSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/{IncomingPhoneNumberSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'IncomingPhoneNumberSid'}}`,
                    encodeURIComponent(String(IncomingPhoneNumberSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get info about incoming call's phone number.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IncomingPhoneNumberSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'IncomingPhoneNumberSid' is not null or undefined
            if (
                IncomingPhoneNumberSid === null ||
                IncomingPhoneNumberSid === undefined
            ) {
                throw new RequiredError(
                    'IncomingPhoneNumberSid',
                    'Required parameter IncomingPhoneNumberSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/{IncomingPhoneNumberSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'IncomingPhoneNumberSid'}}`,
                    encodeURIComponent(String(IncomingPhoneNumberSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IncomingPhoneNumberSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'IncomingPhoneNumberSid' is not null or undefined
            if (
                IncomingPhoneNumberSid === null ||
                IncomingPhoneNumberSid === undefined
            ) {
                throw new RequiredError(
                    'IncomingPhoneNumberSid',
                    'Required parameter IncomingPhoneNumberSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/{IncomingPhoneNumberSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'IncomingPhoneNumberSid'}}`,
                    encodeURIComponent(String(IncomingPhoneNumberSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IncomingPhoneNumberSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut.'
                )
            }
            // verify required parameter 'IncomingPhoneNumberSid' is not null or undefined
            if (
                IncomingPhoneNumberSid === null ||
                IncomingPhoneNumberSid === undefined
            ) {
                throw new RequiredError(
                    'IncomingPhoneNumberSid',
                    'Required parameter IncomingPhoneNumberSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/{IncomingPhoneNumberSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'IncomingPhoneNumberSid'}}`,
                    encodeURIComponent(String(IncomingPhoneNumberSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'PUT' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a local (not toll-free) phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out toll-free numbers.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/Local{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/Local{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a mobile phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out local and toll free numbers.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a toll-free phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out all numbers that aren't toll-free.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of IncomingPhoneNumber resource representations, each representing a phone number given to your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Purchases a new phone number for your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number. To find an available phone number to POST, use the subresources of the AvailablePhoneNumbers list resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Without an extension, the media is returned using the mime-type provided when the media was generated.
         * @param {string} AccountSid
         * @param {string} MessageSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} MediaSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(
            AccountSid: string,
            MessageSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            MediaSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'MessageSid' is not null or undefined
            if (MessageSid === null || MessageSid === undefined) {
                throw new RequiredError(
                    'MessageSid',
                    'Required parameter MessageSid was null or undefined when calling accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'MediaSid' is not null or undefined
            if (MediaSid === null || MediaSid === undefined) {
                throw new RequiredError(
                    'MediaSid',
                    'Required parameter MediaSid was null or undefined when calling accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{MediaSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'MessageSid'}}`,
                    encodeURIComponent(String(MessageSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'MediaSid'}}`,
                    encodeURIComponent(String(MediaSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of media associated with your message.
         * @param {string} AccountSid
         * @param {string} MessageSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(
            AccountSid: string,
            MessageSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'MessageSid' is not null or undefined
            if (MessageSid === null || MessageSid === undefined) {
                throw new RequiredError(
                    'MessageSid',
                    'Required parameter MessageSid was null or undefined when calling accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Messages/{MessageSid}/Media{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'MessageSid'}}`,
                    encodeURIComponent(String(MessageSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a single message specified by the provided {MessageSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} MessageSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            MessageSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidMessagesMessageSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidMessagesMessageSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'MessageSid' is not null or undefined
            if (MessageSid === null || MessageSid === undefined) {
                throw new RequiredError(
                    'MessageSid',
                    'Required parameter MessageSid was null or undefined when calling accountsAccountSidMessagesMessageSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Messages/{MessageSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'MessageSid'}}`,
                    encodeURIComponent(String(MessageSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of messages associated with your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidMessagesmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidMessagesmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Messages{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * To send a new outgoing message, make an HTTP POST to your Messages list resource URI
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} To The destination phone number. Format with a &#39;+&#39; and country code e.g., +16175551212 (E.164 format).
         * @param {string} [From] A Twilio phone number (in E.164 format) or alphanumeric sender ID enabled for the type of message you wish to send. Phone numbers or short codes purchased from Twilio work here. You cannot (for example) spoof messages from your own cell phone number.
         * @param {string} [MessagingServiceSid] The 34 character unique id of the Messaging Service you want to associate with this Message. Set this parameter to use the Messaging Service Settings and Copilot Features you have configured. When only this parameter is set, Twilio will use your enabled Copilot Features to select the From phone number for delivery.
         * @param {string} [Body] The text of the message you want to send, limited to 1600 characters.
         * @param {string} [MediaUrl] The URL of the media you wish to send out with the message. gif , png and jpeg content is currently supported and will be formatted correctly on the recipient&#39;s device. Other types are also accepted by the API. The media size limit is 5MB. If you wish to send more than one image in the message body, please provide multiple MediaUrls values in the POST request. You may include up to 10 MediaUrls per message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            To: string,
            From?: string,
            MessagingServiceSid?: string,
            Body?: string,
            MediaUrl?: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidMessagesmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidMessagesmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'To' is not null or undefined
            if (To === null || To === undefined) {
                throw new RequiredError(
                    'To',
                    'Required parameter To was null or undefined when calling accountsAccountSidMessagesmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Messages{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any
            const localVarFormParams = new url.URLSearchParams()

            if (To !== undefined) {
                localVarFormParams.set('To', To as any)
            }

            if (From !== undefined) {
                localVarFormParams.set('From', From as any)
            }

            if (MessagingServiceSid !== undefined) {
                localVarFormParams.set(
                    'MessagingServiceSid',
                    MessagingServiceSid as any
                )
            }

            if (Body !== undefined) {
                localVarFormParams.set('Body', Body as any)
            }

            if (MediaUrl !== undefined) {
                localVarFormParams.set('MediaUrl', MediaUrl as any)
            }

            localVarHeaderParameter['Content-Type'] =
                'application/x-www-form-urlencoded'

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )
            localVarRequestOptions.body = localVarFormParams.toString()

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Deletes the notification identified by {NotificationSid} from an account's log.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} NotificationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            NotificationSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'NotificationSid' is not null or undefined
            if (NotificationSid === null || NotificationSid === undefined) {
                throw new RequiredError(
                    'NotificationSid',
                    'Required parameter NotificationSid was null or undefined when calling accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Notifications/{NotificationSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'NotificationSid'}}`,
                    encodeURIComponent(String(NotificationSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get a notification entry.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} NotificationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            NotificationSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'NotificationSid' is not null or undefined
            if (NotificationSid === null || NotificationSid === undefined) {
                throw new RequiredError(
                    'NotificationSid',
                    'Required parameter NotificationSid was null or undefined when calling accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Notifications/{NotificationSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'NotificationSid'}}`,
                    encodeURIComponent(String(NotificationSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of notifications generated for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidNotificationsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidNotificationsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Notifications{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Deletes the caller ID from the account. Returns an HTTP 204 response if successful, with no body.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            OutgoingCallerIdSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'OutgoingCallerIdSid' is not null or undefined
            if (
                OutgoingCallerIdSid === null ||
                OutgoingCallerIdSid === undefined
            ) {
                throw new RequiredError(
                    'OutgoingCallerIdSid',
                    'Required parameter OutgoingCallerIdSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/OutgoingCallerIds/{OutgoingCallerIdSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'OutgoingCallerIdSid'}}`,
                    encodeURIComponent(String(OutgoingCallerIdSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get the set of an account's verified phone numbers.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            OutgoingCallerIdSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'OutgoingCallerIdSid' is not null or undefined
            if (
                OutgoingCallerIdSid === null ||
                OutgoingCallerIdSid === undefined
            ) {
                throw new RequiredError(
                    'OutgoingCallerIdSid',
                    'Required parameter OutgoingCallerIdSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/OutgoingCallerIds/{OutgoingCallerIdSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'OutgoingCallerIdSid'}}`,
                    encodeURIComponent(String(OutgoingCallerIdSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Updates the caller id, and returns the updated resource if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            OutgoingCallerIdSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'OutgoingCallerIdSid' is not null or undefined
            if (
                OutgoingCallerIdSid === null ||
                OutgoingCallerIdSid === undefined
            ) {
                throw new RequiredError(
                    'OutgoingCallerIdSid',
                    'Required parameter OutgoingCallerIdSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/OutgoingCallerIds/{OutgoingCallerIdSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'OutgoingCallerIdSid'}}`,
                    encodeURIComponent(String(OutgoingCallerIdSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Updates the caller id, and returns the updated resource if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            OutgoingCallerIdSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut.'
                )
            }
            // verify required parameter 'OutgoingCallerIdSid' is not null or undefined
            if (
                OutgoingCallerIdSid === null ||
                OutgoingCallerIdSid === undefined
            ) {
                throw new RequiredError(
                    'OutgoingCallerIdSid',
                    'Required parameter OutgoingCallerIdSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/OutgoingCallerIds/{OutgoingCallerIdSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'OutgoingCallerIdSid'}}`,
                    encodeURIComponent(String(OutgoingCallerIdSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'PUT' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of OutgoingCallerId resource representations, each representing a Caller ID number valid for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/OutgoingCallerIds{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Adds a new CallerID to your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/OutgoingCallerIds{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get a specific member.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError(
                    'QueueSid',
                    'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError(
                    'CallSid',
                    'Required parameter CallSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'QueueSid'}}`,
                    encodeURIComponent(String(QueueSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)))
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When redirecting a member of a queue addressed by CallSid, only the first request will succeed and return a 200 response code. A second request will fail and return an appropriate 400 response code.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError(
                    'QueueSid',
                    'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError(
                    'CallSid',
                    'Required parameter CallSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'QueueSid'}}`,
                    encodeURIComponent(String(QueueSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)))
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get a front member.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError(
                    'QueueSid',
                    'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}/Members/Front{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'QueueSid'}}`,
                    encodeURIComponent(String(QueueSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When dequeuing the 'Front' of the queue, the next call in the queue will be redirected.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError(
                    'QueueSid',
                    'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}/Members/Front{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'QueueSid'}}`,
                    encodeURIComponent(String(QueueSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns the list of members in the queue identified by {QueueSid}.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError(
                    'QueueSid',
                    'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}/Members{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'QueueSid'}}`,
                    encodeURIComponent(String(QueueSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * The DELETE method allows you to remove a Queue. Only empty queues are deletable.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            QueueSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError(
                    'QueueSid',
                    'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'QueueSid'}}`,
                    encodeURIComponent(String(QueueSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get resource's individual Queue instance.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            QueueSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError(
                    'QueueSid',
                    'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'QueueSid'}}`,
                    encodeURIComponent(String(QueueSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * This POST request allows you to change the FriendlyName or MaxSize.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            QueueSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError(
                    'QueueSid',
                    'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'QueueSid'}}`,
                    encodeURIComponent(String(QueueSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of queues within an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Create a new Queue resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a set of Transcription resource representations that includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            RecordingSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'RecordingSid' is not null or undefined
            if (RecordingSid === null || RecordingSid === undefined) {
                throw new RequiredError(
                    'RecordingSid',
                    'Required parameter RecordingSid was null or undefined when calling accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'RecordingSid'}}`,
                    encodeURIComponent(String(RecordingSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Deletes a recording  from your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.wav' | '.mp3',
            RecordingSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'RecordingSid' is not null or undefined
            if (RecordingSid === null || RecordingSid === undefined) {
                throw new RequiredError(
                    'RecordingSid',
                    'Required parameter RecordingSid was null or undefined when calling accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Recordings/{RecordingSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'RecordingSid'}}`,
                    encodeURIComponent(String(RecordingSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns one of several representations: Without an extension, or with a \".wav\", a binary WAV audio file is returned with mime-type \"audio/x-wav\". Appending \".mp3\" to the URI returns a binary MP3 audio file with mime-type type \"audio/mpeg\". Appending \".xml\" to the URI returns a XML representation.
         * @param {string} AccountSid
         * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.wav' | '.mp3',
            RecordingSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'RecordingSid' is not null or undefined
            if (RecordingSid === null || RecordingSid === undefined) {
                throw new RequiredError(
                    'RecordingSid',
                    'Required parameter RecordingSid was null or undefined when calling accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Recordings/{RecordingSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'RecordingSid'}}`,
                    encodeURIComponent(String(RecordingSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidRecordingsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidRecordingsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Recordings{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Remove a Credential from a CredentialList.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CredentialSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError(
                    'CLSid',
                    'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'CredentialSid' is not null or undefined
            if (CredentialSid === null || CredentialSid === undefined) {
                throw new RequiredError(
                    'CredentialSid',
                    'Required parameter CredentialSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}/Credentials/{CredentialSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'CredentialSid'}}`,
                    encodeURIComponent(String(CredentialSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get a specific Credential in a list. Though a password is stored for each username in your list, the password is not returned to protect your password. If you cannot remember your password, you will need to POST to this resource to update it.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CredentialSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError(
                    'CLSid',
                    'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'CredentialSid' is not null or undefined
            if (CredentialSid === null || CredentialSid === undefined) {
                throw new RequiredError(
                    'CredentialSid',
                    'Required parameter CredentialSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}/Credentials/{CredentialSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'CredentialSid'}}`,
                    encodeURIComponent(String(CredentialSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Change the password of a Credential record.  If the change is successful, Twilio will respond with the Credential record but will not include the password in the response.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CredentialSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError(
                    'CLSid',
                    'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'CredentialSid' is not null or undefined
            if (CredentialSid === null || CredentialSid === undefined) {
                throw new RequiredError(
                    'CredentialSid',
                    'Required parameter CredentialSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}/Credentials/{CredentialSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'CredentialSid'}}`,
                    encodeURIComponent(String(CredentialSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get the list of Credentials in a CredentialList. The passwords for the Credentials are intentionally not returned so as to protect them.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError(
                    'CLSid',
                    'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}/Credentials{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Add a Credential to the CredentialList.  When creating a Credential, you will POST both a username and password, but only receive the username back in the response. The password is intentionally not returned so as to protect it.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError(
                    'CLSid',
                    'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}/Credentials{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Delete a CredentialList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CLSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError(
                    'CLSid',
                    'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get a credential list instance resource
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CLSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError(
                    'CLSid',
                    'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Change the FriendlyName of the list
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CLSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError(
                    'CLSid',
                    'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Gets a list of Credential Lists for an account
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Create a new Credential List.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Remove a CredentialListMapping from a domain
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CLSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError(
                    'SipDomainSid',
                    'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError(
                    'CLSid',
                    'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/CredentialListMappings/{CLSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'SipDomainSid'}}`,
                    encodeURIComponent(String(SipDomainSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get the user lists mapped to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError(
                    'SipDomainSid',
                    'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/CredentialListMappings{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'SipDomainSid'}}`,
                    encodeURIComponent(String(SipDomainSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Map a CredentialList to the domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError(
                    'SipDomainSid',
                    'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/CredentialListMappings{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'SipDomainSid'}}`,
                    encodeURIComponent(String(SipDomainSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Remove a mapping from this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ALSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ALSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError(
                    'SipDomainSid',
                    'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'ALSid' is not null or undefined
            if (ALSid === null || ALSid === undefined) {
                throw new RequiredError(
                    'ALSid',
                    'Required parameter ALSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/IpAccessControlListMappings/{ALSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'SipDomainSid'}}`,
                    encodeURIComponent(String(SipDomainSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(`{${'ALSid'}}`, encodeURIComponent(String(ALSid)))
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Return a specific IpAccessControlListMapping instance by Sid.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ALSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ALSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError(
                    'SipDomainSid',
                    'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'ALSid' is not null or undefined
            if (ALSid === null || ALSid === undefined) {
                throw new RequiredError(
                    'ALSid',
                    'Required parameter ALSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/IpAccessControlListMappings/{ALSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'SipDomainSid'}}`,
                    encodeURIComponent(String(SipDomainSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(`{${'ALSid'}}`, encodeURIComponent(String(ALSid)))
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Return the IpAccessControlListMappings that are associated to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError(
                    'SipDomainSid',
                    'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/IpAccessControlListMappings{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'SipDomainSid'}}`,
                    encodeURIComponent(String(SipDomainSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Map an IpAccessControlList to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError(
                    'SipDomainSid',
                    'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/IpAccessControlListMappings{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'SipDomainSid'}}`,
                    encodeURIComponent(String(SipDomainSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Delete a domain. If you have created subdomains of a domain, you will not be able to delete the domain until you first delete all subdomains of it.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            SipDomainSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError(
                    'SipDomainSid',
                    'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'SipDomainSid'}}`,
                    encodeURIComponent(String(SipDomainSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Return a specific instance by Sid.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            SipDomainSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError(
                    'SipDomainSid',
                    'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'SipDomainSid'}}`,
                    encodeURIComponent(String(SipDomainSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Update the attributes of a domain.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            SipDomainSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError(
                    'SipDomainSid',
                    'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'SipDomainSid'}}`,
                    encodeURIComponent(String(SipDomainSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a paged list of the domains for an account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Creates a new Domain and returns its instance resource. You must pick a unique domain name that ends in \".sip.twilio.com\". After creating a Domain, you must map it to an authentication method before the domain is ready to receive traffic.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Deletes an IP address entry from the list.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAddressSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (
                IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined
            ) {
                throw new RequiredError(
                    'IpAccessControlListSid',
                    'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'IpAddressSid' is not null or undefined
            if (IpAddressSid === null || IpAddressSid === undefined) {
                throw new RequiredError(
                    'IpAddressSid',
                    'Required parameter IpAddressSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{IpAddressSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'IpAccessControlListSid'}}`,
                    encodeURIComponent(String(IpAccessControlListSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'IpAddressSid'}}`,
                    encodeURIComponent(String(IpAddressSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Return a single IP Address resource.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAddressSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (
                IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined
            ) {
                throw new RequiredError(
                    'IpAccessControlListSid',
                    'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'IpAddressSid' is not null or undefined
            if (IpAddressSid === null || IpAddressSid === undefined) {
                throw new RequiredError(
                    'IpAddressSid',
                    'Required parameter IpAddressSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{IpAddressSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'IpAccessControlListSid'}}`,
                    encodeURIComponent(String(IpAccessControlListSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'IpAddressSid'}}`,
                    encodeURIComponent(String(IpAddressSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Change the description or IP address of a given IpAddress instance resource
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAddressSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (
                IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined
            ) {
                throw new RequiredError(
                    'IpAccessControlListSid',
                    'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'IpAddressSid' is not null or undefined
            if (IpAddressSid === null || IpAddressSid === undefined) {
                throw new RequiredError(
                    'IpAddressSid',
                    'Required parameter IpAddressSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{IpAddressSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'IpAccessControlListSid'}}`,
                    encodeURIComponent(String(IpAccessControlListSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'IpAddressSid'}}`,
                    encodeURIComponent(String(IpAddressSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * List the IP Addresses contained in this list.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (
                IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined
            ) {
                throw new RequiredError(
                    'IpAccessControlListSid',
                    'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'IpAccessControlListSid'}}`,
                    encodeURIComponent(String(IpAccessControlListSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Add an IP Address to the list with a description.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (
                IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined
            ) {
                throw new RequiredError(
                    'IpAccessControlListSid',
                    'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'IpAccessControlListSid'}}`,
                    encodeURIComponent(String(IpAccessControlListSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Delete an IpAccessControlList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAccessControlListSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (
                IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined
            ) {
                throw new RequiredError(
                    'IpAccessControlListSid',
                    'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'IpAccessControlListSid'}}`,
                    encodeURIComponent(String(IpAccessControlListSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Return a specific IpAccessControlList resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAccessControlListSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (
                IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined
            ) {
                throw new RequiredError(
                    'IpAccessControlListSid',
                    'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'IpAccessControlListSid'}}`,
                    encodeURIComponent(String(IpAccessControlListSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Rename an IpAccessControlList.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAccessControlListSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (
                IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined
            ) {
                throw new RequiredError(
                    'IpAccessControlListSid',
                    'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'IpAccessControlListSid'}}`,
                    encodeURIComponent(String(IpAccessControlListSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Return a paged list of all IpAccessControlLists under this account.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Create a new IpAccessControlList resource.  When created, the list will contain no IP addresses. You will need to add IP addresses to the list for it to be active. To add IP addresses, you will need to POST to the IpAddresses List subresource.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Get a single message.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ShortCodeSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ShortCodeSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'ShortCodeSid' is not null or undefined
            if (ShortCodeSid === null || ShortCodeSid === undefined) {
                throw new RequiredError(
                    'ShortCodeSid',
                    'Required parameter ShortCodeSid was null or undefined when calling accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SMS/ShortCodes/{ShortCodeSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'ShortCodeSid'}}`,
                    encodeURIComponent(String(ShortCodeSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Tries to update the shortcode's properties, and returns the updated resource representation if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ShortCodeSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ShortCodeSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'ShortCodeSid' is not null or undefined
            if (ShortCodeSid === null || ShortCodeSid === undefined) {
                throw new RequiredError(
                    'ShortCodeSid',
                    'Required parameter ShortCodeSid was null or undefined when calling accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SMS/ShortCodes/{ShortCodeSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'ShortCodeSid'}}`,
                    encodeURIComponent(String(ShortCodeSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of ShortCode resource representations, each representing a short code within your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidSMSShortCodesmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSMSShortCodesmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/SMS/ShortCodes{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Deletes a transcription from your account.
         * @param {string} AccountSid
         * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} TranscriptionSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.json' | '.csv' | '.html' | '.txt' | '.xml',
            TranscriptionSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'TranscriptionSid' is not null or undefined
            if (TranscriptionSid === null || TranscriptionSid === undefined) {
                throw new RequiredError(
                    'TranscriptionSid',
                    'Required parameter TranscriptionSid was null or undefined when calling accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Transcriptions/{TranscriptionSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'TranscriptionSid'}}`,
                    encodeURIComponent(String(TranscriptionSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a single Transcription resource representation identified by the given {TranscriptionSid}. By default Twilio will respond with the XML metadata for the Transcription. If you append \".txt\" to the end of the Transcription resource's URI Twilio will just return you the transcription tex.
         * @param {string} AccountSid
         * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} TranscriptionSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.json' | '.csv' | '.html' | '.txt' | '.xml',
            TranscriptionSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'TranscriptionSid' is not null or undefined
            if (TranscriptionSid === null || TranscriptionSid === undefined) {
                throw new RequiredError(
                    'TranscriptionSid',
                    'Required parameter TranscriptionSid was null or undefined when calling accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Transcriptions/{TranscriptionSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'TranscriptionSid'}}`,
                    encodeURIComponent(String(TranscriptionSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a set of Transcription resource representations that includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidTranscriptionsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidTranscriptionsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Transcriptions{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns UsageRecords for all usage categories for a specified period.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {'Daily' | 'Monthly' | 'Yearly' | 'AllTime' | 'Today' | 'Yesterday' | 'ThisMonth' | 'LastMonth'} Subresource |Subresource|Description| |---|---| |Daily|Return multiple UsageRecords for each usage category, each representing usage over a daily time-interval.| |Monthly|Return multiple UsageRecords for each usage category, each representing usage over a monthly time-interval.| |Yearly|Return multple UsageRecords for each usage category, each representing usage over a yearly time-interval.| |AllTime|  Return a single UsageRecord for each usage category, each representing usage over the date-range specified. This is the same as the root /Usage/Records.| |Today|Return a single UsageRecord per usage category, for today&#39;s usage only.| ||Yesterday|Return a single UsageRecord per usage category, for yesterday&#39;s usage only.| |ThisMonth|Return a single UsageRecord per usage category, for this month&#39;s usage only.| |LastMonth|Return a single UsageRecord per usage category, for last month&#39;s usage only.|
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            Subresource:
                | 'Daily'
                | 'Monthly'
                | 'Yearly'
                | 'AllTime'
                | 'Today'
                | 'Yesterday'
                | 'ThisMonth'
                | 'LastMonth',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'Subresource' is not null or undefined
            if (Subresource === null || Subresource === undefined) {
                throw new RequiredError(
                    'Subresource',
                    'Required parameter Subresource was null or undefined when calling accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Records/{Subresource}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'Subresource'}}`,
                    encodeURIComponent(String(Subresource))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns UsageRecords for all usage categories. The list includes paging information. By default, the UsageRecords resource will return one UsageRecord for each Category, representing all usage accrued all-time for the account. You can filter the usage Category or change the date-range over which usage is counted using optional GET query parameters.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageRecordsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageRecordsmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageRecordsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Records{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Delete this UsageTrigger.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            UsageTriggerSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete.'
                )
            }
            // verify required parameter 'UsageTriggerSid' is not null or undefined
            if (UsageTriggerSid === null || UsageTriggerSid === undefined) {
                throw new RequiredError(
                    'UsageTriggerSid',
                    'Required parameter UsageTriggerSid was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Triggers/{UsageTriggerSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'UsageTriggerSid'}}`,
                    encodeURIComponent(String(UsageTriggerSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'DELETE' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a repesentation of the UsageTrigger.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            UsageTriggerSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'UsageTriggerSid' is not null or undefined
            if (UsageTriggerSid === null || UsageTriggerSid === undefined) {
                throw new RequiredError(
                    'UsageTriggerSid',
                    'Required parameter UsageTriggerSid was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Triggers/{UsageTriggerSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'UsageTriggerSid'}}`,
                    encodeURIComponent(String(UsageTriggerSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Tries to update the UsageTrigger's properties, and returns the updated resource representation if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            UsageTriggerSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'UsageTriggerSid' is not null or undefined
            if (UsageTriggerSid === null || UsageTriggerSid === undefined) {
                throw new RequiredError(
                    'UsageTriggerSid',
                    'Required parameter UsageTriggerSid was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Triggers/{UsageTriggerSid}{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'UsageTriggerSid'}}`,
                    encodeURIComponent(String(UsageTriggerSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a list of UsageTrigger resource representations. The list includes paging information. By default, all UsageTriggers are returned. You can filter the list by specifying one or more query parameters. Note that the query parameters are case-sensitive
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageTriggersmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageTriggersmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Triggers{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Creates a new UsageTrigger. Each account can create up to 1,000 UsageTriggers. Currently, UsageTriggers that are no longer active are not deleted automatically. Use DELETE to delete triggers you no longer need.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageTriggersmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageTriggersmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Triggers{mediaTypeExtension}`
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Returns a representation of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionGet(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            AccountSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidmediaTypeExtensionGet.'
                )
            }
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}{mediaTypeExtension}`
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Allows you to modify the properties of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionPost(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            AccountSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidmediaTypeExtensionPost.'
                )
            }
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}{mediaTypeExtension}`
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Allows you to modify the properties of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionPut(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            AccountSid: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidmediaTypeExtensionPut.'
                )
            }
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError(
                    'AccountSid',
                    'Required parameter AccountSid was null or undefined when calling accountsAccountSidmediaTypeExtensionPut.'
                )
            }
            const localVarPath = `/Accounts/{AccountSid}{mediaTypeExtension}`
                .replace(
                    `{${'mediaTypeExtension'}}`,
                    encodeURIComponent(String(mediaTypeExtension))
                )
                .replace(
                    `{${'AccountSid'}}`,
                    encodeURIComponent(String(AccountSid))
                )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'PUT' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Retrieve a list of the Account resources belonging to the account used to make the API request. This list will include that Account as well.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsmediaTypeExtensionGet(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsmediaTypeExtensionGet.'
                )
            }
            const localVarPath = `/Accounts{mediaTypeExtension}`.replace(
                `{${'mediaTypeExtension'}}`,
                encodeURIComponent(String(mediaTypeExtension))
            )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'GET' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Create a new Account instance resource as a subaccount of the one used to make the request. See Creating Subaccounts for more information.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsmediaTypeExtensionPost(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (
                mediaTypeExtension === null ||
                mediaTypeExtension === undefined
            ) {
                throw new RequiredError(
                    'mediaTypeExtension',
                    'Required parameter mediaTypeExtension was null or undefined when calling accountsmediaTypeExtensionPost.'
                )
            }
            const localVarPath = `/Accounts{mediaTypeExtension}`.replace(
                `{${'mediaTypeExtension'}}`,
                encodeURIComponent(String(mediaTypeExtension))
            )
            const localVarUrlObj = url.parse(localVarPath, true)
            const localVarRequestOptions = Object.assign(
                { method: 'POST' },
                options
            )
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            )
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            )

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete this application.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ApplicationSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                ApplicationSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get application instance resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ApplicationSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Application> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                ApplicationSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Tries to update the application's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ApplicationSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Application> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                ApplicationSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of Application resource representations, each representing an application within your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Applications> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidApplicationsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Creates a new application within your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidApplicationsmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get the properties of the authorized application.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ConnectAppSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<AuthApp> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                ConnectAppSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of Connect App resource representations, each representing a Connect App you've authorized to access your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<AuthApps> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of local AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number tha is currently available for provisioning within your account.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(
            AccountSid: string,
            IsoCountryCode: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (
            fetch?: FetchAPI,
            basePath?: string
        ) => Promise<AvailablePhoneNumbers> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(
                AccountSid,
                IsoCountryCode,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of mobile AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number that is currently available for provisioning within your account.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(
            AccountSid: string,
            IsoCountryCode: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (
            fetch?: FetchAPI,
            basePath?: string
        ) => Promise<PhoneMobileNumbers> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(
                AccountSid,
                IsoCountryCode,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of toll-free AvailablePhoneNumber elements that match the specified filters, each representing a phone number that is currently available for provisioning within your account. To provision an available phone number, POST the number to the IncomingPhoneNumbers resource.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(
            AccountSid: string,
            IsoCountryCode: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (
            fetch?: FetchAPI,
            basePath?: string
        ) => Promise<PhoneTollFreeNumbers> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(
                AccountSid,
                IsoCountryCode,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of all AvailablePhoneNumber subresources for your account by ISO Country. For full information about our phone number support, see our Phone Number CSV (http://www.twilio.com/resources/rates/international-phone-number-rates.csv).
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (
            fetch?: FetchAPI,
            basePath?: string
        ) => Promise<AvailablePhoneNumbers> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of notifications generated for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {string} CallSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(
            AccountSid: string,
            CallSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Notifications> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(
                AccountSid,
                CallSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
         * @param {string} AccountSid
         * @param {string} CallSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(
            AccountSid: string,
            CallSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Recordings> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(
                AccountSid,
                CallSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns the single Call resource identified by {CallSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<CallInstance> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidCallsCallSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                CallSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Modify a phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<CallInstance> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidCallsCallSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                CallSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of phone calls made to and from the account identified by {AccountSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Calls> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidCallsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * To make a call, make an HTTP POST request. Initiate a new phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidCallsmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Kick this participant from the conference.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(
            AccountSid: string,
            ConferenceSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(
                AccountSid,
                ConferenceSid,
                mediaTypeExtension,
                CallSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a representation of this participant.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(
            AccountSid: string,
            ConferenceSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Participant> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(
                AccountSid,
                ConferenceSid,
                mediaTypeExtension,
                CallSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Updates the status of a participant.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(
            AccountSid: string,
            ConferenceSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Participant> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(
                AccountSid,
                ConferenceSid,
                mediaTypeExtension,
                CallSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns the list of participants in the conference identified by {ConferenceSid}.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(
            AccountSid: string,
            ConferenceSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Participants> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(
                AccountSid,
                ConferenceSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a representation of the conference identified by {ConferenceSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConferenceSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ConferenceSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Conference> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                ConferenceSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of conferences within an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Conferences> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidConferencesmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get the properties of a Connect App.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ConnectAppSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<ConnectApp> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                ConnectAppSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Tries to update the Connect App's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ConnectAppSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<ConnectApp> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                ConnectAppSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of Connect App resource representations, each representing a Connect App in your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<ConnectApps> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidConnectAppsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Release this phone number from your account. Twilio will no longer answer calls to this number, and you will stop being billed the monthly phone number fee. The phone number will eventually be recycled and potentially given to another customer, so use with care. If you make a mistake, contac us. We may be able to give you the number back.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IncomingPhoneNumberSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                IncomingPhoneNumberSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get info about incoming call's phone number.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IncomingPhoneNumberSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<IncomingCall> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                IncomingPhoneNumberSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IncomingPhoneNumberSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<IncomingCall> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                IncomingPhoneNumberSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IncomingPhoneNumberSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<IncomingCall> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(
                AccountSid,
                mediaTypeExtension,
                IncomingPhoneNumberSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a local (not toll-free) phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out toll-free numbers.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a mobile phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out local and toll free numbers.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a toll-free phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out all numbers that aren't toll-free.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of IncomingPhoneNumber resource representations, each representing a phone number given to your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<IncomingCalls> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Purchases a new phone number for your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number. To find an available phone number to POST, use the subresources of the AvailablePhoneNumbers list resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Without an extension, the media is returned using the mime-type provided when the media was generated.
         * @param {string} AccountSid
         * @param {string} MessageSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} MediaSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(
            AccountSid: string,
            MessageSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            MediaSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Media> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(
                AccountSid,
                MessageSid,
                mediaTypeExtension,
                MediaSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of media associated with your message.
         * @param {string} AccountSid
         * @param {string} MessageSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(
            AccountSid: string,
            MessageSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<MediaList> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(
                AccountSid,
                MessageSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a single message specified by the provided {MessageSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} MessageSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            MessageSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Message> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                MessageSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of messages associated with your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Messages> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidMessagesmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * To send a new outgoing message, make an HTTP POST to your Messages list resource URI
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} To The destination phone number. Format with a &#39;+&#39; and country code e.g., +16175551212 (E.164 format).
         * @param {string} [From] A Twilio phone number (in E.164 format) or alphanumeric sender ID enabled for the type of message you wish to send. Phone numbers or short codes purchased from Twilio work here. You cannot (for example) spoof messages from your own cell phone number.
         * @param {string} [MessagingServiceSid] The 34 character unique id of the Messaging Service you want to associate with this Message. Set this parameter to use the Messaging Service Settings and Copilot Features you have configured. When only this parameter is set, Twilio will use your enabled Copilot Features to select the From phone number for delivery.
         * @param {string} [Body] The text of the message you want to send, limited to 1600 characters.
         * @param {string} [MediaUrl] The URL of the media you wish to send out with the message. gif , png and jpeg content is currently supported and will be formatted correctly on the recipient&#39;s device. Other types are also accepted by the API. The media size limit is 5MB. If you wish to send more than one image in the message body, please provide multiple MediaUrls values in the POST request. You may include up to 10 MediaUrls per message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            To: string,
            From?: string,
            MessagingServiceSid?: string,
            Body?: string,
            MediaUrl?: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidMessagesmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                To,
                From,
                MessagingServiceSid,
                Body,
                MediaUrl,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Deletes the notification identified by {NotificationSid} from an account's log.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} NotificationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            NotificationSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                NotificationSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get a notification entry.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} NotificationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            NotificationSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Notification> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                NotificationSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of notifications generated for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Notifications> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidNotificationsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Deletes the caller ID from the account. Returns an HTTP 204 response if successful, with no body.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            OutgoingCallerIdSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                OutgoingCallerIdSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get the set of an account's verified phone numbers.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            OutgoingCallerIdSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<OutgoingCallerId> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                OutgoingCallerIdSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Updates the caller id, and returns the updated resource if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            OutgoingCallerIdSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<OutgoingCallerId> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                OutgoingCallerIdSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Updates the caller id, and returns the updated resource if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            OutgoingCallerIdSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(
                AccountSid,
                mediaTypeExtension,
                OutgoingCallerIdSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of OutgoingCallerId resource representations, each representing a Caller ID number valid for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<OutCallerIds> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Adds a new CallerID to your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get a specific member.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Member> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(
                AccountSid,
                QueueSid,
                mediaTypeExtension,
                CallSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When redirecting a member of a queue addressed by CallSid, only the first request will succeed and return a 200 response code. A second request will fail and return an appropriate 400 response code.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Member> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(
                AccountSid,
                QueueSid,
                mediaTypeExtension,
                CallSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get a front member.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Member> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(
                AccountSid,
                QueueSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When dequeuing the 'Front' of the queue, the next call in the queue will be redirected.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Member> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(
                AccountSid,
                QueueSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns the list of members in the queue identified by {QueueSid}.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Members> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(
                AccountSid,
                QueueSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * The DELETE method allows you to remove a Queue. Only empty queues are deletable.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            QueueSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                QueueSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get resource's individual Queue instance.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            QueueSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Queue> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                QueueSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * This POST request allows you to change the FriendlyName or MaxSize.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            QueueSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Queue> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                QueueSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of queues within an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Queues> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidQueuesmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Create a new Queue resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidQueuesmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a set of Transcription resource representations that includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            RecordingSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Transcriptions> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                RecordingSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Deletes a recording  from your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.wav' | '.mp3',
            RecordingSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                RecordingSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns one of several representations: Without an extension, or with a \".wav\", a binary WAV audio file is returned with mime-type \"audio/x-wav\". Appending \".mp3\" to the URI returns a binary MP3 audio file with mime-type type \"audio/mpeg\". Appending \".xml\" to the URI returns a XML representation.
         * @param {string} AccountSid
         * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.wav' | '.mp3',
            RecordingSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                RecordingSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Recordings> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidRecordingsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Remove a Credential from a CredentialList.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CredentialSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(
                AccountSid,
                CLSid,
                mediaTypeExtension,
                CredentialSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get a specific Credential in a list. Though a password is stored for each username in your list, the password is not returned to protect your password. If you cannot remember your password, you will need to POST to this resource to update it.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CredentialSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Credential> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(
                AccountSid,
                CLSid,
                mediaTypeExtension,
                CredentialSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Change the password of a Credential record.  If the change is successful, Twilio will respond with the Credential record but will not include the password in the response.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CredentialSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Credential> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(
                AccountSid,
                CLSid,
                mediaTypeExtension,
                CredentialSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get the list of Credentials in a CredentialList. The passwords for the Credentials are intentionally not returned so as to protect them.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Credentials> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(
                AccountSid,
                CLSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Add a Credential to the CredentialList.  When creating a Credential, you will POST both a username and password, but only receive the username back in the response. The password is intentionally not returned so as to protect it.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(
                AccountSid,
                CLSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Delete a CredentialList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CLSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                CLSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get a credential list instance resource
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CLSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<CredentialList> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                CLSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Change the FriendlyName of the list
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CLSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<CredentialList> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                CLSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Gets a list of Credential Lists for an account
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<CredentialLists> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Create a new Credential List.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Remove a CredentialListMapping from a domain
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CLSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                CLSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get the user lists mapped to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (
            fetch?: FetchAPI,
            basePath?: string
        ) => Promise<CredentialListMappings> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Map a CredentialList to the domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Remove a mapping from this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ALSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ALSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                ALSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Return a specific IpAccessControlListMapping instance by Sid.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ALSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ALSid: string,
            options?: any
        ): (
            fetch?: FetchAPI,
            basePath?: string
        ) => Promise<IpAccessControlListMapping> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                ALSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Return the IpAccessControlListMappings that are associated to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Map an IpAccessControlList to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Delete a domain. If you have created subdomains of a domain, you will not be able to delete the domain until you first delete all subdomains of it.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            SipDomainSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                SipDomainSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Return a specific instance by Sid.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            SipDomainSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Domain> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                SipDomainSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Update the attributes of a domain.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            SipDomainSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Domain> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                SipDomainSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a paged list of the domains for an account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Domains> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPDomainsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Creates a new Domain and returns its instance resource. You must pick a unique domain name that ends in \".sip.twilio.com\". After creating a Domain, you must map it to an authentication method before the domain is ready to receive traffic.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPDomainsmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Deletes an IP address entry from the list.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAddressSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(
                AccountSid,
                IpAccessControlListSid,
                mediaTypeExtension,
                IpAddressSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Return a single IP Address resource.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAddressSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<IpAddress> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(
                AccountSid,
                IpAccessControlListSid,
                mediaTypeExtension,
                IpAddressSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Change the description or IP address of a given IpAddress instance resource
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAddressSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<IpAddress> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(
                AccountSid,
                IpAccessControlListSid,
                mediaTypeExtension,
                IpAddressSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * List the IP Addresses contained in this list.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<IpAddresses> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(
                AccountSid,
                IpAccessControlListSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Add an IP Address to the list with a description.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(
                AccountSid,
                IpAccessControlListSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Delete an IpAccessControlList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAccessControlListSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                IpAccessControlListSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Return a specific IpAccessControlList resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAccessControlListSid: string,
            options?: any
        ): (
            fetch?: FetchAPI,
            basePath?: string
        ) => Promise<IpAccessControlListMapping> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                IpAccessControlListSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Rename an IpAccessControlList.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAccessControlListSid: string,
            options?: any
        ): (
            fetch?: FetchAPI,
            basePath?: string
        ) => Promise<IpAccessControlListMapping> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                IpAccessControlListSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Return a paged list of all IpAccessControlLists under this account.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Create a new IpAccessControlList resource.  When created, the list will contain no IP addresses. You will need to add IP addresses to the list for it to be active. To add IP addresses, you will need to POST to the IpAddresses List subresource.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ): (
            fetch?: FetchAPI,
            basePath?: string
        ) => Promise<IpAccessControlListMapping> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Get a single message.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ShortCodeSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ShortCodeSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<ShortCode> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                ShortCodeSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Tries to update the shortcode's properties, and returns the updated resource representation if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ShortCodeSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ShortCodeSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<ShortCode> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                ShortCodeSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of ShortCode resource representations, each representing a short code within your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<ShortCodes> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidSMSShortCodesmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Deletes a transcription from your account.
         * @param {string} AccountSid
         * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} TranscriptionSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.json' | '.csv' | '.html' | '.txt' | '.xml',
            TranscriptionSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                TranscriptionSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a single Transcription resource representation identified by the given {TranscriptionSid}. By default Twilio will respond with the XML metadata for the Transcription. If you append \".txt\" to the end of the Transcription resource's URI Twilio will just return you the transcription tex.
         * @param {string} AccountSid
         * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} TranscriptionSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.json' | '.csv' | '.html' | '.txt' | '.xml',
            TranscriptionSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Transcription> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                TranscriptionSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a set of Transcription resource representations that includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Transcriptions> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidTranscriptionsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns UsageRecords for all usage categories for a specified period.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {'Daily' | 'Monthly' | 'Yearly' | 'AllTime' | 'Today' | 'Yesterday' | 'ThisMonth' | 'LastMonth'} Subresource |Subresource|Description| |---|---| |Daily|Return multiple UsageRecords for each usage category, each representing usage over a daily time-interval.| |Monthly|Return multiple UsageRecords for each usage category, each representing usage over a monthly time-interval.| |Yearly|Return multple UsageRecords for each usage category, each representing usage over a yearly time-interval.| |AllTime|  Return a single UsageRecord for each usage category, each representing usage over the date-range specified. This is the same as the root /Usage/Records.| |Today|Return a single UsageRecord per usage category, for today&#39;s usage only.| ||Yesterday|Return a single UsageRecord per usage category, for yesterday&#39;s usage only.| |ThisMonth|Return a single UsageRecord per usage category, for this month&#39;s usage only.| |LastMonth|Return a single UsageRecord per usage category, for last month&#39;s usage only.|
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            Subresource:
                | 'Daily'
                | 'Monthly'
                | 'Yearly'
                | 'AllTime'
                | 'Today'
                | 'Yesterday'
                | 'ThisMonth'
                | 'LastMonth',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<UsageRecords> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                Subresource,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns UsageRecords for all usage categories. The list includes paging information. By default, the UsageRecords resource will return one UsageRecord for each Category, representing all usage accrued all-time for the account. You can filter the usage Category or change the date-range over which usage is counted using optional GET query parameters.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageRecordsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<UsageRecords> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidUsageRecordsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Delete this UsageTrigger.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            UsageTriggerSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                UsageTriggerSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a repesentation of the UsageTrigger.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            UsageTriggerSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<UsageTrigger> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                UsageTriggerSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Tries to update the UsageTrigger's properties, and returns the updated resource representation if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            UsageTriggerSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<UsageTrigger> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                UsageTriggerSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a list of UsageTrigger resource representations. The list includes paging information. By default, all UsageTriggers are returned. You can filter the list by specifying one or more query parameters. Note that the query parameters are case-sensitive
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<UsageTriggers> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidUsageTriggersmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Creates a new UsageTrigger. Each account can create up to 1,000 UsageTriggers. Currently, UsageTriggers that are no longer active are not deleted automatically. Use DELETE to delete triggers you no longer need.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidUsageTriggersmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Returns a representation of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionGet(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            AccountSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Account> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidmediaTypeExtensionGet(
                mediaTypeExtension,
                AccountSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Allows you to modify the properties of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionPost(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            AccountSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Account> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidmediaTypeExtensionPost(
                mediaTypeExtension,
                AccountSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Allows you to modify the properties of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionPut(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            AccountSid: string,
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Account> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsAccountSidmediaTypeExtensionPut(
                mediaTypeExtension,
                AccountSid,
                options
            )
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Retrieve a list of the Account resources belonging to the account used to make the API request. This list will include that Account as well.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsmediaTypeExtensionGet(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Accounts> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsmediaTypeExtensionGet(mediaTypeExtension, options)
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json()
                    } else {
                        throw response
                    }
                })
            }
        },
        /**
         * Create a new Account instance resource as a subaccount of the one used to make the request. See Creating Subaccounts for more information.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsmediaTypeExtensionPost(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).accountsmediaTypeExtensionPost(mediaTypeExtension, options)
            return (
                fetch: FetchAPI = portableFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response
                    } else {
                        throw response
                    }
                })
            }
        },
    }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function(
    configuration?: Configuration,
    fetch?: FetchAPI,
    basePath?: string
) {
    return {
        /**
         * Delete this application.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ApplicationSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                ApplicationSid,
                options
            )(fetch, basePath)
        },
        /**
         * Get application instance resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ApplicationSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                ApplicationSid,
                options
            )(fetch, basePath)
        },
        /**
         * Tries to update the application's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ApplicationSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                ApplicationSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of Application resource representations, each representing an application within your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidApplicationsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Creates a new application within your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidApplicationsmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Get the properties of the authorized application.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ConnectAppSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                ConnectAppSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of Connect App resource representations, each representing a Connect App you've authorized to access your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of local AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number tha is currently available for provisioning within your account.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(
            AccountSid: string,
            IsoCountryCode: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(
                AccountSid,
                IsoCountryCode,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of mobile AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number that is currently available for provisioning within your account.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(
            AccountSid: string,
            IsoCountryCode: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(
                AccountSid,
                IsoCountryCode,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of toll-free AvailablePhoneNumber elements that match the specified filters, each representing a phone number that is currently available for provisioning within your account. To provision an available phone number, POST the number to the IncomingPhoneNumbers resource.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(
            AccountSid: string,
            IsoCountryCode: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(
                AccountSid,
                IsoCountryCode,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of all AvailablePhoneNumber subresources for your account by ISO Country. For full information about our phone number support, see our Phone Number CSV (http://www.twilio.com/resources/rates/international-phone-number-rates.csv).
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of notifications generated for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {string} CallSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(
            AccountSid: string,
            CallSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(
                AccountSid,
                CallSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
         * @param {string} AccountSid
         * @param {string} CallSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(
            AccountSid: string,
            CallSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(
                AccountSid,
                CallSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns the single Call resource identified by {CallSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidCallsCallSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                CallSid,
                options
            )(fetch, basePath)
        },
        /**
         * Modify a phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidCallsCallSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                CallSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of phone calls made to and from the account identified by {AccountSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidCallsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * To make a call, make an HTTP POST request. Initiate a new phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidCallsmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Kick this participant from the conference.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(
            AccountSid: string,
            ConferenceSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(
                AccountSid,
                ConferenceSid,
                mediaTypeExtension,
                CallSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a representation of this participant.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(
            AccountSid: string,
            ConferenceSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(
                AccountSid,
                ConferenceSid,
                mediaTypeExtension,
                CallSid,
                options
            )(fetch, basePath)
        },
        /**
         * Updates the status of a participant.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(
            AccountSid: string,
            ConferenceSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(
                AccountSid,
                ConferenceSid,
                mediaTypeExtension,
                CallSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns the list of participants in the conference identified by {ConferenceSid}.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(
            AccountSid: string,
            ConferenceSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(
                AccountSid,
                ConferenceSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a representation of the conference identified by {ConferenceSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConferenceSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ConferenceSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                ConferenceSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of conferences within an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidConferencesmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Get the properties of a Connect App.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ConnectAppSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                ConnectAppSid,
                options
            )(fetch, basePath)
        },
        /**
         * Tries to update the Connect App's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ConnectAppSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                ConnectAppSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of Connect App resource representations, each representing a Connect App in your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidConnectAppsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Release this phone number from your account. Twilio will no longer answer calls to this number, and you will stop being billed the monthly phone number fee. The phone number will eventually be recycled and potentially given to another customer, so use with care. If you make a mistake, contac us. We may be able to give you the number back.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IncomingPhoneNumberSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                IncomingPhoneNumberSid,
                options
            )(fetch, basePath)
        },
        /**
         * Get info about incoming call's phone number.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IncomingPhoneNumberSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                IncomingPhoneNumberSid,
                options
            )(fetch, basePath)
        },
        /**
         * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IncomingPhoneNumberSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                IncomingPhoneNumberSid,
                options
            )(fetch, basePath)
        },
        /**
         * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IncomingPhoneNumberSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(
                AccountSid,
                mediaTypeExtension,
                IncomingPhoneNumberSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a local (not toll-free) phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out toll-free numbers.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a mobile phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out local and toll free numbers.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a toll-free phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out all numbers that aren't toll-free.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of IncomingPhoneNumber resource representations, each representing a phone number given to your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Purchases a new phone number for your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number. To find an available phone number to POST, use the subresources of the AvailablePhoneNumbers list resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Without an extension, the media is returned using the mime-type provided when the media was generated.
         * @param {string} AccountSid
         * @param {string} MessageSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} MediaSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(
            AccountSid: string,
            MessageSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            MediaSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(
                AccountSid,
                MessageSid,
                mediaTypeExtension,
                MediaSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of media associated with your message.
         * @param {string} AccountSid
         * @param {string} MessageSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(
            AccountSid: string,
            MessageSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(
                AccountSid,
                MessageSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a single message specified by the provided {MessageSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} MessageSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            MessageSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                MessageSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of messages associated with your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidMessagesmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * To send a new outgoing message, make an HTTP POST to your Messages list resource URI
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} To The destination phone number. Format with a &#39;+&#39; and country code e.g., +16175551212 (E.164 format).
         * @param {string} [From] A Twilio phone number (in E.164 format) or alphanumeric sender ID enabled for the type of message you wish to send. Phone numbers or short codes purchased from Twilio work here. You cannot (for example) spoof messages from your own cell phone number.
         * @param {string} [MessagingServiceSid] The 34 character unique id of the Messaging Service you want to associate with this Message. Set this parameter to use the Messaging Service Settings and Copilot Features you have configured. When only this parameter is set, Twilio will use your enabled Copilot Features to select the From phone number for delivery.
         * @param {string} [Body] The text of the message you want to send, limited to 1600 characters.
         * @param {string} [MediaUrl] The URL of the media you wish to send out with the message. gif , png and jpeg content is currently supported and will be formatted correctly on the recipient&#39;s device. Other types are also accepted by the API. The media size limit is 5MB. If you wish to send more than one image in the message body, please provide multiple MediaUrls values in the POST request. You may include up to 10 MediaUrls per message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            To: string,
            From?: string,
            MessagingServiceSid?: string,
            Body?: string,
            MediaUrl?: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidMessagesmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                To,
                From,
                MessagingServiceSid,
                Body,
                MediaUrl,
                options
            )(fetch, basePath)
        },
        /**
         * Deletes the notification identified by {NotificationSid} from an account's log.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} NotificationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            NotificationSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                NotificationSid,
                options
            )(fetch, basePath)
        },
        /**
         * Get a notification entry.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} NotificationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            NotificationSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                NotificationSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of notifications generated for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidNotificationsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Deletes the caller ID from the account. Returns an HTTP 204 response if successful, with no body.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            OutgoingCallerIdSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                OutgoingCallerIdSid,
                options
            )(fetch, basePath)
        },
        /**
         * Get the set of an account's verified phone numbers.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            OutgoingCallerIdSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                OutgoingCallerIdSid,
                options
            )(fetch, basePath)
        },
        /**
         * Updates the caller id, and returns the updated resource if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            OutgoingCallerIdSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                OutgoingCallerIdSid,
                options
            )(fetch, basePath)
        },
        /**
         * Updates the caller id, and returns the updated resource if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            OutgoingCallerIdSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(
                AccountSid,
                mediaTypeExtension,
                OutgoingCallerIdSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of OutgoingCallerId resource representations, each representing a Caller ID number valid for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Adds a new CallerID to your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Get a specific member.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(
                AccountSid,
                QueueSid,
                mediaTypeExtension,
                CallSid,
                options
            )(fetch, basePath)
        },
        /**
         * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When redirecting a member of a queue addressed by CallSid, only the first request will succeed and return a 200 response code. A second request will fail and return an appropriate 400 response code.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CallSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(
                AccountSid,
                QueueSid,
                mediaTypeExtension,
                CallSid,
                options
            )(fetch, basePath)
        },
        /**
         * Get a front member.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(
                AccountSid,
                QueueSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When dequeuing the 'Front' of the queue, the next call in the queue will be redirected.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(
                AccountSid,
                QueueSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns the list of members in the queue identified by {QueueSid}.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(
            AccountSid: string,
            QueueSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(
                AccountSid,
                QueueSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * The DELETE method allows you to remove a Queue. Only empty queues are deletable.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            QueueSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                QueueSid,
                options
            )(fetch, basePath)
        },
        /**
         * Get resource's individual Queue instance.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            QueueSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                QueueSid,
                options
            )(fetch, basePath)
        },
        /**
         * This POST request allows you to change the FriendlyName or MaxSize.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            QueueSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                QueueSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of queues within an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidQueuesmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Create a new Queue resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidQueuesmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a set of Transcription resource representations that includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            RecordingSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                RecordingSid,
                options
            )(fetch, basePath)
        },
        /**
         * Deletes a recording  from your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.wav' | '.mp3',
            RecordingSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                RecordingSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns one of several representations: Without an extension, or with a \".wav\", a binary WAV audio file is returned with mime-type \"audio/x-wav\". Appending \".mp3\" to the URI returns a binary MP3 audio file with mime-type type \"audio/mpeg\". Appending \".xml\" to the URI returns a XML representation.
         * @param {string} AccountSid
         * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.wav' | '.mp3',
            RecordingSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                RecordingSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidRecordingsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Remove a Credential from a CredentialList.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CredentialSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(
                AccountSid,
                CLSid,
                mediaTypeExtension,
                CredentialSid,
                options
            )(fetch, basePath)
        },
        /**
         * Get a specific Credential in a list. Though a password is stored for each username in your list, the password is not returned to protect your password. If you cannot remember your password, you will need to POST to this resource to update it.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CredentialSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(
                AccountSid,
                CLSid,
                mediaTypeExtension,
                CredentialSid,
                options
            )(fetch, basePath)
        },
        /**
         * Change the password of a Credential record.  If the change is successful, Twilio will respond with the Credential record but will not include the password in the response.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CredentialSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(
                AccountSid,
                CLSid,
                mediaTypeExtension,
                CredentialSid,
                options
            )(fetch, basePath)
        },
        /**
         * Get the list of Credentials in a CredentialList. The passwords for the Credentials are intentionally not returned so as to protect them.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(
                AccountSid,
                CLSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Add a Credential to the CredentialList.  When creating a Credential, you will POST both a username and password, but only receive the username back in the response. The password is intentionally not returned so as to protect it.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(
            AccountSid: string,
            CLSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(
                AccountSid,
                CLSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Delete a CredentialList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CLSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                CLSid,
                options
            )(fetch, basePath)
        },
        /**
         * Get a credential list instance resource
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CLSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                CLSid,
                options
            )(fetch, basePath)
        },
        /**
         * Change the FriendlyName of the list
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CLSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                CLSid,
                options
            )(fetch, basePath)
        },
        /**
         * Gets a list of Credential Lists for an account
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Create a new Credential List.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Remove a CredentialListMapping from a domain
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            CLSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                CLSid,
                options
            )(fetch, basePath)
        },
        /**
         * Get the user lists mapped to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Map a CredentialList to the domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Remove a mapping from this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ALSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ALSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                ALSid,
                options
            )(fetch, basePath)
        },
        /**
         * Return a specific IpAccessControlListMapping instance by Sid.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ALSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ALSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                ALSid,
                options
            )(fetch, basePath)
        },
        /**
         * Return the IpAccessControlListMappings that are associated to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Map an IpAccessControlList to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(
            AccountSid: string,
            SipDomainSid: string,
            mediaTypeExtension: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(
                AccountSid,
                SipDomainSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Delete a domain. If you have created subdomains of a domain, you will not be able to delete the domain until you first delete all subdomains of it.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            SipDomainSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                SipDomainSid,
                options
            )(fetch, basePath)
        },
        /**
         * Return a specific instance by Sid.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            SipDomainSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                SipDomainSid,
                options
            )(fetch, basePath)
        },
        /**
         * Update the attributes of a domain.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            SipDomainSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                SipDomainSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a paged list of the domains for an account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPDomainsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Creates a new Domain and returns its instance resource. You must pick a unique domain name that ends in \".sip.twilio.com\". After creating a Domain, you must map it to an authentication method before the domain is ready to receive traffic.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPDomainsmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Deletes an IP address entry from the list.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAddressSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(
                AccountSid,
                IpAccessControlListSid,
                mediaTypeExtension,
                IpAddressSid,
                options
            )(fetch, basePath)
        },
        /**
         * Return a single IP Address resource.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAddressSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(
                AccountSid,
                IpAccessControlListSid,
                mediaTypeExtension,
                IpAddressSid,
                options
            )(fetch, basePath)
        },
        /**
         * Change the description or IP address of a given IpAddress instance resource
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAddressSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(
                AccountSid,
                IpAccessControlListSid,
                mediaTypeExtension,
                IpAddressSid,
                options
            )(fetch, basePath)
        },
        /**
         * List the IP Addresses contained in this list.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(
                AccountSid,
                IpAccessControlListSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Add an IP Address to the list with a description.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(
            AccountSid: string,
            IpAccessControlListSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(
                AccountSid,
                IpAccessControlListSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Delete an IpAccessControlList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAccessControlListSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                IpAccessControlListSid,
                options
            )(fetch, basePath)
        },
        /**
         * Return a specific IpAccessControlList resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAccessControlListSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                IpAccessControlListSid,
                options
            )(fetch, basePath)
        },
        /**
         * Rename an IpAccessControlList.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            IpAccessControlListSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                IpAccessControlListSid,
                options
            )(fetch, basePath)
        },
        /**
         * Return a paged list of all IpAccessControlLists under this account.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Create a new IpAccessControlList resource.  When created, the list will contain no IP addresses. You will need to add IP addresses to the list for it to be active. To add IP addresses, you will need to POST to the IpAddresses List subresource.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Get a single message.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ShortCodeSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ShortCodeSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                ShortCodeSid,
                options
            )(fetch, basePath)
        },
        /**
         * Tries to update the shortcode's properties, and returns the updated resource representation if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ShortCodeSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            ShortCodeSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                ShortCodeSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of ShortCode resource representations, each representing a short code within your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidSMSShortCodesmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Deletes a transcription from your account.
         * @param {string} AccountSid
         * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} TranscriptionSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.json' | '.csv' | '.html' | '.txt' | '.xml',
            TranscriptionSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                TranscriptionSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a single Transcription resource representation identified by the given {TranscriptionSid}. By default Twilio will respond with the XML metadata for the Transcription. If you append \".txt\" to the end of the Transcription resource's URI Twilio will just return you the transcription tex.
         * @param {string} AccountSid
         * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} TranscriptionSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.json' | '.csv' | '.html' | '.txt' | '.xml',
            TranscriptionSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                TranscriptionSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a set of Transcription resource representations that includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidTranscriptionsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns UsageRecords for all usage categories for a specified period.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {'Daily' | 'Monthly' | 'Yearly' | 'AllTime' | 'Today' | 'Yesterday' | 'ThisMonth' | 'LastMonth'} Subresource |Subresource|Description| |---|---| |Daily|Return multiple UsageRecords for each usage category, each representing usage over a daily time-interval.| |Monthly|Return multiple UsageRecords for each usage category, each representing usage over a monthly time-interval.| |Yearly|Return multple UsageRecords for each usage category, each representing usage over a yearly time-interval.| |AllTime|  Return a single UsageRecord for each usage category, each representing usage over the date-range specified. This is the same as the root /Usage/Records.| |Today|Return a single UsageRecord per usage category, for today&#39;s usage only.| ||Yesterday|Return a single UsageRecord per usage category, for yesterday&#39;s usage only.| |ThisMonth|Return a single UsageRecord per usage category, for this month&#39;s usage only.| |LastMonth|Return a single UsageRecord per usage category, for last month&#39;s usage only.|
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            Subresource:
                | 'Daily'
                | 'Monthly'
                | 'Yearly'
                | 'AllTime'
                | 'Today'
                | 'Yesterday'
                | 'ThisMonth'
                | 'LastMonth',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                Subresource,
                options
            )(fetch, basePath)
        },
        /**
         * Returns UsageRecords for all usage categories. The list includes paging information. By default, the UsageRecords resource will return one UsageRecord for each Category, representing all usage accrued all-time for the account. You can filter the usage Category or change the date-range over which usage is counted using optional GET query parameters.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageRecordsmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidUsageRecordsmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Delete this UsageTrigger.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            UsageTriggerSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(
                AccountSid,
                mediaTypeExtension,
                UsageTriggerSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a repesentation of the UsageTrigger.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            UsageTriggerSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                UsageTriggerSid,
                options
            )(fetch, basePath)
        },
        /**
         * Tries to update the UsageTrigger's properties, and returns the updated resource representation if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            UsageTriggerSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                UsageTriggerSid,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a list of UsageTrigger resource representations. The list includes paging information. By default, all UsageTriggers are returned. You can filter the list by specifying one or more query parameters. Note that the query parameters are case-sensitive
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersmediaTypeExtensionGet(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidUsageTriggersmediaTypeExtensionGet(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Creates a new UsageTrigger. Each account can create up to 1,000 UsageTriggers. Currently, UsageTriggers that are no longer active are not deleted automatically. Use DELETE to delete triggers you no longer need.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersmediaTypeExtensionPost(
            AccountSid: string,
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidUsageTriggersmediaTypeExtensionPost(
                AccountSid,
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Returns a representation of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionGet(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            AccountSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidmediaTypeExtensionGet(
                mediaTypeExtension,
                AccountSid,
                options
            )(fetch, basePath)
        },
        /**
         * Allows you to modify the properties of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionPost(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            AccountSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidmediaTypeExtensionPost(
                mediaTypeExtension,
                AccountSid,
                options
            )(fetch, basePath)
        },
        /**
         * Allows you to modify the properties of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionPut(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            AccountSid: string,
            options?: any
        ) {
            return DefaultApiFp(
                configuration
            ).accountsAccountSidmediaTypeExtensionPut(
                mediaTypeExtension,
                AccountSid,
                options
            )(fetch, basePath)
        },
        /**
         * Retrieve a list of the Account resources belonging to the account used to make the API request. This list will include that Account as well.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsmediaTypeExtensionGet(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(configuration).accountsmediaTypeExtensionGet(
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
        /**
         * Create a new Account instance resource as a subaccount of the one used to make the request. See Creating Subaccounts for more information.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsmediaTypeExtensionPost(
            mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
            options?: any
        ) {
            return DefaultApiFp(configuration).accountsmediaTypeExtensionPost(
                mediaTypeExtension,
                options
            )(fetch, basePath)
        },
    }
}

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Delete this application.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ApplicationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ApplicationSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Get application instance resource.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ApplicationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ApplicationSid: string,
        options?: any
    ): Promise<Application>

    /**
     * Tries to update the application's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ApplicationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ApplicationSid: string,
        options?: any
    ): Promise<Application>

    /**
     * Returns a list of Application resource representations, each representing an application within your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidApplicationsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Applications>

    /**
     * Creates a new application within your account.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidApplicationsmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<{}>

    /**
     * Get the properties of the authorized application.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ConnectAppSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ConnectAppSid: string,
        options?: any
    ): Promise<AuthApp>

    /**
     * Returns a list of Connect App resource representations, each representing a Connect App you've authorized to access your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<AuthApps>

    /**
     * Returns a list of local AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number tha is currently available for provisioning within your account.
     * @param {string} AccountSid
     * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(
        AccountSid: string,
        IsoCountryCode: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<AvailablePhoneNumbers>

    /**
     * Returns a list of mobile AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number that is currently available for provisioning within your account.
     * @param {string} AccountSid
     * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(
        AccountSid: string,
        IsoCountryCode: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<PhoneMobileNumbers>

    /**
     * Returns a list of toll-free AvailablePhoneNumber elements that match the specified filters, each representing a phone number that is currently available for provisioning within your account. To provision an available phone number, POST the number to the IncomingPhoneNumbers resource.
     * @param {string} AccountSid
     * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(
        AccountSid: string,
        IsoCountryCode: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<PhoneTollFreeNumbers>

    /**
     * Returns a list of all AvailablePhoneNumber subresources for your account by ISO Country. For full information about our phone number support, see our Phone Number CSV (http://www.twilio.com/resources/rates/international-phone-number-rates.csv).
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<AvailablePhoneNumbers>

    /**
     * Returns a list of notifications generated for an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {string} CallSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(
        AccountSid: string,
        CallSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Notifications>

    /**
     * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
     * @param {string} AccountSid
     * @param {string} CallSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(
        AccountSid: string,
        CallSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Recordings>

    /**
     * Returns the single Call resource identified by {CallSid}.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidCallsCallSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ): Promise<CallInstance>

    /**
     * Modify a phone call.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidCallsCallSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ): Promise<CallInstance>

    /**
     * Returns a list of phone calls made to and from the account identified by {AccountSid}.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidCallsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Calls>

    /**
     * To make a call, make an HTTP POST request. Initiate a new phone call.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidCallsmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<{}>

    /**
     * Kick this participant from the conference.
     * @param {string} AccountSid
     * @param {string} ConferenceSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(
        AccountSid: string,
        ConferenceSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Returns a representation of this participant.
     * @param {string} AccountSid
     * @param {string} ConferenceSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(
        AccountSid: string,
        ConferenceSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ): Promise<Participant>

    /**
     * Updates the status of a participant.
     * @param {string} AccountSid
     * @param {string} ConferenceSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(
        AccountSid: string,
        ConferenceSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ): Promise<Participant>

    /**
     * Returns the list of participants in the conference identified by {ConferenceSid}.
     * @param {string} AccountSid
     * @param {string} ConferenceSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(
        AccountSid: string,
        ConferenceSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Participants>

    /**
     * Returns a representation of the conference identified by {ConferenceSid}.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ConferenceSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ConferenceSid: string,
        options?: any
    ): Promise<Conference>

    /**
     * Returns a list of conferences within an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidConferencesmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Conferences>

    /**
     * Get the properties of a Connect App.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ConnectAppSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ConnectAppSid: string,
        options?: any
    ): Promise<ConnectApp>

    /**
     * Tries to update the Connect App's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ConnectAppSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ConnectAppSid: string,
        options?: any
    ): Promise<ConnectApp>

    /**
     * Returns a list of Connect App resource representations, each representing a Connect App in your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidConnectAppsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<ConnectApps>

    /**
     * Release this phone number from your account. Twilio will no longer answer calls to this number, and you will stop being billed the monthly phone number fee. The phone number will eventually be recycled and potentially given to another customer, so use with care. If you make a mistake, contac us. We may be able to give you the number back.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IncomingPhoneNumberSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IncomingPhoneNumberSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Get info about incoming call's phone number.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IncomingPhoneNumberSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IncomingPhoneNumberSid: string,
        options?: any
    ): Promise<IncomingCall>

    /**
     * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IncomingPhoneNumberSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IncomingPhoneNumberSid: string,
        options?: any
    ): Promise<IncomingCall>

    /**
     * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IncomingPhoneNumberSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IncomingPhoneNumberSid: string,
        options?: any
    ): Promise<IncomingCall>

    /**
     * Returns a list of local <IncomingPhoneNumber> elements, each representing a local (not toll-free) phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out toll-free numbers.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ): Promise<{}>

    /**
     * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ): Promise<{}>

    /**
     * Returns a list of local <IncomingPhoneNumber> elements, each representing a mobile phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out local and toll free numbers.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ): Promise<{}>

    /**
     * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ): Promise<{}>

    /**
     * Returns a list of local <IncomingPhoneNumber> elements, each representing a toll-free phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out all numbers that aren't toll-free.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ): Promise<{}>

    /**
     * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ): Promise<{}>

    /**
     * Returns a list of IncomingPhoneNumber resource representations, each representing a phone number given to your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<IncomingCalls>

    /**
     * Purchases a new phone number for your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number. To find an available phone number to POST, use the subresources of the AvailablePhoneNumbers list resource.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<{}>

    /**
     * Without an extension, the media is returned using the mime-type provided when the media was generated.
     * @param {string} AccountSid
     * @param {string} MessageSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} MediaSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(
        AccountSid: string,
        MessageSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        MediaSid: string,
        options?: any
    ): Promise<Media>

    /**
     * Returns a list of media associated with your message.
     * @param {string} AccountSid
     * @param {string} MessageSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(
        AccountSid: string,
        MessageSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<MediaList>

    /**
     * Returns a single message specified by the provided {MessageSid}.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} MessageSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        MessageSid: string,
        options?: any
    ): Promise<Message>

    /**
     * Returns a list of messages associated with your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidMessagesmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Messages>

    /**
     * To send a new outgoing message, make an HTTP POST to your Messages list resource URI
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} To The destination phone number. Format with a &#39;+&#39; and country code e.g., +16175551212 (E.164 format).
     * @param {string} [From] A Twilio phone number (in E.164 format) or alphanumeric sender ID enabled for the type of message you wish to send. Phone numbers or short codes purchased from Twilio work here. You cannot (for example) spoof messages from your own cell phone number.
     * @param {string} [MessagingServiceSid] The 34 character unique id of the Messaging Service you want to associate with this Message. Set this parameter to use the Messaging Service Settings and Copilot Features you have configured. When only this parameter is set, Twilio will use your enabled Copilot Features to select the From phone number for delivery.
     * @param {string} [Body] The text of the message you want to send, limited to 1600 characters.
     * @param {string} [MediaUrl] The URL of the media you wish to send out with the message. gif , png and jpeg content is currently supported and will be formatted correctly on the recipient&#39;s device. Other types are also accepted by the API. The media size limit is 5MB. If you wish to send more than one image in the message body, please provide multiple MediaUrls values in the POST request. You may include up to 10 MediaUrls per message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidMessagesmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        To: string,
        From?: string,
        MessagingServiceSid?: string,
        Body?: string,
        MediaUrl?: string,
        options?: any
    ): Promise<{}>

    /**
     * Deletes the notification identified by {NotificationSid} from an account's log.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} NotificationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        NotificationSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Get a notification entry.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} NotificationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        NotificationSid: string,
        options?: any
    ): Promise<Notification>

    /**
     * Returns a list of notifications generated for an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidNotificationsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Notifications>

    /**
     * Deletes the caller ID from the account. Returns an HTTP 204 response if successful, with no body.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} OutgoingCallerIdSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        OutgoingCallerIdSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Get the set of an account's verified phone numbers.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} OutgoingCallerIdSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        OutgoingCallerIdSid: string,
        options?: any
    ): Promise<OutgoingCallerId>

    /**
     * Updates the caller id, and returns the updated resource if successful.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} OutgoingCallerIdSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        OutgoingCallerIdSid: string,
        options?: any
    ): Promise<OutgoingCallerId>

    /**
     * Updates the caller id, and returns the updated resource if successful.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} OutgoingCallerIdSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        OutgoingCallerIdSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Returns a list of OutgoingCallerId resource representations, each representing a Caller ID number valid for an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<OutCallerIds>

    /**
     * Adds a new CallerID to your account.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<{}>

    /**
     * Get a specific member.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(
        AccountSid: string,
        QueueSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ): Promise<Member>

    /**
     * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When redirecting a member of a queue addressed by CallSid, only the first request will succeed and return a 200 response code. A second request will fail and return an appropriate 400 response code.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(
        AccountSid: string,
        QueueSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ): Promise<Member>

    /**
     * Get a front member.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(
        AccountSid: string,
        QueueSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Member>

    /**
     * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When dequeuing the 'Front' of the queue, the next call in the queue will be redirected.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(
        AccountSid: string,
        QueueSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Member>

    /**
     * Returns the list of members in the queue identified by {QueueSid}.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(
        AccountSid: string,
        QueueSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Members>

    /**
     * The DELETE method allows you to remove a Queue. Only empty queues are deletable.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} QueueSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        QueueSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Get resource's individual Queue instance.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} QueueSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        QueueSid: string,
        options?: any
    ): Promise<Queue>

    /**
     * This POST request allows you to change the FriendlyName or MaxSize.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} QueueSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        QueueSid: string,
        options?: any
    ): Promise<Queue>

    /**
     * Returns a list of queues within an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidQueuesmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Queues>

    /**
     * Create a new Queue resource.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidQueuesmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<{}>

    /**
     * Returns a set of Transcription resource representations that includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} RecordingSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        RecordingSid: string,
        options?: any
    ): Promise<Transcriptions>

    /**
     * Deletes a recording  from your account.
     * @param {string} AccountSid
     * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
     * @param {string} RecordingSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.wav' | '.mp3',
        RecordingSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Returns one of several representations: Without an extension, or with a \".wav\", a binary WAV audio file is returned with mime-type \"audio/x-wav\". Appending \".mp3\" to the URI returns a binary MP3 audio file with mime-type type \"audio/mpeg\". Appending \".xml\" to the URI returns a XML representation.
     * @param {string} AccountSid
     * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
     * @param {string} RecordingSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.wav' | '.mp3',
        RecordingSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidRecordingsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Recordings>

    /**
     * Remove a Credential from a CredentialList.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CredentialSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(
        AccountSid: string,
        CLSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CredentialSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Get a specific Credential in a list. Though a password is stored for each username in your list, the password is not returned to protect your password. If you cannot remember your password, you will need to POST to this resource to update it.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CredentialSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(
        AccountSid: string,
        CLSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CredentialSid: string,
        options?: any
    ): Promise<Credential>

    /**
     * Change the password of a Credential record.  If the change is successful, Twilio will respond with the Credential record but will not include the password in the response.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CredentialSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(
        AccountSid: string,
        CLSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CredentialSid: string,
        options?: any
    ): Promise<Credential>

    /**
     * Get the list of Credentials in a CredentialList. The passwords for the Credentials are intentionally not returned so as to protect them.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(
        AccountSid: string,
        CLSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Credentials>

    /**
     * Add a Credential to the CredentialList.  When creating a Credential, you will POST both a username and password, but only receive the username back in the response. The password is intentionally not returned so as to protect it.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(
        AccountSid: string,
        CLSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<{}>

    /**
     * Delete a CredentialList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CLSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CLSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Get a credential list instance resource
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CLSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CLSid: string,
        options?: any
    ): Promise<CredentialList>

    /**
     * Change the FriendlyName of the list
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CLSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CLSid: string,
        options?: any
    ): Promise<CredentialList>

    /**
     * Gets a list of Credential Lists for an account
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<CredentialLists>

    /**
     * Create a new Credential List.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<{}>

    /**
     * Remove a CredentialListMapping from a domain
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CLSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CLSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Get the user lists mapped to this domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<CredentialListMappings>

    /**
     * Map a CredentialList to the domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<{}>

    /**
     * Remove a mapping from this domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ALSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ALSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Return a specific IpAccessControlListMapping instance by Sid.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ALSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ALSid: string,
        options?: any
    ): Promise<IpAccessControlListMapping>

    /**
     * Return the IpAccessControlListMappings that are associated to this domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: string,
        options?: any
    ): Promise<{}>

    /**
     * Map an IpAccessControlList to this domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: string,
        options?: any
    ): Promise<{}>

    /**
     * Delete a domain. If you have created subdomains of a domain, you will not be able to delete the domain until you first delete all subdomains of it.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} SipDomainSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        SipDomainSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Return a specific instance by Sid.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} SipDomainSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        SipDomainSid: string,
        options?: any
    ): Promise<Domain>

    /**
     * Update the attributes of a domain.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} SipDomainSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        SipDomainSid: string,
        options?: any
    ): Promise<Domain>

    /**
     * Returns a paged list of the domains for an account.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPDomainsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Domains>

    /**
     * Creates a new Domain and returns its instance resource. You must pick a unique domain name that ends in \".sip.twilio.com\". After creating a Domain, you must map it to an authentication method before the domain is ready to receive traffic.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPDomainsmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<{}>

    /**
     * Deletes an IP address entry from the list.
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAddressSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(
        AccountSid: string,
        IpAccessControlListSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IpAddressSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Return a single IP Address resource.
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAddressSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(
        AccountSid: string,
        IpAccessControlListSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IpAddressSid: string,
        options?: any
    ): Promise<IpAddress>

    /**
     * Change the description or IP address of a given IpAddress instance resource
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAddressSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(
        AccountSid: string,
        IpAccessControlListSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IpAddressSid: string,
        options?: any
    ): Promise<IpAddress>

    /**
     * List the IP Addresses contained in this list.
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(
        AccountSid: string,
        IpAccessControlListSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<IpAddresses>

    /**
     * Add an IP Address to the list with a description.
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(
        AccountSid: string,
        IpAccessControlListSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<{}>

    /**
     * Delete an IpAccessControlList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAccessControlListSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IpAccessControlListSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Return a specific IpAccessControlList resource.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAccessControlListSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IpAccessControlListSid: string,
        options?: any
    ): Promise<IpAccessControlListMapping>

    /**
     * Rename an IpAccessControlList.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAccessControlListSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IpAccessControlListSid: string,
        options?: any
    ): Promise<IpAccessControlListMapping>

    /**
     * Return a paged list of all IpAccessControlLists under this account.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ): Promise<{}>

    /**
     * Create a new IpAccessControlList resource.  When created, the list will contain no IP addresses. You will need to add IP addresses to the list for it to be active. To add IP addresses, you will need to POST to the IpAddresses List subresource.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ): Promise<IpAccessControlListMapping>

    /**
     * Get a single message.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ShortCodeSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ShortCodeSid: string,
        options?: any
    ): Promise<ShortCode>

    /**
     * Tries to update the shortcode's properties, and returns the updated resource representation if successful.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ShortCodeSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ShortCodeSid: string,
        options?: any
    ): Promise<ShortCode>

    /**
     * Returns a list of ShortCode resource representations, each representing a short code within your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidSMSShortCodesmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<ShortCodes>

    /**
     * Deletes a transcription from your account.
     * @param {string} AccountSid
     * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} TranscriptionSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.json' | '.csv' | '.html' | '.txt' | '.xml',
        TranscriptionSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Returns a single Transcription resource representation identified by the given {TranscriptionSid}. By default Twilio will respond with the XML metadata for the Transcription. If you append \".txt\" to the end of the Transcription resource's URI Twilio will just return you the transcription tex.
     * @param {string} AccountSid
     * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} TranscriptionSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.json' | '.csv' | '.html' | '.txt' | '.xml',
        TranscriptionSid: string,
        options?: any
    ): Promise<Transcription>

    /**
     * Returns a set of Transcription resource representations that includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidTranscriptionsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Transcriptions>

    /**
     * Returns UsageRecords for all usage categories for a specified period.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {'Daily' | 'Monthly' | 'Yearly' | 'AllTime' | 'Today' | 'Yesterday' | 'ThisMonth' | 'LastMonth'} Subresource |Subresource|Description| |---|---| |Daily|Return multiple UsageRecords for each usage category, each representing usage over a daily time-interval.| |Monthly|Return multiple UsageRecords for each usage category, each representing usage over a monthly time-interval.| |Yearly|Return multple UsageRecords for each usage category, each representing usage over a yearly time-interval.| |AllTime|  Return a single UsageRecord for each usage category, each representing usage over the date-range specified. This is the same as the root /Usage/Records.| |Today|Return a single UsageRecord per usage category, for today&#39;s usage only.| ||Yesterday|Return a single UsageRecord per usage category, for yesterday&#39;s usage only.| |ThisMonth|Return a single UsageRecord per usage category, for this month&#39;s usage only.| |LastMonth|Return a single UsageRecord per usage category, for last month&#39;s usage only.|
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        Subresource:
            | 'Daily'
            | 'Monthly'
            | 'Yearly'
            | 'AllTime'
            | 'Today'
            | 'Yesterday'
            | 'ThisMonth'
            | 'LastMonth',
        options?: any
    ): Promise<UsageRecords>

    /**
     * Returns UsageRecords for all usage categories. The list includes paging information. By default, the UsageRecords resource will return one UsageRecord for each Category, representing all usage accrued all-time for the account. You can filter the usage Category or change the date-range over which usage is counted using optional GET query parameters.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidUsageRecordsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<UsageRecords>

    /**
     * Delete this UsageTrigger.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} UsageTriggerSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        UsageTriggerSid: string,
        options?: any
    ): Promise<{}>

    /**
     * Returns a repesentation of the UsageTrigger.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} UsageTriggerSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        UsageTriggerSid: string,
        options?: any
    ): Promise<UsageTrigger>

    /**
     * Tries to update the UsageTrigger's properties, and returns the updated resource representation if successful.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} UsageTriggerSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        UsageTriggerSid: string,
        options?: any
    ): Promise<UsageTrigger>

    /**
     * Returns a list of UsageTrigger resource representations. The list includes paging information. By default, all UsageTriggers are returned. You can filter the list by specifying one or more query parameters. Note that the query parameters are case-sensitive
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidUsageTriggersmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<UsageTriggers>

    /**
     * Creates a new UsageTrigger. Each account can create up to 1,000 UsageTriggers. Currently, UsageTriggers that are no longer active are not deleted automatically. Use DELETE to delete triggers you no longer need.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidUsageTriggersmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<{}>

    /**
     * Returns a representation of an account.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} AccountSid A 34 character string that uniquely identifies this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidmediaTypeExtensionGet(
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        AccountSid: string,
        options?: any
    ): Promise<Account>

    /**
     * Allows you to modify the properties of an account.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} AccountSid A 34 character string that uniquely identifies this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidmediaTypeExtensionPost(
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        AccountSid: string,
        options?: any
    ): Promise<Account>

    /**
     * Allows you to modify the properties of an account.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} AccountSid A 34 character string that uniquely identifies this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsAccountSidmediaTypeExtensionPut(
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        AccountSid: string,
        options?: any
    ): Promise<Account>

    /**
     * Retrieve a list of the Account resources belonging to the account used to make the API request. This list will include that Account as well.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsmediaTypeExtensionGet(
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<Accounts>

    /**
     * Create a new Account instance resource as a subaccount of the one used to make the request. See Creating Subaccounts for more information.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    accountsmediaTypeExtensionPost(
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ): Promise<{}>
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Delete this application.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ApplicationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ApplicationSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(
            AccountSid,
            mediaTypeExtension,
            ApplicationSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get application instance resource.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ApplicationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ApplicationSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            ApplicationSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Tries to update the application's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ApplicationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ApplicationSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            ApplicationSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of Application resource representations, each representing an application within your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidApplicationsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidApplicationsmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Creates a new application within your account.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidApplicationsmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidApplicationsmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get the properties of the authorized application.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ConnectAppSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ConnectAppSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            ConnectAppSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of Connect App resource representations, each representing a Connect App you've authorized to access your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of local AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number tha is currently available for provisioning within your account.
     * @param {string} AccountSid
     * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(
        AccountSid: string,
        IsoCountryCode: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(
            AccountSid,
            IsoCountryCode,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of mobile AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number that is currently available for provisioning within your account.
     * @param {string} AccountSid
     * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(
        AccountSid: string,
        IsoCountryCode: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(
            AccountSid,
            IsoCountryCode,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of toll-free AvailablePhoneNumber elements that match the specified filters, each representing a phone number that is currently available for provisioning within your account. To provision an available phone number, POST the number to the IncomingPhoneNumbers resource.
     * @param {string} AccountSid
     * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(
        AccountSid: string,
        IsoCountryCode: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(
            AccountSid,
            IsoCountryCode,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of all AvailablePhoneNumber subresources for your account by ISO Country. For full information about our phone number support, see our Phone Number CSV (http://www.twilio.com/resources/rates/international-phone-number-rates.csv).
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of notifications generated for an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {string} CallSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(
        AccountSid: string,
        CallSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(
            AccountSid,
            CallSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
     * @param {string} AccountSid
     * @param {string} CallSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(
        AccountSid: string,
        CallSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(
            AccountSid,
            CallSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns the single Call resource identified by {CallSid}.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidCallsCallSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidCallsCallSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            CallSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Modify a phone call.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidCallsCallSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidCallsCallSidmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            CallSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of phone calls made to and from the account identified by {AccountSid}.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidCallsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidCallsmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * To make a call, make an HTTP POST request. Initiate a new phone call.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidCallsmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidCallsmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Kick this participant from the conference.
     * @param {string} AccountSid
     * @param {string} ConferenceSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(
        AccountSid: string,
        ConferenceSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(
            AccountSid,
            ConferenceSid,
            mediaTypeExtension,
            CallSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a representation of this participant.
     * @param {string} AccountSid
     * @param {string} ConferenceSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(
        AccountSid: string,
        ConferenceSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(
            AccountSid,
            ConferenceSid,
            mediaTypeExtension,
            CallSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Updates the status of a participant.
     * @param {string} AccountSid
     * @param {string} ConferenceSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(
        AccountSid: string,
        ConferenceSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(
            AccountSid,
            ConferenceSid,
            mediaTypeExtension,
            CallSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns the list of participants in the conference identified by {ConferenceSid}.
     * @param {string} AccountSid
     * @param {string} ConferenceSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(
        AccountSid: string,
        ConferenceSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(
            AccountSid,
            ConferenceSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a representation of the conference identified by {ConferenceSid}.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ConferenceSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ConferenceSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            ConferenceSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of conferences within an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidConferencesmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidConferencesmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get the properties of a Connect App.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ConnectAppSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ConnectAppSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            ConnectAppSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Tries to update the Connect App's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ConnectAppSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ConnectAppSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            ConnectAppSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of Connect App resource representations, each representing a Connect App in your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidConnectAppsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidConnectAppsmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Release this phone number from your account. Twilio will no longer answer calls to this number, and you will stop being billed the monthly phone number fee. The phone number will eventually be recycled and potentially given to another customer, so use with care. If you make a mistake, contac us. We may be able to give you the number back.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IncomingPhoneNumberSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IncomingPhoneNumberSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(
            AccountSid,
            mediaTypeExtension,
            IncomingPhoneNumberSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get info about incoming call's phone number.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IncomingPhoneNumberSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IncomingPhoneNumberSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            IncomingPhoneNumberSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IncomingPhoneNumberSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IncomingPhoneNumberSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            IncomingPhoneNumberSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IncomingPhoneNumberSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IncomingPhoneNumberSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(
            AccountSid,
            mediaTypeExtension,
            IncomingPhoneNumberSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of local <IncomingPhoneNumber> elements, each representing a local (not toll-free) phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out toll-free numbers.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of local <IncomingPhoneNumber> elements, each representing a mobile phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out local and toll free numbers.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of local <IncomingPhoneNumber> elements, each representing a toll-free phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out all numbers that aren't toll-free.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of IncomingPhoneNumber resource representations, each representing a phone number given to your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Purchases a new phone number for your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number. To find an available phone number to POST, use the subresources of the AvailablePhoneNumbers list resource.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Without an extension, the media is returned using the mime-type provided when the media was generated.
     * @param {string} AccountSid
     * @param {string} MessageSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} MediaSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(
        AccountSid: string,
        MessageSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        MediaSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(
            AccountSid,
            MessageSid,
            mediaTypeExtension,
            MediaSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of media associated with your message.
     * @param {string} AccountSid
     * @param {string} MessageSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(
        AccountSid: string,
        MessageSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(
            AccountSid,
            MessageSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a single message specified by the provided {MessageSid}.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} MessageSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        MessageSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            MessageSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of messages associated with your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidMessagesmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidMessagesmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * To send a new outgoing message, make an HTTP POST to your Messages list resource URI
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} To The destination phone number. Format with a &#39;+&#39; and country code e.g., +16175551212 (E.164 format).
     * @param {string} [From] A Twilio phone number (in E.164 format) or alphanumeric sender ID enabled for the type of message you wish to send. Phone numbers or short codes purchased from Twilio work here. You cannot (for example) spoof messages from your own cell phone number.
     * @param {string} [MessagingServiceSid] The 34 character unique id of the Messaging Service you want to associate with this Message. Set this parameter to use the Messaging Service Settings and Copilot Features you have configured. When only this parameter is set, Twilio will use your enabled Copilot Features to select the From phone number for delivery.
     * @param {string} [Body] The text of the message you want to send, limited to 1600 characters.
     * @param {string} [MediaUrl] The URL of the media you wish to send out with the message. gif , png and jpeg content is currently supported and will be formatted correctly on the recipient&#39;s device. Other types are also accepted by the API. The media size limit is 5MB. If you wish to send more than one image in the message body, please provide multiple MediaUrls values in the POST request. You may include up to 10 MediaUrls per message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidMessagesmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        To: string,
        From?: string,
        MessagingServiceSid?: string,
        Body?: string,
        MediaUrl?: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidMessagesmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            To,
            From,
            MessagingServiceSid,
            Body,
            MediaUrl,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Deletes the notification identified by {NotificationSid} from an account's log.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} NotificationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        NotificationSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(
            AccountSid,
            mediaTypeExtension,
            NotificationSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get a notification entry.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} NotificationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        NotificationSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            NotificationSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of notifications generated for an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidNotificationsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidNotificationsmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Deletes the caller ID from the account. Returns an HTTP 204 response if successful, with no body.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} OutgoingCallerIdSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        OutgoingCallerIdSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(
            AccountSid,
            mediaTypeExtension,
            OutgoingCallerIdSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get the set of an account's verified phone numbers.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} OutgoingCallerIdSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        OutgoingCallerIdSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            OutgoingCallerIdSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Updates the caller id, and returns the updated resource if successful.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} OutgoingCallerIdSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        OutgoingCallerIdSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            OutgoingCallerIdSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Updates the caller id, and returns the updated resource if successful.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} OutgoingCallerIdSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        OutgoingCallerIdSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(
            AccountSid,
            mediaTypeExtension,
            OutgoingCallerIdSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of OutgoingCallerId resource representations, each representing a Caller ID number valid for an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Adds a new CallerID to your account.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get a specific member.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(
        AccountSid: string,
        QueueSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(
            AccountSid,
            QueueSid,
            mediaTypeExtension,
            CallSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When redirecting a member of a queue addressed by CallSid, only the first request will succeed and return a 200 response code. A second request will fail and return an appropriate 400 response code.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(
        AccountSid: string,
        QueueSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CallSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(
            AccountSid,
            QueueSid,
            mediaTypeExtension,
            CallSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get a front member.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(
        AccountSid: string,
        QueueSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(
            AccountSid,
            QueueSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When dequeuing the 'Front' of the queue, the next call in the queue will be redirected.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(
        AccountSid: string,
        QueueSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(
            AccountSid,
            QueueSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns the list of members in the queue identified by {QueueSid}.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(
        AccountSid: string,
        QueueSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(
            AccountSid,
            QueueSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * The DELETE method allows you to remove a Queue. Only empty queues are deletable.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} QueueSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        QueueSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(
            AccountSid,
            mediaTypeExtension,
            QueueSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get resource's individual Queue instance.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} QueueSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        QueueSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            QueueSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * This POST request allows you to change the FriendlyName or MaxSize.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} QueueSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        QueueSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            QueueSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of queues within an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidQueuesmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidQueuesmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Create a new Queue resource.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidQueuesmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidQueuesmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a set of Transcription resource representations that includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} RecordingSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        RecordingSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            RecordingSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Deletes a recording  from your account.
     * @param {string} AccountSid
     * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
     * @param {string} RecordingSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.wav' | '.mp3',
        RecordingSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(
            AccountSid,
            mediaTypeExtension,
            RecordingSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns one of several representations: Without an extension, or with a \".wav\", a binary WAV audio file is returned with mime-type \"audio/x-wav\". Appending \".mp3\" to the URI returns a binary MP3 audio file with mime-type type \"audio/mpeg\". Appending \".xml\" to the URI returns a XML representation.
     * @param {string} AccountSid
     * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
     * @param {string} RecordingSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.wav' | '.mp3',
        RecordingSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            RecordingSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidRecordingsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidRecordingsmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Remove a Credential from a CredentialList.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CredentialSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(
        AccountSid: string,
        CLSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CredentialSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(
            AccountSid,
            CLSid,
            mediaTypeExtension,
            CredentialSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get a specific Credential in a list. Though a password is stored for each username in your list, the password is not returned to protect your password. If you cannot remember your password, you will need to POST to this resource to update it.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CredentialSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(
        AccountSid: string,
        CLSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CredentialSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(
            AccountSid,
            CLSid,
            mediaTypeExtension,
            CredentialSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Change the password of a Credential record.  If the change is successful, Twilio will respond with the Credential record but will not include the password in the response.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CredentialSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(
        AccountSid: string,
        CLSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CredentialSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(
            AccountSid,
            CLSid,
            mediaTypeExtension,
            CredentialSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get the list of Credentials in a CredentialList. The passwords for the Credentials are intentionally not returned so as to protect them.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(
        AccountSid: string,
        CLSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(
            AccountSid,
            CLSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Add a Credential to the CredentialList.  When creating a Credential, you will POST both a username and password, but only receive the username back in the response. The password is intentionally not returned so as to protect it.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(
        AccountSid: string,
        CLSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(
            AccountSid,
            CLSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Delete a CredentialList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CLSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CLSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(
            AccountSid,
            mediaTypeExtension,
            CLSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get a credential list instance resource
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CLSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CLSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            CLSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Change the FriendlyName of the list
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CLSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CLSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            CLSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Gets a list of Credential Lists for an account
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Create a new Credential List.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Remove a CredentialListMapping from a domain
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CLSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        CLSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(
            AccountSid,
            SipDomainSid,
            mediaTypeExtension,
            CLSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get the user lists mapped to this domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(
            AccountSid,
            SipDomainSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Map a CredentialList to the domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(
            AccountSid,
            SipDomainSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Remove a mapping from this domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ALSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ALSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(
            AccountSid,
            SipDomainSid,
            mediaTypeExtension,
            ALSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Return a specific IpAccessControlListMapping instance by Sid.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ALSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ALSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(
            AccountSid,
            SipDomainSid,
            mediaTypeExtension,
            ALSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Return the IpAccessControlListMappings that are associated to this domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(
            AccountSid,
            SipDomainSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Map an IpAccessControlList to this domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(
        AccountSid: string,
        SipDomainSid: string,
        mediaTypeExtension: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(
            AccountSid,
            SipDomainSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Delete a domain. If you have created subdomains of a domain, you will not be able to delete the domain until you first delete all subdomains of it.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} SipDomainSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        SipDomainSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(
            AccountSid,
            mediaTypeExtension,
            SipDomainSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Return a specific instance by Sid.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} SipDomainSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        SipDomainSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            SipDomainSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Update the attributes of a domain.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} SipDomainSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        SipDomainSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            SipDomainSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a paged list of the domains for an account.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPDomainsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPDomainsmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Creates a new Domain and returns its instance resource. You must pick a unique domain name that ends in \".sip.twilio.com\". After creating a Domain, you must map it to an authentication method before the domain is ready to receive traffic.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPDomainsmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPDomainsmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Deletes an IP address entry from the list.
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAddressSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(
        AccountSid: string,
        IpAccessControlListSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IpAddressSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(
            AccountSid,
            IpAccessControlListSid,
            mediaTypeExtension,
            IpAddressSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Return a single IP Address resource.
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAddressSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(
        AccountSid: string,
        IpAccessControlListSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IpAddressSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(
            AccountSid,
            IpAccessControlListSid,
            mediaTypeExtension,
            IpAddressSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Change the description or IP address of a given IpAddress instance resource
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAddressSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(
        AccountSid: string,
        IpAccessControlListSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IpAddressSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(
            AccountSid,
            IpAccessControlListSid,
            mediaTypeExtension,
            IpAddressSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * List the IP Addresses contained in this list.
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(
        AccountSid: string,
        IpAccessControlListSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(
            AccountSid,
            IpAccessControlListSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Add an IP Address to the list with a description.
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(
        AccountSid: string,
        IpAccessControlListSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(
            AccountSid,
            IpAccessControlListSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Delete an IpAccessControlList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAccessControlListSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IpAccessControlListSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(
            AccountSid,
            mediaTypeExtension,
            IpAccessControlListSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Return a specific IpAccessControlList resource.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAccessControlListSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IpAccessControlListSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            IpAccessControlListSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Rename an IpAccessControlList.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAccessControlListSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        IpAccessControlListSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            IpAccessControlListSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Return a paged list of all IpAccessControlLists under this account.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Create a new IpAccessControlList resource.  When created, the list will contain no IP addresses. You will need to add IP addresses to the list for it to be active. To add IP addresses, you will need to POST to the IpAddresses List subresource.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Get a single message.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ShortCodeSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ShortCodeSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            ShortCodeSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Tries to update the shortcode's properties, and returns the updated resource representation if successful.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ShortCodeSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        ShortCodeSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            ShortCodeSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of ShortCode resource representations, each representing a short code within your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidSMSShortCodesmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidSMSShortCodesmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Deletes a transcription from your account.
     * @param {string} AccountSid
     * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} TranscriptionSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.json' | '.csv' | '.html' | '.txt' | '.xml',
        TranscriptionSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(
            AccountSid,
            mediaTypeExtension,
            TranscriptionSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a single Transcription resource representation identified by the given {TranscriptionSid}. By default Twilio will respond with the XML metadata for the Transcription. If you append \".txt\" to the end of the Transcription resource's URI Twilio will just return you the transcription tex.
     * @param {string} AccountSid
     * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} TranscriptionSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.json' | '.csv' | '.html' | '.txt' | '.xml',
        TranscriptionSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            TranscriptionSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a set of Transcription resource representations that includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidTranscriptionsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidTranscriptionsmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns UsageRecords for all usage categories for a specified period.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {'Daily' | 'Monthly' | 'Yearly' | 'AllTime' | 'Today' | 'Yesterday' | 'ThisMonth' | 'LastMonth'} Subresource |Subresource|Description| |---|---| |Daily|Return multiple UsageRecords for each usage category, each representing usage over a daily time-interval.| |Monthly|Return multiple UsageRecords for each usage category, each representing usage over a monthly time-interval.| |Yearly|Return multple UsageRecords for each usage category, each representing usage over a yearly time-interval.| |AllTime|  Return a single UsageRecord for each usage category, each representing usage over the date-range specified. This is the same as the root /Usage/Records.| |Today|Return a single UsageRecord per usage category, for today&#39;s usage only.| ||Yesterday|Return a single UsageRecord per usage category, for yesterday&#39;s usage only.| |ThisMonth|Return a single UsageRecord per usage category, for this month&#39;s usage only.| |LastMonth|Return a single UsageRecord per usage category, for last month&#39;s usage only.|
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        Subresource:
            | 'Daily'
            | 'Monthly'
            | 'Yearly'
            | 'AllTime'
            | 'Today'
            | 'Yesterday'
            | 'ThisMonth'
            | 'LastMonth',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            Subresource,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns UsageRecords for all usage categories. The list includes paging information. By default, the UsageRecords resource will return one UsageRecord for each Category, representing all usage accrued all-time for the account. You can filter the usage Category or change the date-range over which usage is counted using optional GET query parameters.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidUsageRecordsmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidUsageRecordsmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Delete this UsageTrigger.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} UsageTriggerSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        UsageTriggerSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(
            AccountSid,
            mediaTypeExtension,
            UsageTriggerSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a repesentation of the UsageTrigger.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} UsageTriggerSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        UsageTriggerSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            UsageTriggerSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Tries to update the UsageTrigger's properties, and returns the updated resource representation if successful.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} UsageTriggerSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        UsageTriggerSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            UsageTriggerSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a list of UsageTrigger resource representations. The list includes paging information. By default, all UsageTriggers are returned. You can filter the list by specifying one or more query parameters. Note that the query parameters are case-sensitive
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidUsageTriggersmediaTypeExtensionGet(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidUsageTriggersmediaTypeExtensionGet(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Creates a new UsageTrigger. Each account can create up to 1,000 UsageTriggers. Currently, UsageTriggers that are no longer active are not deleted automatically. Use DELETE to delete triggers you no longer need.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidUsageTriggersmediaTypeExtensionPost(
        AccountSid: string,
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidUsageTriggersmediaTypeExtensionPost(
            AccountSid,
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Returns a representation of an account.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} AccountSid A 34 character string that uniquely identifies this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidmediaTypeExtensionGet(
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        AccountSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidmediaTypeExtensionGet(
            mediaTypeExtension,
            AccountSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Allows you to modify the properties of an account.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} AccountSid A 34 character string that uniquely identifies this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidmediaTypeExtensionPost(
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        AccountSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidmediaTypeExtensionPost(
            mediaTypeExtension,
            AccountSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Allows you to modify the properties of an account.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} AccountSid A 34 character string that uniquely identifies this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsAccountSidmediaTypeExtensionPut(
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        AccountSid: string,
        options?: any
    ) {
        return DefaultApiFp(
            this.configuration
        ).accountsAccountSidmediaTypeExtensionPut(
            mediaTypeExtension,
            AccountSid,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Retrieve a list of the Account resources belonging to the account used to make the API request. This list will include that Account as well.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsmediaTypeExtensionGet(
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(this.configuration).accountsmediaTypeExtensionGet(
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }

    /**
     * Create a new Account instance resource as a subaccount of the one used to make the request. See Creating Subaccounts for more information.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsmediaTypeExtensionPost(
        mediaTypeExtension: '.xml' | '.json' | '.csv' | '.html',
        options?: any
    ) {
        return DefaultApiFp(this.configuration).accountsmediaTypeExtensionPost(
            mediaTypeExtension,
            options
        )(this.fetch, this.basePath)
    }
}
