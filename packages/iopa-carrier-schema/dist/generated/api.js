"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Twilio
 * Enabling phones, VoIP, and messaging to be embedded into web, desktop, and mobile software.
 *
 * OpenAPI spec version: 2010-04-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiFetchParamCreator = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = void 0;
const url = require("url");
const portableFetch = require("portable-fetch");
const BASE_PATH = 'https://api.twilio.com/2010-04-01'.replace(/\/+$/, '');
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ',',
    ssv: ' ',
    tsv: '\t',
    pipes: '|',
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = portableFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
exports.RequiredError = RequiredError;
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
exports.DefaultApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete this application.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, ApplicationSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'ApplicationSid' is not null or undefined
            if (ApplicationSid === null || ApplicationSid === undefined) {
                throw new RequiredError('ApplicationSid', 'Required parameter ApplicationSid was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Applications/{ApplicationSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'ApplicationSid'}}`, encodeURIComponent(String(ApplicationSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get application instance resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ApplicationSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'ApplicationSid' is not null or undefined
            if (ApplicationSid === null || ApplicationSid === undefined) {
                throw new RequiredError('ApplicationSid', 'Required parameter ApplicationSid was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Applications/{ApplicationSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'ApplicationSid'}}`, encodeURIComponent(String(ApplicationSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tries to update the application's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ApplicationSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'ApplicationSid' is not null or undefined
            if (ApplicationSid === null || ApplicationSid === undefined) {
                throw new RequiredError('ApplicationSid', 'Required parameter ApplicationSid was null or undefined when calling accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Applications/{ApplicationSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'ApplicationSid'}}`, encodeURIComponent(String(ApplicationSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Application resource representations, each representing an application within your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidApplicationsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidApplicationsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Applications{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new application within your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidApplicationsmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidApplicationsmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Applications{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the properties of the authorized application.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'ConnectAppSid' is not null or undefined
            if (ConnectAppSid === null || ConnectAppSid === undefined) {
                throw new RequiredError('ConnectAppSid', 'Required parameter ConnectAppSid was null or undefined when calling accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/AuthorizedConnectApps/{ConnectAppSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'ConnectAppSid'}}`, encodeURIComponent(String(ConnectAppSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Connect App resource representations, each representing a Connect App you've authorized to access your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/AuthorizedConnectApps{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of local AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number tha is currently available for provisioning within your account.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet.');
            }
            // verify required parameter 'IsoCountryCode' is not null or undefined
            if (IsoCountryCode === null || IsoCountryCode === undefined) {
                throw new RequiredError('IsoCountryCode', 'Required parameter IsoCountryCode was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/AvailablePhoneNumbers/{IsoCountryCode}/Local{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'IsoCountryCode'}}`, encodeURIComponent(String(IsoCountryCode)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of mobile AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number that is currently available for provisioning within your account.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet.');
            }
            // verify required parameter 'IsoCountryCode' is not null or undefined
            if (IsoCountryCode === null || IsoCountryCode === undefined) {
                throw new RequiredError('IsoCountryCode', 'Required parameter IsoCountryCode was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/AvailablePhoneNumbers/{IsoCountryCode}/Mobile{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'IsoCountryCode'}}`, encodeURIComponent(String(IsoCountryCode)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of toll-free AvailablePhoneNumber elements that match the specified filters, each representing a phone number that is currently available for provisioning within your account. To provision an available phone number, POST the number to the IncomingPhoneNumbers resource.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet.');
            }
            // verify required parameter 'IsoCountryCode' is not null or undefined
            if (IsoCountryCode === null || IsoCountryCode === undefined) {
                throw new RequiredError('IsoCountryCode', 'Required parameter IsoCountryCode was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/AvailablePhoneNumbers/{IsoCountryCode}/TollFree{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'IsoCountryCode'}}`, encodeURIComponent(String(IsoCountryCode)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all AvailablePhoneNumber subresources for your account by ISO Country. For full information about our phone number support, see our Phone Number CSV (http://www.twilio.com/resources/rates/international-phone-number-rates.csv).
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/AvailablePhoneNumbers{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of notifications generated for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {string} CallSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet.');
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError('CallSid', 'Required parameter CallSid was null or undefined when calling accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Calls/{CallSid}/Notifications{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
         * @param {string} AccountSid
         * @param {string} CallSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet.');
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError('CallSid', 'Required parameter CallSid was null or undefined when calling accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Calls/{CallSid}/Recordings{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the single Call resource identified by {CallSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CallSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidCallsCallSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidCallsCallSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError('CallSid', 'Required parameter CallSid was null or undefined when calling accountsAccountSidCallsCallSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Calls/{CallSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify a phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CallSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidCallsCallSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidCallsCallSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError('CallSid', 'Required parameter CallSid was null or undefined when calling accountsAccountSidCallsCallSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Calls/{CallSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of phone calls made to and from the account identified by {AccountSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidCallsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidCallsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Calls{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To make a call, make an HTTP POST request. Initiate a new phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidCallsmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidCallsmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Calls{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Kick this participant from the conference.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'ConferenceSid' is not null or undefined
            if (ConferenceSid === null || ConferenceSid === undefined) {
                throw new RequiredError('ConferenceSid', 'Required parameter ConferenceSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError('CallSid', 'Required parameter CallSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'ConferenceSid'}}`, encodeURIComponent(String(ConferenceSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a representation of this participant.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'ConferenceSid' is not null or undefined
            if (ConferenceSid === null || ConferenceSid === undefined) {
                throw new RequiredError('ConferenceSid', 'Required parameter ConferenceSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError('CallSid', 'Required parameter CallSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'ConferenceSid'}}`, encodeURIComponent(String(ConferenceSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the status of a participant.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'ConferenceSid' is not null or undefined
            if (ConferenceSid === null || ConferenceSid === undefined) {
                throw new RequiredError('ConferenceSid', 'Required parameter ConferenceSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError('CallSid', 'Required parameter CallSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'ConferenceSid'}}`, encodeURIComponent(String(ConferenceSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of participants in the conference identified by {ConferenceSid}.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet.');
            }
            // verify required parameter 'ConferenceSid' is not null or undefined
            if (ConferenceSid === null || ConferenceSid === undefined) {
                throw new RequiredError('ConferenceSid', 'Required parameter ConferenceSid was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'ConferenceSid'}}`, encodeURIComponent(String(ConferenceSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a representation of the conference identified by {ConferenceSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConferenceSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConferenceSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'ConferenceSid' is not null or undefined
            if (ConferenceSid === null || ConferenceSid === undefined) {
                throw new RequiredError('ConferenceSid', 'Required parameter ConferenceSid was null or undefined when calling accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Conferences/{ConferenceSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'ConferenceSid'}}`, encodeURIComponent(String(ConferenceSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of conferences within an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidConferencesmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConferencesmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Conferences{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the properties of a Connect App.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'ConnectAppSid' is not null or undefined
            if (ConnectAppSid === null || ConnectAppSid === undefined) {
                throw new RequiredError('ConnectAppSid', 'Required parameter ConnectAppSid was null or undefined when calling accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/ConnectApps/{ConnectAppSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'ConnectAppSid'}}`, encodeURIComponent(String(ConnectAppSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tries to update the Connect App's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ConnectAppSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'ConnectAppSid' is not null or undefined
            if (ConnectAppSid === null || ConnectAppSid === undefined) {
                throw new RequiredError('ConnectAppSid', 'Required parameter ConnectAppSid was null or undefined when calling accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/ConnectApps/{ConnectAppSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'ConnectAppSid'}}`, encodeURIComponent(String(ConnectAppSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Connect App resource representations, each representing a Connect App in your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidConnectAppsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidConnectAppsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/ConnectApps{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Release this phone number from your account. Twilio will no longer answer calls to this number, and you will stop being billed the monthly phone number fee. The phone number will eventually be recycled and potentially given to another customer, so use with care. If you make a mistake, contac us. We may be able to give you the number back.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'IncomingPhoneNumberSid' is not null or undefined
            if (IncomingPhoneNumberSid === null ||
                IncomingPhoneNumberSid === undefined) {
                throw new RequiredError('IncomingPhoneNumberSid', 'Required parameter IncomingPhoneNumberSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/{IncomingPhoneNumberSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'IncomingPhoneNumberSid'}}`, encodeURIComponent(String(IncomingPhoneNumberSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get info about incoming call's phone number.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'IncomingPhoneNumberSid' is not null or undefined
            if (IncomingPhoneNumberSid === null ||
                IncomingPhoneNumberSid === undefined) {
                throw new RequiredError('IncomingPhoneNumberSid', 'Required parameter IncomingPhoneNumberSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/{IncomingPhoneNumberSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'IncomingPhoneNumberSid'}}`, encodeURIComponent(String(IncomingPhoneNumberSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'IncomingPhoneNumberSid' is not null or undefined
            if (IncomingPhoneNumberSid === null ||
                IncomingPhoneNumberSid === undefined) {
                throw new RequiredError('IncomingPhoneNumberSid', 'Required parameter IncomingPhoneNumberSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/{IncomingPhoneNumberSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'IncomingPhoneNumberSid'}}`, encodeURIComponent(String(IncomingPhoneNumberSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut.');
            }
            // verify required parameter 'IncomingPhoneNumberSid' is not null or undefined
            if (IncomingPhoneNumberSid === null ||
                IncomingPhoneNumberSid === undefined) {
                throw new RequiredError('IncomingPhoneNumberSid', 'Required parameter IncomingPhoneNumberSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut.');
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/{IncomingPhoneNumberSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'IncomingPhoneNumberSid'}}`, encodeURIComponent(String(IncomingPhoneNumberSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a local (not toll-free) phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out toll-free numbers.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/Local{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/Local{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a mobile phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out local and toll free numbers.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a toll-free phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out all numbers that aren't toll-free.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of IncomingPhoneNumber resource representations, each representing a phone number given to your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Purchases a new phone number for your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number. To find an available phone number to POST, use the subresources of the AvailablePhoneNumbers list resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/IncomingPhoneNumbers{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Without an extension, the media is returned using the mime-type provided when the media was generated.
         * @param {string} AccountSid
         * @param {string} MessageSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} MediaSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, MediaSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'MessageSid' is not null or undefined
            if (MessageSid === null || MessageSid === undefined) {
                throw new RequiredError('MessageSid', 'Required parameter MessageSid was null or undefined when calling accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'MediaSid' is not null or undefined
            if (MediaSid === null || MediaSid === undefined) {
                throw new RequiredError('MediaSid', 'Required parameter MediaSid was null or undefined when calling accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{MediaSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'MessageSid'}}`, encodeURIComponent(String(MessageSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'MediaSid'}}`, encodeURIComponent(String(MediaSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of media associated with your message.
         * @param {string} AccountSid
         * @param {string} MessageSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet.');
            }
            // verify required parameter 'MessageSid' is not null or undefined
            if (MessageSid === null || MessageSid === undefined) {
                throw new RequiredError('MessageSid', 'Required parameter MessageSid was null or undefined when calling accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Messages/{MessageSid}/Media{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'MessageSid'}}`, encodeURIComponent(String(MessageSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single message specified by the provided {MessageSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} MessageSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, MessageSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidMessagesMessageSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidMessagesMessageSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'MessageSid' is not null or undefined
            if (MessageSid === null || MessageSid === undefined) {
                throw new RequiredError('MessageSid', 'Required parameter MessageSid was null or undefined when calling accountsAccountSidMessagesMessageSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Messages/{MessageSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'MessageSid'}}`, encodeURIComponent(String(MessageSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of messages associated with your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidMessagesmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidMessagesmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Messages{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To send a new outgoing message, make an HTTP POST to your Messages list resource URI
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} To The destination phone number. Format with a &#39;+&#39; and country code e.g., +16175551212 (E.164 format).
         * @param {string} [From] A Twilio phone number (in E.164 format) or alphanumeric sender ID enabled for the type of message you wish to send. Phone numbers or short codes purchased from Twilio work here. You cannot (for example) spoof messages from your own cell phone number.
         * @param {string} [MessagingServiceSid] The 34 character unique id of the Messaging Service you want to associate with this Message. Set this parameter to use the Messaging Service Settings and Copilot Features you have configured. When only this parameter is set, Twilio will use your enabled Copilot Features to select the From phone number for delivery.
         * @param {string} [Body] The text of the message you want to send, limited to 1600 characters.
         * @param {string} [MediaUrl] The URL of the media you wish to send out with the message. gif , png and jpeg content is currently supported and will be formatted correctly on the recipient&#39;s device. Other types are also accepted by the API. The media size limit is 5MB. If you wish to send more than one image in the message body, please provide multiple MediaUrls values in the POST request. You may include up to 10 MediaUrls per message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, To, From, MessagingServiceSid, Body, MediaUrl, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidMessagesmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidMessagesmediaTypeExtensionPost.');
            }
            // verify required parameter 'To' is not null or undefined
            if (To === null || To === undefined) {
                throw new RequiredError('To', 'Required parameter To was null or undefined when calling accountsAccountSidMessagesmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Messages{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            if (To !== undefined) {
                localVarFormParams.set('To', To);
            }
            if (From !== undefined) {
                localVarFormParams.set('From', From);
            }
            if (MessagingServiceSid !== undefined) {
                localVarFormParams.set('MessagingServiceSid', MessagingServiceSid);
            }
            if (Body !== undefined) {
                localVarFormParams.set('Body', Body);
            }
            if (MediaUrl !== undefined) {
                localVarFormParams.set('MediaUrl', MediaUrl);
            }
            localVarHeaderParameter['Content-Type'] =
                'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the notification identified by {NotificationSid} from an account's log.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} NotificationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, NotificationSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'NotificationSid' is not null or undefined
            if (NotificationSid === null || NotificationSid === undefined) {
                throw new RequiredError('NotificationSid', 'Required parameter NotificationSid was null or undefined when calling accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Notifications/{NotificationSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'NotificationSid'}}`, encodeURIComponent(String(NotificationSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a notification entry.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} NotificationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, NotificationSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'NotificationSid' is not null or undefined
            if (NotificationSid === null || NotificationSid === undefined) {
                throw new RequiredError('NotificationSid', 'Required parameter NotificationSid was null or undefined when calling accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Notifications/{NotificationSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'NotificationSid'}}`, encodeURIComponent(String(NotificationSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of notifications generated for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidNotificationsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidNotificationsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Notifications{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the caller ID from the account. Returns an HTTP 204 response if successful, with no body.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'OutgoingCallerIdSid' is not null or undefined
            if (OutgoingCallerIdSid === null ||
                OutgoingCallerIdSid === undefined) {
                throw new RequiredError('OutgoingCallerIdSid', 'Required parameter OutgoingCallerIdSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/OutgoingCallerIds/{OutgoingCallerIdSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'OutgoingCallerIdSid'}}`, encodeURIComponent(String(OutgoingCallerIdSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the set of an account's verified phone numbers.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'OutgoingCallerIdSid' is not null or undefined
            if (OutgoingCallerIdSid === null ||
                OutgoingCallerIdSid === undefined) {
                throw new RequiredError('OutgoingCallerIdSid', 'Required parameter OutgoingCallerIdSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/OutgoingCallerIds/{OutgoingCallerIdSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'OutgoingCallerIdSid'}}`, encodeURIComponent(String(OutgoingCallerIdSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the caller id, and returns the updated resource if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'OutgoingCallerIdSid' is not null or undefined
            if (OutgoingCallerIdSid === null ||
                OutgoingCallerIdSid === undefined) {
                throw new RequiredError('OutgoingCallerIdSid', 'Required parameter OutgoingCallerIdSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/OutgoingCallerIds/{OutgoingCallerIdSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'OutgoingCallerIdSid'}}`, encodeURIComponent(String(OutgoingCallerIdSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the caller id, and returns the updated resource if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut.');
            }
            // verify required parameter 'OutgoingCallerIdSid' is not null or undefined
            if (OutgoingCallerIdSid === null ||
                OutgoingCallerIdSid === undefined) {
                throw new RequiredError('OutgoingCallerIdSid', 'Required parameter OutgoingCallerIdSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut.');
            }
            const localVarPath = `/Accounts/{AccountSid}/OutgoingCallerIds/{OutgoingCallerIdSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'OutgoingCallerIdSid'}}`, encodeURIComponent(String(OutgoingCallerIdSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of OutgoingCallerId resource representations, each representing a Caller ID number valid for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/OutgoingCallerIds{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new CallerID to your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/OutgoingCallerIds{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific member.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, CallSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError('QueueSid', 'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError('CallSid', 'Required parameter CallSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'QueueSid'}}`, encodeURIComponent(String(QueueSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When redirecting a member of a queue addressed by CallSid, only the first request will succeed and return a 200 response code. A second request will fail and return an appropriate 400 response code.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, CallSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError('QueueSid', 'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'CallSid' is not null or undefined
            if (CallSid === null || CallSid === undefined) {
                throw new RequiredError('CallSid', 'Required parameter CallSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'QueueSid'}}`, encodeURIComponent(String(QueueSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CallSid'}}`, encodeURIComponent(String(CallSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a front member.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet.');
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError('QueueSid', 'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}/Members/Front{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'QueueSid'}}`, encodeURIComponent(String(QueueSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When dequeuing the 'Front' of the queue, the next call in the queue will be redirected.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost.');
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError('QueueSid', 'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}/Members/Front{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'QueueSid'}}`, encodeURIComponent(String(QueueSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of members in the queue identified by {QueueSid}.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet.');
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError('QueueSid', 'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}/Members{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'QueueSid'}}`, encodeURIComponent(String(QueueSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The DELETE method allows you to remove a Queue. Only empty queues are deletable.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, QueueSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError('QueueSid', 'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'QueueSid'}}`, encodeURIComponent(String(QueueSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get resource's individual Queue instance.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, QueueSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError('QueueSid', 'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'QueueSid'}}`, encodeURIComponent(String(QueueSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This POST request allows you to change the FriendlyName or MaxSize.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, QueueSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'QueueSid' is not null or undefined
            if (QueueSid === null || QueueSid === undefined) {
                throw new RequiredError('QueueSid', 'Required parameter QueueSid was null or undefined when calling accountsAccountSidQueuesQueueSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues/{QueueSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'QueueSid'}}`, encodeURIComponent(String(QueueSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of queues within an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Queue resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidQueuesmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidQueuesmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Queues{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a set of Transcription resource representations that includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet.');
            }
            // verify required parameter 'RecordingSid' is not null or undefined
            if (RecordingSid === null || RecordingSid === undefined) {
                throw new RequiredError('RecordingSid', 'Required parameter RecordingSid was null or undefined when calling accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'RecordingSid'}}`, encodeURIComponent(String(RecordingSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a recording  from your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, RecordingSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'RecordingSid' is not null or undefined
            if (RecordingSid === null || RecordingSid === undefined) {
                throw new RequiredError('RecordingSid', 'Required parameter RecordingSid was null or undefined when calling accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Recordings/{RecordingSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'RecordingSid'}}`, encodeURIComponent(String(RecordingSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns one of several representations: Without an extension, or with a \".wav\", a binary WAV audio file is returned with mime-type \"audio/x-wav\". Appending \".mp3\" to the URI returns a binary MP3 audio file with mime-type type \"audio/mpeg\". Appending \".xml\" to the URI returns a XML representation.
         * @param {string} AccountSid
         * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'RecordingSid' is not null or undefined
            if (RecordingSid === null || RecordingSid === undefined) {
                throw new RequiredError('RecordingSid', 'Required parameter RecordingSid was null or undefined when calling accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Recordings/{RecordingSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'RecordingSid'}}`, encodeURIComponent(String(RecordingSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidRecordingsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidRecordingsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Recordings{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a Credential from a CredentialList.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError('CLSid', 'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'CredentialSid' is not null or undefined
            if (CredentialSid === null || CredentialSid === undefined) {
                throw new RequiredError('CredentialSid', 'Required parameter CredentialSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}/Credentials/{CredentialSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CredentialSid'}}`, encodeURIComponent(String(CredentialSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific Credential in a list. Though a password is stored for each username in your list, the password is not returned to protect your password. If you cannot remember your password, you will need to POST to this resource to update it.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError('CLSid', 'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'CredentialSid' is not null or undefined
            if (CredentialSid === null || CredentialSid === undefined) {
                throw new RequiredError('CredentialSid', 'Required parameter CredentialSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}/Credentials/{CredentialSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CredentialSid'}}`, encodeURIComponent(String(CredentialSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change the password of a Credential record.  If the change is successful, Twilio will respond with the Credential record but will not include the password in the response.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError('CLSid', 'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'CredentialSid' is not null or undefined
            if (CredentialSid === null || CredentialSid === undefined) {
                throw new RequiredError('CredentialSid', 'Required parameter CredentialSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}/Credentials/{CredentialSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CredentialSid'}}`, encodeURIComponent(String(CredentialSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Credentials in a CredentialList. The passwords for the Credentials are intentionally not returned so as to protect them.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet.');
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError('CLSid', 'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}/Credentials{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a Credential to the CredentialList.  When creating a Credential, you will POST both a username and password, but only receive the username back in the response. The password is intentionally not returned so as to protect it.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost.');
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError('CLSid', 'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}/Credentials{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a CredentialList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, CLSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError('CLSid', 'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a credential list instance resource
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CLSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError('CLSid', 'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change the FriendlyName of the list
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CLSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError('CLSid', 'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists/{CLSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of Credential Lists for an account
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Credential List.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPCredentialListsmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPCredentialListsmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/CredentialLists{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a CredentialListMapping from a domain
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, CLSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError('SipDomainSid', 'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'CLSid' is not null or undefined
            if (CLSid === null || CLSid === undefined) {
                throw new RequiredError('CLSid', 'Required parameter CLSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/CredentialListMappings/{CLSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'SipDomainSid'}}`, encodeURIComponent(String(SipDomainSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'CLSid'}}`, encodeURIComponent(String(CLSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the user lists mapped to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet.');
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError('SipDomainSid', 'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/CredentialListMappings{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'SipDomainSid'}}`, encodeURIComponent(String(SipDomainSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Map a CredentialList to the domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost.');
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError('SipDomainSid', 'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/CredentialListMappings{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'SipDomainSid'}}`, encodeURIComponent(String(SipDomainSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a mapping from this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ALSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError('SipDomainSid', 'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'ALSid' is not null or undefined
            if (ALSid === null || ALSid === undefined) {
                throw new RequiredError('ALSid', 'Required parameter ALSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/IpAccessControlListMappings/{ALSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'SipDomainSid'}}`, encodeURIComponent(String(SipDomainSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'ALSid'}}`, encodeURIComponent(String(ALSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a specific IpAccessControlListMapping instance by Sid.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ALSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError('SipDomainSid', 'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'ALSid' is not null or undefined
            if (ALSid === null || ALSid === undefined) {
                throw new RequiredError('ALSid', 'Required parameter ALSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/IpAccessControlListMappings/{ALSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'SipDomainSid'}}`, encodeURIComponent(String(SipDomainSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'ALSid'}}`, encodeURIComponent(String(ALSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the IpAccessControlListMappings that are associated to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet.');
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError('SipDomainSid', 'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/IpAccessControlListMappings{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'SipDomainSid'}}`, encodeURIComponent(String(SipDomainSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Map an IpAccessControlList to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost.');
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError('SipDomainSid', 'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}/IpAccessControlListMappings{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'SipDomainSid'}}`, encodeURIComponent(String(SipDomainSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a domain. If you have created subdomains of a domain, you will not be able to delete the domain until you first delete all subdomains of it.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, SipDomainSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError('SipDomainSid', 'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'SipDomainSid'}}`, encodeURIComponent(String(SipDomainSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a specific instance by Sid.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, SipDomainSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError('SipDomainSid', 'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'SipDomainSid'}}`, encodeURIComponent(String(SipDomainSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the attributes of a domain.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, SipDomainSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'SipDomainSid' is not null or undefined
            if (SipDomainSid === null || SipDomainSid === undefined) {
                throw new RequiredError('SipDomainSid', 'Required parameter SipDomainSid was null or undefined when calling accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains/{SipDomainSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'SipDomainSid'}}`, encodeURIComponent(String(SipDomainSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paged list of the domains for an account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new Domain and returns its instance resource. You must pick a unique domain name that ends in \".sip.twilio.com\". After creating a Domain, you must map it to an authentication method before the domain is ready to receive traffic.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPDomainsmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPDomainsmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/Domains{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an IP address entry from the list.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined) {
                throw new RequiredError('IpAccessControlListSid', 'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'IpAddressSid' is not null or undefined
            if (IpAddressSid === null || IpAddressSid === undefined) {
                throw new RequiredError('IpAddressSid', 'Required parameter IpAddressSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{IpAddressSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'IpAccessControlListSid'}}`, encodeURIComponent(String(IpAccessControlListSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'IpAddressSid'}}`, encodeURIComponent(String(IpAddressSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a single IP Address resource.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined) {
                throw new RequiredError('IpAccessControlListSid', 'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'IpAddressSid' is not null or undefined
            if (IpAddressSid === null || IpAddressSid === undefined) {
                throw new RequiredError('IpAddressSid', 'Required parameter IpAddressSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{IpAddressSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'IpAccessControlListSid'}}`, encodeURIComponent(String(IpAccessControlListSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'IpAddressSid'}}`, encodeURIComponent(String(IpAddressSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change the description or IP address of a given IpAddress instance resource
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined) {
                throw new RequiredError('IpAccessControlListSid', 'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'IpAddressSid' is not null or undefined
            if (IpAddressSid === null || IpAddressSid === undefined) {
                throw new RequiredError('IpAddressSid', 'Required parameter IpAddressSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{IpAddressSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'IpAccessControlListSid'}}`, encodeURIComponent(String(IpAccessControlListSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'IpAddressSid'}}`, encodeURIComponent(String(IpAddressSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the IP Addresses contained in this list.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet.');
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined) {
                throw new RequiredError('IpAccessControlListSid', 'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'IpAccessControlListSid'}}`, encodeURIComponent(String(IpAccessControlListSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an IP Address to the list with a description.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost.');
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined) {
                throw new RequiredError('IpAccessControlListSid', 'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'IpAccessControlListSid'}}`, encodeURIComponent(String(IpAccessControlListSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an IpAccessControlList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IpAccessControlListSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined) {
                throw new RequiredError('IpAccessControlListSid', 'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'IpAccessControlListSid'}}`, encodeURIComponent(String(IpAccessControlListSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a specific IpAccessControlList resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IpAccessControlListSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined) {
                throw new RequiredError('IpAccessControlListSid', 'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'IpAccessControlListSid'}}`, encodeURIComponent(String(IpAccessControlListSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rename an IpAccessControlList.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IpAccessControlListSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'IpAccessControlListSid' is not null or undefined
            if (IpAccessControlListSid === null ||
                IpAccessControlListSid === undefined) {
                throw new RequiredError('IpAccessControlListSid', 'Required parameter IpAccessControlListSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'IpAccessControlListSid'}}`, encodeURIComponent(String(IpAccessControlListSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a paged list of all IpAccessControlLists under this account.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new IpAccessControlList resource.  When created, the list will contain no IP addresses. You will need to add IP addresses to the list for it to be active. To add IP addresses, you will need to POST to the IpAddresses List subresource.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SIP/IpAccessControlLists{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single message.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ShortCodeSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ShortCodeSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'ShortCodeSid' is not null or undefined
            if (ShortCodeSid === null || ShortCodeSid === undefined) {
                throw new RequiredError('ShortCodeSid', 'Required parameter ShortCodeSid was null or undefined when calling accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SMS/ShortCodes/{ShortCodeSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'ShortCodeSid'}}`, encodeURIComponent(String(ShortCodeSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tries to update the shortcode's properties, and returns the updated resource representation if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ShortCodeSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ShortCodeSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'ShortCodeSid' is not null or undefined
            if (ShortCodeSid === null || ShortCodeSid === undefined) {
                throw new RequiredError('ShortCodeSid', 'Required parameter ShortCodeSid was null or undefined when calling accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SMS/ShortCodes/{ShortCodeSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'ShortCodeSid'}}`, encodeURIComponent(String(ShortCodeSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of ShortCode resource representations, each representing a short code within your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidSMSShortCodesmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidSMSShortCodesmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/SMS/ShortCodes{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a transcription from your account.
         * @param {string} AccountSid
         * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} TranscriptionSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, TranscriptionSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'TranscriptionSid' is not null or undefined
            if (TranscriptionSid === null || TranscriptionSid === undefined) {
                throw new RequiredError('TranscriptionSid', 'Required parameter TranscriptionSid was null or undefined when calling accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Transcriptions/{TranscriptionSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'TranscriptionSid'}}`, encodeURIComponent(String(TranscriptionSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single Transcription resource representation identified by the given {TranscriptionSid}. By default Twilio will respond with the XML metadata for the Transcription. If you append \".txt\" to the end of the Transcription resource's URI Twilio will just return you the transcription tex.
         * @param {string} AccountSid
         * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} TranscriptionSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, TranscriptionSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'TranscriptionSid' is not null or undefined
            if (TranscriptionSid === null || TranscriptionSid === undefined) {
                throw new RequiredError('TranscriptionSid', 'Required parameter TranscriptionSid was null or undefined when calling accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Transcriptions/{TranscriptionSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'TranscriptionSid'}}`, encodeURIComponent(String(TranscriptionSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a set of Transcription resource representations that includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidTranscriptionsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidTranscriptionsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Transcriptions{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns UsageRecords for all usage categories for a specified period.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {'Daily' | 'Monthly' | 'Yearly' | 'AllTime' | 'Today' | 'Yesterday' | 'ThisMonth' | 'LastMonth'} Subresource |Subresource|Description| |---|---| |Daily|Return multiple UsageRecords for each usage category, each representing usage over a daily time-interval.| |Monthly|Return multiple UsageRecords for each usage category, each representing usage over a monthly time-interval.| |Yearly|Return multple UsageRecords for each usage category, each representing usage over a yearly time-interval.| |AllTime|  Return a single UsageRecord for each usage category, each representing usage over the date-range specified. This is the same as the root /Usage/Records.| |Today|Return a single UsageRecord per usage category, for today&#39;s usage only.| ||Yesterday|Return a single UsageRecord per usage category, for yesterday&#39;s usage only.| |ThisMonth|Return a single UsageRecord per usage category, for this month&#39;s usage only.| |LastMonth|Return a single UsageRecord per usage category, for last month&#39;s usage only.|
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(AccountSid, mediaTypeExtension, Subresource, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet.');
            }
            // verify required parameter 'Subresource' is not null or undefined
            if (Subresource === null || Subresource === undefined) {
                throw new RequiredError('Subresource', 'Required parameter Subresource was null or undefined when calling accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Records/{Subresource}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'Subresource'}}`, encodeURIComponent(String(Subresource)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns UsageRecords for all usage categories. The list includes paging information. By default, the UsageRecords resource will return one UsageRecord for each Category, representing all usage accrued all-time for the account. You can filter the usage Category or change the date-range over which usage is counted using optional GET query parameters.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageRecordsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageRecordsmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageRecordsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Records{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete this UsageTrigger.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, UsageTriggerSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete.');
            }
            // verify required parameter 'UsageTriggerSid' is not null or undefined
            if (UsageTriggerSid === null || UsageTriggerSid === undefined) {
                throw new RequiredError('UsageTriggerSid', 'Required parameter UsageTriggerSid was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Triggers/{UsageTriggerSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'UsageTriggerSid'}}`, encodeURIComponent(String(UsageTriggerSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a repesentation of the UsageTrigger.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, UsageTriggerSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'UsageTriggerSid' is not null or undefined
            if (UsageTriggerSid === null || UsageTriggerSid === undefined) {
                throw new RequiredError('UsageTriggerSid', 'Required parameter UsageTriggerSid was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Triggers/{UsageTriggerSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'UsageTriggerSid'}}`, encodeURIComponent(String(UsageTriggerSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tries to update the UsageTrigger's properties, and returns the updated resource representation if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, UsageTriggerSid, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'UsageTriggerSid' is not null or undefined
            if (UsageTriggerSid === null || UsageTriggerSid === undefined) {
                throw new RequiredError('UsageTriggerSid', 'Required parameter UsageTriggerSid was null or undefined when calling accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Triggers/{UsageTriggerSid}{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'UsageTriggerSid'}}`, encodeURIComponent(String(UsageTriggerSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of UsageTrigger resource representations. The list includes paging information. By default, all UsageTriggers are returned. You can filter the list by specifying one or more query parameters. Note that the query parameters are case-sensitive
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageTriggersmediaTypeExtensionGet.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageTriggersmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Triggers{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new UsageTrigger. Each account can create up to 1,000 UsageTriggers. Currently, UsageTriggers that are no longer active are not deleted automatically. Use DELETE to delete triggers you no longer need.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options = {}) {
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidUsageTriggersmediaTypeExtensionPost.');
            }
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidUsageTriggersmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}/Usage/Triggers{mediaTypeExtension}`
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)))
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a representation of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionGet(mediaTypeExtension, AccountSid, options = {}) {
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidmediaTypeExtensionGet.');
            }
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts/{AccountSid}{mediaTypeExtension}`
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows you to modify the properties of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionPost(mediaTypeExtension, AccountSid, options = {}) {
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidmediaTypeExtensionPost.');
            }
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts/{AccountSid}{mediaTypeExtension}`
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows you to modify the properties of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionPut(mediaTypeExtension, AccountSid, options = {}) {
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsAccountSidmediaTypeExtensionPut.');
            }
            // verify required parameter 'AccountSid' is not null or undefined
            if (AccountSid === null || AccountSid === undefined) {
                throw new RequiredError('AccountSid', 'Required parameter AccountSid was null or undefined when calling accountsAccountSidmediaTypeExtensionPut.');
            }
            const localVarPath = `/Accounts/{AccountSid}{mediaTypeExtension}`
                .replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)))
                .replace(`{${'AccountSid'}}`, encodeURIComponent(String(AccountSid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of the Account resources belonging to the account used to make the API request. This list will include that Account as well.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsmediaTypeExtensionGet(mediaTypeExtension, options = {}) {
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsmediaTypeExtensionGet.');
            }
            const localVarPath = `/Accounts{mediaTypeExtension}`.replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Account instance resource as a subaccount of the one used to make the request. See Creating Subaccounts for more information.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsmediaTypeExtensionPost(mediaTypeExtension, options = {}) {
            // verify required parameter 'mediaTypeExtension' is not null or undefined
            if (mediaTypeExtension === null ||
                mediaTypeExtension === undefined) {
                throw new RequiredError('mediaTypeExtension', 'Required parameter mediaTypeExtension was null or undefined when calling accountsmediaTypeExtensionPost.');
            }
            const localVarPath = `/Accounts{mediaTypeExtension}`.replace(`{${'mediaTypeExtension'}}`, encodeURIComponent(String(mediaTypeExtension)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
exports.DefaultApiFp = function (configuration) {
    return {
        /**
         * Delete this application.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, ApplicationSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, ApplicationSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get application instance resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ApplicationSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ApplicationSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Tries to update the application's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ApplicationSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ApplicationSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of Application resource representations, each representing an application within your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidApplicationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a new application within your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidApplicationsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the properties of the authorized application.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of Connect App resource representations, each representing a Connect App you've authorized to access your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of local AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number tha is currently available for provisioning within your account.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of mobile AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number that is currently available for provisioning within your account.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of toll-free AvailablePhoneNumber elements that match the specified filters, each representing a phone number that is currently available for provisioning within your account. To provision an available phone number, POST the number to the IncomingPhoneNumbers resource.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of all AvailablePhoneNumber subresources for your account by ISO Country. For full information about our phone number support, see our Phone Number CSV (http://www.twilio.com/resources/rates/international-phone-number-rates.csv).
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of notifications generated for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {string} CallSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
         * @param {string} AccountSid
         * @param {string} CallSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the single Call resource identified by {CallSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CallSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidCallsCallSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CallSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Modify a phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CallSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidCallsCallSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CallSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of phone calls made to and from the account identified by {AccountSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidCallsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * To make a call, make an HTTP POST request. Initiate a new phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidCallsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Kick this participant from the conference.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a representation of this participant.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates the status of a participant.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the list of participants in the conference identified by {ConferenceSid}.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a representation of the conference identified by {ConferenceSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConferenceSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConferenceSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConferenceSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of conferences within an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidConferencesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the properties of a Connect App.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Tries to update the Connect App's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ConnectAppSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ConnectAppSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of Connect App resource representations, each representing a Connect App in your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Release this phone number from your account. Twilio will no longer answer calls to this number, and you will stop being billed the monthly phone number fee. The phone number will eventually be recycled and potentially given to another customer, so use with care. If you make a mistake, contac us. We may be able to give you the number back.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get info about incoming call's phone number.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a local (not toll-free) phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out toll-free numbers.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a mobile phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out local and toll free numbers.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a toll-free phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out all numbers that aren't toll-free.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of IncomingPhoneNumber resource representations, each representing a phone number given to your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Purchases a new phone number for your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number. To find an available phone number to POST, use the subresources of the AvailablePhoneNumbers list resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Without an extension, the media is returned using the mime-type provided when the media was generated.
         * @param {string} AccountSid
         * @param {string} MessageSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} MediaSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, MediaSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, MediaSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of media associated with your message.
         * @param {string} AccountSid
         * @param {string} MessageSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a single message specified by the provided {MessageSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} MessageSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, MessageSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, MessageSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of messages associated with your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidMessagesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * To send a new outgoing message, make an HTTP POST to your Messages list resource URI
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} To The destination phone number. Format with a &#39;+&#39; and country code e.g., +16175551212 (E.164 format).
         * @param {string} [From] A Twilio phone number (in E.164 format) or alphanumeric sender ID enabled for the type of message you wish to send. Phone numbers or short codes purchased from Twilio work here. You cannot (for example) spoof messages from your own cell phone number.
         * @param {string} [MessagingServiceSid] The 34 character unique id of the Messaging Service you want to associate with this Message. Set this parameter to use the Messaging Service Settings and Copilot Features you have configured. When only this parameter is set, Twilio will use your enabled Copilot Features to select the From phone number for delivery.
         * @param {string} [Body] The text of the message you want to send, limited to 1600 characters.
         * @param {string} [MediaUrl] The URL of the media you wish to send out with the message. gif , png and jpeg content is currently supported and will be formatted correctly on the recipient&#39;s device. Other types are also accepted by the API. The media size limit is 5MB. If you wish to send more than one image in the message body, please provide multiple MediaUrls values in the POST request. You may include up to 10 MediaUrls per message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, To, From, MessagingServiceSid, Body, MediaUrl, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidMessagesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, To, From, MessagingServiceSid, Body, MediaUrl, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes the notification identified by {NotificationSid} from an account's log.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} NotificationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, NotificationSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, NotificationSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a notification entry.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} NotificationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, NotificationSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, NotificationSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of notifications generated for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidNotificationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes the caller ID from the account. Returns an HTTP 204 response if successful, with no body.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the set of an account's verified phone numbers.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates the caller id, and returns the updated resource if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates the caller id, and returns the updated resource if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of OutgoingCallerId resource representations, each representing a Caller ID number valid for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds a new CallerID to your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a specific member.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, CallSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, CallSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When redirecting a member of a queue addressed by CallSid, only the first request will succeed and return a 200 response code. A second request will fail and return an appropriate 400 response code.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, CallSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, CallSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a front member.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When dequeuing the 'Front' of the queue, the next call in the queue will be redirected.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the list of members in the queue identified by {QueueSid}.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The DELETE method allows you to remove a Queue. Only empty queues are deletable.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, QueueSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, QueueSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get resource's individual Queue instance.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, QueueSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, QueueSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This POST request allows you to change the FriendlyName or MaxSize.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, QueueSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, QueueSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of queues within an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidQueuesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new Queue resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidQueuesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a set of Transcription resource representations that includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a recording  from your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, RecordingSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, RecordingSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns one of several representations: Without an extension, or with a \".wav\", a binary WAV audio file is returned with mime-type \"audio/x-wav\". Appending \".mp3\" to the URI returns a binary MP3 audio file with mime-type type \"audio/mpeg\". Appending \".xml\" to the URI returns a XML representation.
         * @param {string} AccountSid
         * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidRecordingsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Remove a Credential from a CredentialList.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a specific Credential in a list. Though a password is stored for each username in your list, the password is not returned to protect your password. If you cannot remember your password, you will need to POST to this resource to update it.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Change the password of a Credential record.  If the change is successful, Twilio will respond with the Credential record but will not include the password in the response.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the list of Credentials in a CredentialList. The passwords for the Credentials are intentionally not returned so as to protect them.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Add a Credential to the CredentialList.  When creating a Credential, you will POST both a username and password, but only receive the username back in the response. The password is intentionally not returned so as to protect it.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a CredentialList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, CLSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, CLSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a credential list instance resource
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CLSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CLSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Change the FriendlyName of the list
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CLSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CLSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Gets a list of Credential Lists for an account
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new Credential List.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Remove a CredentialListMapping from a domain
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, CLSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, CLSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the user lists mapped to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Map a CredentialList to the domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Remove a mapping from this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ALSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return a specific IpAccessControlListMapping instance by Sid.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ALSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return the IpAccessControlListMappings that are associated to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Map an IpAccessControlList to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a domain. If you have created subdomains of a domain, you will not be able to delete the domain until you first delete all subdomains of it.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, SipDomainSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, SipDomainSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return a specific instance by Sid.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, SipDomainSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, SipDomainSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the attributes of a domain.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, SipDomainSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, SipDomainSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a paged list of the domains for an account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPDomainsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a new Domain and returns its instance resource. You must pick a unique domain name that ends in \".sip.twilio.com\". After creating a Domain, you must map it to an authentication method before the domain is ready to receive traffic.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPDomainsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes an IP address entry from the list.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return a single IP Address resource.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Change the description or IP address of a given IpAddress instance resource
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List the IP Addresses contained in this list.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Add an IP Address to the list with a description.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an IpAccessControlList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IpAccessControlListSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IpAccessControlListSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return a specific IpAccessControlList resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IpAccessControlListSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IpAccessControlListSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Rename an IpAccessControlList.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IpAccessControlListSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IpAccessControlListSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return a paged list of all IpAccessControlLists under this account.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new IpAccessControlList resource.  When created, the list will contain no IP addresses. You will need to add IP addresses to the list for it to be active. To add IP addresses, you will need to POST to the IpAddresses List subresource.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a single message.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ShortCodeSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ShortCodeSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ShortCodeSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Tries to update the shortcode's properties, and returns the updated resource representation if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ShortCodeSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ShortCodeSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ShortCodeSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of ShortCode resource representations, each representing a short code within your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidSMSShortCodesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a transcription from your account.
         * @param {string} AccountSid
         * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} TranscriptionSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, TranscriptionSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, TranscriptionSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a single Transcription resource representation identified by the given {TranscriptionSid}. By default Twilio will respond with the XML metadata for the Transcription. If you append \".txt\" to the end of the Transcription resource's URI Twilio will just return you the transcription tex.
         * @param {string} AccountSid
         * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} TranscriptionSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, TranscriptionSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, TranscriptionSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a set of Transcription resource representations that includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns UsageRecords for all usage categories for a specified period.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {'Daily' | 'Monthly' | 'Yearly' | 'AllTime' | 'Today' | 'Yesterday' | 'ThisMonth' | 'LastMonth'} Subresource |Subresource|Description| |---|---| |Daily|Return multiple UsageRecords for each usage category, each representing usage over a daily time-interval.| |Monthly|Return multiple UsageRecords for each usage category, each representing usage over a monthly time-interval.| |Yearly|Return multple UsageRecords for each usage category, each representing usage over a yearly time-interval.| |AllTime|  Return a single UsageRecord for each usage category, each representing usage over the date-range specified. This is the same as the root /Usage/Records.| |Today|Return a single UsageRecord per usage category, for today&#39;s usage only.| ||Yesterday|Return a single UsageRecord per usage category, for yesterday&#39;s usage only.| |ThisMonth|Return a single UsageRecord per usage category, for this month&#39;s usage only.| |LastMonth|Return a single UsageRecord per usage category, for last month&#39;s usage only.|
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(AccountSid, mediaTypeExtension, Subresource, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(AccountSid, mediaTypeExtension, Subresource, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns UsageRecords for all usage categories. The list includes paging information. By default, the UsageRecords resource will return one UsageRecord for each Category, representing all usage accrued all-time for the account. You can filter the usage Category or change the date-range over which usage is counted using optional GET query parameters.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageRecordsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidUsageRecordsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete this UsageTrigger.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, UsageTriggerSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, UsageTriggerSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a repesentation of the UsageTrigger.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, UsageTriggerSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, UsageTriggerSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Tries to update the UsageTrigger's properties, and returns the updated resource representation if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, UsageTriggerSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, UsageTriggerSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of UsageTrigger resource representations. The list includes paging information. By default, all UsageTriggers are returned. You can filter the list by specifying one or more query parameters. Note that the query parameters are case-sensitive
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidUsageTriggersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a new UsageTrigger. Each account can create up to 1,000 UsageTriggers. Currently, UsageTriggers that are no longer active are not deleted automatically. Use DELETE to delete triggers you no longer need.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidUsageTriggersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a representation of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionGet(mediaTypeExtension, AccountSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidmediaTypeExtensionGet(mediaTypeExtension, AccountSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Allows you to modify the properties of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionPost(mediaTypeExtension, AccountSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidmediaTypeExtensionPost(mediaTypeExtension, AccountSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Allows you to modify the properties of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionPut(mediaTypeExtension, AccountSid, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsAccountSidmediaTypeExtensionPut(mediaTypeExtension, AccountSid, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a list of the Account resources belonging to the account used to make the API request. This list will include that Account as well.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsmediaTypeExtensionGet(mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsmediaTypeExtensionGet(mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new Account instance resource as a subaccount of the one used to make the request. See Creating Subaccounts for more information.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsmediaTypeExtensionPost(mediaTypeExtension, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).accountsmediaTypeExtensionPost(mediaTypeExtension, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * DefaultApi - factory interface
 * @export
 */
exports.DefaultApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete this application.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, ApplicationSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, ApplicationSid, options)(fetch, basePath);
        },
        /**
         * Get application instance resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ApplicationSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ApplicationSid, options)(fetch, basePath);
        },
        /**
         * Tries to update the application's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ApplicationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ApplicationSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ApplicationSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of Application resource representations, each representing an application within your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidApplicationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Creates a new application within your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidApplicationsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidApplicationsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Get the properties of the authorized application.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of Connect App resource representations, each representing a Connect App you've authorized to access your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns a list of local AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number tha is currently available for provisioning within your account.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns a list of mobile AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number that is currently available for provisioning within your account.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns a list of toll-free AvailablePhoneNumber elements that match the specified filters, each representing a phone number that is currently available for provisioning within your account. To provision an available phone number, POST the number to the IncomingPhoneNumbers resource.
         * @param {string} AccountSid
         * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns a list of all AvailablePhoneNumber subresources for your account by ISO Country. For full information about our phone number support, see our Phone Number CSV (http://www.twilio.com/resources/rates/international-phone-number-rates.csv).
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns a list of notifications generated for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {string} CallSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
         * @param {string} AccountSid
         * @param {string} CallSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns the single Call resource identified by {CallSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CallSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidCallsCallSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CallSid, options)(fetch, basePath);
        },
        /**
         * Modify a phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsCallSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CallSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidCallsCallSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CallSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of phone calls made to and from the account identified by {AccountSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidCallsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * To make a call, make an HTTP POST request. Initiate a new phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidCallsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidCallsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Kick this participant from the conference.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options)(fetch, basePath);
        },
        /**
         * Returns a representation of this participant.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options)(fetch, basePath);
        },
        /**
         * Updates the status of a participant.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options)(fetch, basePath);
        },
        /**
         * Returns the list of participants in the conference identified by {ConferenceSid}.
         * @param {string} AccountSid
         * @param {string} ConferenceSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns a representation of the conference identified by {ConferenceSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConferenceSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConferenceSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConferenceSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of conferences within an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConferencesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidConferencesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Get the properties of a Connect App.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options)(fetch, basePath);
        },
        /**
         * Tries to update the Connect App's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ConnectAppSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ConnectAppSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ConnectAppSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of Connect App resource representations, each representing a Connect App in your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Release this phone number from your account. Twilio will no longer answer calls to this number, and you will stop being billed the monthly phone number fee. The phone number will eventually be recycled and potentially given to another customer, so use with care. If you make a mistake, contac us. We may be able to give you the number back.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options)(fetch, basePath);
        },
        /**
         * Get info about incoming call's phone number.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options)(fetch, basePath);
        },
        /**
         * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options)(fetch, basePath);
        },
        /**
         * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IncomingPhoneNumberSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a local (not toll-free) phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out toll-free numbers.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a mobile phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out local and toll free numbers.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns a list of local <IncomingPhoneNumber> elements, each representing a toll-free phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out all numbers that aren't toll-free.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns a list of IncomingPhoneNumber resource representations, each representing a phone number given to your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Purchases a new phone number for your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number. To find an available phone number to POST, use the subresources of the AvailablePhoneNumbers list resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Without an extension, the media is returned using the mime-type provided when the media was generated.
         * @param {string} AccountSid
         * @param {string} MessageSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} MediaSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, MediaSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, MediaSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of media associated with your message.
         * @param {string} AccountSid
         * @param {string} MessageSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns a single message specified by the provided {MessageSid}.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} MessageSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, MessageSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, MessageSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of messages associated with your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidMessagesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * To send a new outgoing message, make an HTTP POST to your Messages list resource URI
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} To The destination phone number. Format with a &#39;+&#39; and country code e.g., +16175551212 (E.164 format).
         * @param {string} [From] A Twilio phone number (in E.164 format) or alphanumeric sender ID enabled for the type of message you wish to send. Phone numbers or short codes purchased from Twilio work here. You cannot (for example) spoof messages from your own cell phone number.
         * @param {string} [MessagingServiceSid] The 34 character unique id of the Messaging Service you want to associate with this Message. Set this parameter to use the Messaging Service Settings and Copilot Features you have configured. When only this parameter is set, Twilio will use your enabled Copilot Features to select the From phone number for delivery.
         * @param {string} [Body] The text of the message you want to send, limited to 1600 characters.
         * @param {string} [MediaUrl] The URL of the media you wish to send out with the message. gif , png and jpeg content is currently supported and will be formatted correctly on the recipient&#39;s device. Other types are also accepted by the API. The media size limit is 5MB. If you wish to send more than one image in the message body, please provide multiple MediaUrls values in the POST request. You may include up to 10 MediaUrls per message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidMessagesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, To, From, MessagingServiceSid, Body, MediaUrl, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidMessagesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, To, From, MessagingServiceSid, Body, MediaUrl, options)(fetch, basePath);
        },
        /**
         * Deletes the notification identified by {NotificationSid} from an account's log.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} NotificationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, NotificationSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, NotificationSid, options)(fetch, basePath);
        },
        /**
         * Get a notification entry.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} NotificationSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, NotificationSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, NotificationSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of notifications generated for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidNotificationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidNotificationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Deletes the caller ID from the account. Returns an HTTP 204 response if successful, with no body.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options)(fetch, basePath);
        },
        /**
         * Get the set of an account's verified phone numbers.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options)(fetch, basePath);
        },
        /**
         * Updates the caller id, and returns the updated resource if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options)(fetch, basePath);
        },
        /**
         * Updates the caller id, and returns the updated resource if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} OutgoingCallerIdSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of OutgoingCallerId resource representations, each representing a Caller ID number valid for an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Adds a new CallerID to your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Get a specific member.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, CallSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, CallSid, options)(fetch, basePath);
        },
        /**
         * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When redirecting a member of a queue addressed by CallSid, only the first request will succeed and return a 200 response code. A second request will fail and return an appropriate 400 response code.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CallSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, CallSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, CallSid, options)(fetch, basePath);
        },
        /**
         * Get a front member.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When dequeuing the 'Front' of the queue, the next call in the queue will be redirected.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns the list of members in the queue identified by {QueueSid}.
         * @param {string} AccountSid
         * @param {string} QueueSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * The DELETE method allows you to remove a Queue. Only empty queues are deletable.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, QueueSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, QueueSid, options)(fetch, basePath);
        },
        /**
         * Get resource's individual Queue instance.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, QueueSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, QueueSid, options)(fetch, basePath);
        },
        /**
         * This POST request allows you to change the FriendlyName or MaxSize.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} QueueSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, QueueSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, QueueSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of queues within an account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidQueuesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Create a new Queue resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidQueuesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidQueuesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns a set of Transcription resource representations that includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options)(fetch, basePath);
        },
        /**
         * Deletes a recording  from your account.
         * @param {string} AccountSid
         * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, RecordingSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, RecordingSid, options)(fetch, basePath);
        },
        /**
         * Returns one of several representations: Without an extension, or with a \".wav\", a binary WAV audio file is returned with mime-type \"audio/x-wav\". Appending \".mp3\" to the URI returns a binary MP3 audio file with mime-type type \"audio/mpeg\". Appending \".xml\" to the URI returns a XML representation.
         * @param {string} AccountSid
         * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
         * @param {string} RecordingSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidRecordingsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidRecordingsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Remove a Credential from a CredentialList.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options)(fetch, basePath);
        },
        /**
         * Get a specific Credential in a list. Though a password is stored for each username in your list, the password is not returned to protect your password. If you cannot remember your password, you will need to POST to this resource to update it.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options)(fetch, basePath);
        },
        /**
         * Change the password of a Credential record.  If the change is successful, Twilio will respond with the Credential record but will not include the password in the response.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CredentialSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options)(fetch, basePath);
        },
        /**
         * Get the list of Credentials in a CredentialList. The passwords for the Credentials are intentionally not returned so as to protect them.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Add a Credential to the CredentialList.  When creating a Credential, you will POST both a username and password, but only receive the username back in the response. The password is intentionally not returned so as to protect it.
         * @param {string} AccountSid
         * @param {string} CLSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Delete a CredentialList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, CLSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, CLSid, options)(fetch, basePath);
        },
        /**
         * Get a credential list instance resource
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CLSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CLSid, options)(fetch, basePath);
        },
        /**
         * Change the FriendlyName of the list
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CLSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CLSid, options)(fetch, basePath);
        },
        /**
         * Gets a list of Credential Lists for an account
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Create a new Credential List.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Remove a CredentialListMapping from a domain
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} CLSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, CLSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, CLSid, options)(fetch, basePath);
        },
        /**
         * Get the user lists mapped to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Map a CredentialList to the domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Remove a mapping from this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ALSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options)(fetch, basePath);
        },
        /**
         * Return a specific IpAccessControlListMapping instance by Sid.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ALSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options)(fetch, basePath);
        },
        /**
         * Return the IpAccessControlListMappings that are associated to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Map an IpAccessControlList to this domain.
         * @param {string} AccountSid
         * @param {string} SipDomainSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Delete a domain. If you have created subdomains of a domain, you will not be able to delete the domain until you first delete all subdomains of it.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, SipDomainSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, SipDomainSid, options)(fetch, basePath);
        },
        /**
         * Return a specific instance by Sid.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, SipDomainSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, SipDomainSid, options)(fetch, basePath);
        },
        /**
         * Update the attributes of a domain.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} SipDomainSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, SipDomainSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, SipDomainSid, options)(fetch, basePath);
        },
        /**
         * Returns a paged list of the domains for an account.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPDomainsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Creates a new Domain and returns its instance resource. You must pick a unique domain name that ends in \".sip.twilio.com\". After creating a Domain, you must map it to an authentication method before the domain is ready to receive traffic.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPDomainsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPDomainsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Deletes an IP address entry from the list.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options)(fetch, basePath);
        },
        /**
         * Return a single IP Address resource.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options)(fetch, basePath);
        },
        /**
         * Change the description or IP address of a given IpAddress instance resource
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAddressSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options)(fetch, basePath);
        },
        /**
         * List the IP Addresses contained in this list.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Add an IP Address to the list with a description.
         * @param {string} AccountSid
         * @param {string} IpAccessControlListSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Delete an IpAccessControlList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IpAccessControlListSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IpAccessControlListSid, options)(fetch, basePath);
        },
        /**
         * Return a specific IpAccessControlList resource.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IpAccessControlListSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IpAccessControlListSid, options)(fetch, basePath);
        },
        /**
         * Rename an IpAccessControlList.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} IpAccessControlListSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IpAccessControlListSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IpAccessControlListSid, options)(fetch, basePath);
        },
        /**
         * Return a paged list of all IpAccessControlLists under this account.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Create a new IpAccessControlList resource.  When created, the list will contain no IP addresses. You will need to add IP addresses to the list for it to be active. To add IP addresses, you will need to POST to the IpAddresses List subresource.
         * @param {string} AccountSid
         * @param {string} mediaTypeExtension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Get a single message.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ShortCodeSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ShortCodeSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ShortCodeSid, options)(fetch, basePath);
        },
        /**
         * Tries to update the shortcode's properties, and returns the updated resource representation if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} ShortCodeSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ShortCodeSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ShortCodeSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of ShortCode resource representations, each representing a short code within your account. The list includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidSMSShortCodesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidSMSShortCodesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Deletes a transcription from your account.
         * @param {string} AccountSid
         * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} TranscriptionSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, TranscriptionSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, TranscriptionSid, options)(fetch, basePath);
        },
        /**
         * Returns a single Transcription resource representation identified by the given {TranscriptionSid}. By default Twilio will respond with the XML metadata for the Transcription. If you append \".txt\" to the end of the Transcription resource's URI Twilio will just return you the transcription tex.
         * @param {string} AccountSid
         * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} TranscriptionSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, TranscriptionSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, TranscriptionSid, options)(fetch, basePath);
        },
        /**
         * Returns a set of Transcription resource representations that includes paging information.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns UsageRecords for all usage categories for a specified period.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {'Daily' | 'Monthly' | 'Yearly' | 'AllTime' | 'Today' | 'Yesterday' | 'ThisMonth' | 'LastMonth'} Subresource |Subresource|Description| |---|---| |Daily|Return multiple UsageRecords for each usage category, each representing usage over a daily time-interval.| |Monthly|Return multiple UsageRecords for each usage category, each representing usage over a monthly time-interval.| |Yearly|Return multple UsageRecords for each usage category, each representing usage over a yearly time-interval.| |AllTime|  Return a single UsageRecord for each usage category, each representing usage over the date-range specified. This is the same as the root /Usage/Records.| |Today|Return a single UsageRecord per usage category, for today&#39;s usage only.| ||Yesterday|Return a single UsageRecord per usage category, for yesterday&#39;s usage only.| |ThisMonth|Return a single UsageRecord per usage category, for this month&#39;s usage only.| |LastMonth|Return a single UsageRecord per usage category, for last month&#39;s usage only.|
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(AccountSid, mediaTypeExtension, Subresource, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(AccountSid, mediaTypeExtension, Subresource, options)(fetch, basePath);
        },
        /**
         * Returns UsageRecords for all usage categories. The list includes paging information. By default, the UsageRecords resource will return one UsageRecord for each Category, representing all usage accrued all-time for the account. You can filter the usage Category or change the date-range over which usage is counted using optional GET query parameters.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageRecordsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidUsageRecordsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Delete this UsageTrigger.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, UsageTriggerSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, UsageTriggerSid, options)(fetch, basePath);
        },
        /**
         * Returns a repesentation of the UsageTrigger.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, UsageTriggerSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, UsageTriggerSid, options)(fetch, basePath);
        },
        /**
         * Tries to update the UsageTrigger's properties, and returns the updated resource representation if successful.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} UsageTriggerSid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, UsageTriggerSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, UsageTriggerSid, options)(fetch, basePath);
        },
        /**
         * Returns a list of UsageTrigger resource representations. The list includes paging information. By default, all UsageTriggers are returned. You can filter the list by specifying one or more query parameters. Note that the query parameters are case-sensitive
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidUsageTriggersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Creates a new UsageTrigger. Each account can create up to 1,000 UsageTriggers. Currently, UsageTriggers that are no longer active are not deleted automatically. Use DELETE to delete triggers you no longer need.
         * @param {string} AccountSid
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidUsageTriggersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidUsageTriggersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Returns a representation of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionGet(mediaTypeExtension, AccountSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidmediaTypeExtensionGet(mediaTypeExtension, AccountSid, options)(fetch, basePath);
        },
        /**
         * Allows you to modify the properties of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionPost(mediaTypeExtension, AccountSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidmediaTypeExtensionPost(mediaTypeExtension, AccountSid, options)(fetch, basePath);
        },
        /**
         * Allows you to modify the properties of an account.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {string} AccountSid A 34 character string that uniquely identifies this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountSidmediaTypeExtensionPut(mediaTypeExtension, AccountSid, options) {
            return exports.DefaultApiFp(configuration).accountsAccountSidmediaTypeExtensionPut(mediaTypeExtension, AccountSid, options)(fetch, basePath);
        },
        /**
         * Retrieve a list of the Account resources belonging to the account used to make the API request. This list will include that Account as well.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsmediaTypeExtensionGet(mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsmediaTypeExtensionGet(mediaTypeExtension, options)(fetch, basePath);
        },
        /**
         * Create a new Account instance resource as a subaccount of the one used to make the request. See Creating Subaccounts for more information.
         * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsmediaTypeExtensionPost(mediaTypeExtension, options) {
            return exports.DefaultApiFp(configuration).accountsmediaTypeExtensionPost(mediaTypeExtension, options)(fetch, basePath);
        },
    };
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends BaseAPI {
    /**
     * Delete this application.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ApplicationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, ApplicationSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, ApplicationSid, options)(this.fetch, this.basePath);
    }
    /**
     * Get application instance resource.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ApplicationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ApplicationSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ApplicationSid, options)(this.fetch, this.basePath);
    }
    /**
     * Tries to update the application's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ApplicationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ApplicationSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidApplicationsApplicationSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ApplicationSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of Application resource representations, each representing an application within your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidApplicationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidApplicationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Creates a new application within your account.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidApplicationsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidApplicationsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Get the properties of the authorized application.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ConnectAppSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidAuthorizedConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of Connect App resource representations, each representing a Connect App you've authorized to access your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidAuthorizedConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of local AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number tha is currently available for provisioning within your account.
     * @param {string} AccountSid
     * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeLocalmediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of mobile AvailablePhoneNumber resource representations that match the specified filters, each representing a phone number that is currently available for provisioning within your account.
     * @param {string} AccountSid
     * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeMobilemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of toll-free AvailablePhoneNumber elements that match the specified filters, each representing a phone number that is currently available for provisioning within your account. To provision an available phone number, POST the number to the IncomingPhoneNumbers resource.
     * @param {string} AccountSid
     * @param {string} IsoCountryCode ISO 3166-1 alpha-2.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidAvailablePhoneNumbersIsoCountryCodeTollFreemediaTypeExtensionGet(AccountSid, IsoCountryCode, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of all AvailablePhoneNumber subresources for your account by ISO Country. For full information about our phone number support, see our Phone Number CSV (http://www.twilio.com/resources/rates/international-phone-number-rates.csv).
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidAvailablePhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of notifications generated for an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {string} CallSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidCallsCallSidNotificationsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
     * @param {string} AccountSid
     * @param {string} CallSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidCallsCallSidRecordingsmediaTypeExtensionGet(AccountSid, CallSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the single Call resource identified by {CallSid}.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidCallsCallSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CallSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidCallsCallSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CallSid, options)(this.fetch, this.basePath);
    }
    /**
     * Modify a phone call.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidCallsCallSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CallSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidCallsCallSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CallSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of phone calls made to and from the account identified by {AccountSid}.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidCallsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidCallsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * To make a call, make an HTTP POST request. Initiate a new phone call.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidCallsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidCallsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Kick this participant from the conference.
     * @param {string} AccountSid
     * @param {string} ConferenceSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionDelete(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a representation of this participant.
     * @param {string} AccountSid
     * @param {string} ConferenceSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options)(this.fetch, this.basePath);
    }
    /**
     * Updates the status of a participant.
     * @param {string} AccountSid
     * @param {string} ConferenceSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidConferencesConferenceSidParticipantsCallSidmediaTypeExtensionPost(AccountSid, ConferenceSid, mediaTypeExtension, CallSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the list of participants in the conference identified by {ConferenceSid}.
     * @param {string} AccountSid
     * @param {string} ConferenceSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidConferencesConferenceSidParticipantsmediaTypeExtensionGet(AccountSid, ConferenceSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a representation of the conference identified by {ConferenceSid}.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ConferenceSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConferenceSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidConferencesConferenceSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConferenceSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of conferences within an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidConferencesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidConferencesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Get the properties of a Connect App.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ConnectAppSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ConnectAppSid, options)(this.fetch, this.basePath);
    }
    /**
     * Tries to update the Connect App's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ConnectAppSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ConnectAppSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidConnectAppsConnectAppSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ConnectAppSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of Connect App resource representations, each representing a Connect App in your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidConnectAppsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Release this phone number from your account. Twilio will no longer answer calls to this number, and you will stop being billed the monthly phone number fee. The phone number will eventually be recycled and potentially given to another customer, so use with care. If you make a mistake, contac us. We may be able to give you the number back.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IncomingPhoneNumberSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options)(this.fetch, this.basePath);
    }
    /**
     * Get info about incoming call's phone number.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IncomingPhoneNumberSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options)(this.fetch, this.basePath);
    }
    /**
     * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IncomingPhoneNumberSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options)(this.fetch, this.basePath);
    }
    /**
     * Tries to update the incoming phone number's properties, and returns the updated resource representation if successful. The returned response is identical to that returned above when making a GET request.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IncomingPhoneNumberSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidIncomingPhoneNumbersIncomingPhoneNumberSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, IncomingPhoneNumberSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of local <IncomingPhoneNumber> elements, each representing a local (not toll-free) phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out toll-free numbers.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidIncomingPhoneNumbersLocalmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of local <IncomingPhoneNumber> elements, each representing a mobile phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out local and toll free numbers.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidIncomingPhoneNumbersMobilemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of local <IncomingPhoneNumber> elements, each representing a toll-free phone number given to your account, under an <IncomingPhoneNumbers> list element that includes paging information. Works exactly the same as the IncomingPhoneNumber resource, but filters out all numbers that aren't toll-free.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Adds a new phone number to your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidIncomingPhoneNumbersTollFreemediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of IncomingPhoneNumber resource representations, each representing a phone number given to your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Purchases a new phone number for your account. If a phone number is found for your request, Twilio will add it to your account and bill you for the first month's cost of the phone number. To find an available phone number to POST, use the subresources of the AvailablePhoneNumbers list resource.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidIncomingPhoneNumbersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Without an extension, the media is returned using the mime-type provided when the media was generated.
     * @param {string} AccountSid
     * @param {string} MessageSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} MediaSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, MediaSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidMessagesMessageSidMediaMediaSidmediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, MediaSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of media associated with your message.
     * @param {string} AccountSid
     * @param {string} MessageSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidMessagesMessageSidMediamediaTypeExtensionGet(AccountSid, MessageSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a single message specified by the provided {MessageSid}.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} MessageSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, MessageSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidMessagesMessageSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, MessageSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of messages associated with your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidMessagesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidMessagesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * To send a new outgoing message, make an HTTP POST to your Messages list resource URI
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} To The destination phone number. Format with a &#39;+&#39; and country code e.g., +16175551212 (E.164 format).
     * @param {string} [From] A Twilio phone number (in E.164 format) or alphanumeric sender ID enabled for the type of message you wish to send. Phone numbers or short codes purchased from Twilio work here. You cannot (for example) spoof messages from your own cell phone number.
     * @param {string} [MessagingServiceSid] The 34 character unique id of the Messaging Service you want to associate with this Message. Set this parameter to use the Messaging Service Settings and Copilot Features you have configured. When only this parameter is set, Twilio will use your enabled Copilot Features to select the From phone number for delivery.
     * @param {string} [Body] The text of the message you want to send, limited to 1600 characters.
     * @param {string} [MediaUrl] The URL of the media you wish to send out with the message. gif , png and jpeg content is currently supported and will be formatted correctly on the recipient&#39;s device. Other types are also accepted by the API. The media size limit is 5MB. If you wish to send more than one image in the message body, please provide multiple MediaUrls values in the POST request. You may include up to 10 MediaUrls per message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidMessagesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, To, From, MessagingServiceSid, Body, MediaUrl, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidMessagesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, To, From, MessagingServiceSid, Body, MediaUrl, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes the notification identified by {NotificationSid} from an account's log.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} NotificationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, NotificationSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidNotificationsNotificationSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, NotificationSid, options)(this.fetch, this.basePath);
    }
    /**
     * Get a notification entry.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} NotificationSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, NotificationSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidNotificationsNotificationSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, NotificationSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of notifications generated for an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidNotificationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidNotificationsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes the caller ID from the account. Returns an HTTP 204 response if successful, with no body.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} OutgoingCallerIdSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options)(this.fetch, this.basePath);
    }
    /**
     * Get the set of an account's verified phone numbers.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} OutgoingCallerIdSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options)(this.fetch, this.basePath);
    }
    /**
     * Updates the caller id, and returns the updated resource if successful.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} OutgoingCallerIdSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options)(this.fetch, this.basePath);
    }
    /**
     * Updates the caller id, and returns the updated resource if successful.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} OutgoingCallerIdSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidOutgoingCallerIdsOutgoingCallerIdSidmediaTypeExtensionPut(AccountSid, mediaTypeExtension, OutgoingCallerIdSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of OutgoingCallerId resource representations, each representing a Caller ID number valid for an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidOutgoingCallerIdsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Adds a new CallerID to your account.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidOutgoingCallerIdsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Get a specific member.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, CallSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, CallSid, options)(this.fetch, this.basePath);
    }
    /**
     * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When redirecting a member of a queue addressed by CallSid, only the first request will succeed and return a 200 response code. A second request will fail and return an appropriate 400 response code.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CallSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, CallSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidQueuesQueueSidMembersCallSidmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, CallSid, options)(this.fetch, this.basePath);
    }
    /**
     * Get a front member.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Posting a URL and Method to a Queue instance will dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL When dequeuing the 'Front' of the queue, the next call in the queue will be redirected.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidQueuesQueueSidMembersFrontmediaTypeExtensionPost(AccountSid, QueueSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the list of members in the queue identified by {QueueSid}.
     * @param {string} AccountSid
     * @param {string} QueueSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidQueuesQueueSidMembersmediaTypeExtensionGet(AccountSid, QueueSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * The DELETE method allows you to remove a Queue. Only empty queues are deletable.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} QueueSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, QueueSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidQueuesQueueSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, QueueSid, options)(this.fetch, this.basePath);
    }
    /**
     * Get resource's individual Queue instance.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} QueueSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, QueueSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidQueuesQueueSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, QueueSid, options)(this.fetch, this.basePath);
    }
    /**
     * This POST request allows you to change the FriendlyName or MaxSize.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} QueueSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, QueueSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidQueuesQueueSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, QueueSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of queues within an account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidQueuesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidQueuesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Create a new Queue resource.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidQueuesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidQueuesmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a set of Transcription resource representations that includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} RecordingSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidRecordingsRecordingSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes a recording  from your account.
     * @param {string} AccountSid
     * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
     * @param {string} RecordingSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, RecordingSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidRecordingsRecordingSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, RecordingSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns one of several representations: Without an extension, or with a \".wav\", a binary WAV audio file is returned with mime-type \"audio/x-wav\". Appending \".mp3\" to the URI returns a binary MP3 audio file with mime-type type \"audio/mpeg\". Appending \".xml\" to the URI returns a XML representation.
     * @param {string} AccountSid
     * @param {'.xml' | '.wav' | '.mp3'} mediaTypeExtension
     * @param {string} RecordingSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidRecordingsRecordingSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, RecordingSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of Recording resource representations, each representing a recording generated during the course of a phone call.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidRecordingsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidRecordingsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Remove a Credential from a CredentialList.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CredentialSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionDelete(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options)(this.fetch, this.basePath);
    }
    /**
     * Get a specific Credential in a list. Though a password is stored for each username in your list, the password is not returned to protect your password. If you cannot remember your password, you will need to POST to this resource to update it.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CredentialSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options)(this.fetch, this.basePath);
    }
    /**
     * Change the password of a Credential record.  If the change is successful, Twilio will respond with the Credential record but will not include the password in the response.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CredentialSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsCredentialSidmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, CredentialSid, options)(this.fetch, this.basePath);
    }
    /**
     * Get the list of Credentials in a CredentialList. The passwords for the Credentials are intentionally not returned so as to protect them.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionGet(AccountSid, CLSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Add a Credential to the CredentialList.  When creating a Credential, you will POST both a username and password, but only receive the username back in the response. The password is intentionally not returned so as to protect it.
     * @param {string} AccountSid
     * @param {string} CLSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPCredentialListsCLSidCredentialsmediaTypeExtensionPost(AccountSid, CLSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Delete a CredentialList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CLSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, CLSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, CLSid, options)(this.fetch, this.basePath);
    }
    /**
     * Get a credential list instance resource
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CLSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CLSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, CLSid, options)(this.fetch, this.basePath);
    }
    /**
     * Change the FriendlyName of the list
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CLSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CLSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPCredentialListsCLSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, CLSid, options)(this.fetch, this.basePath);
    }
    /**
     * Gets a list of Credential Lists for an account
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPCredentialListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Create a new Credential List.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPCredentialListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Remove a CredentialListMapping from a domain
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} CLSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, CLSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsCLSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, CLSid, options)(this.fetch, this.basePath);
    }
    /**
     * Get the user lists mapped to this domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Map a CredentialList to the domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPDomainsSipDomainSidCredentialListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Remove a mapping from this domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ALSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionDelete(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options)(this.fetch, this.basePath);
    }
    /**
     * Return a specific IpAccessControlListMapping instance by Sid.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ALSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsALSidmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, ALSid, options)(this.fetch, this.basePath);
    }
    /**
     * Return the IpAccessControlListMappings that are associated to this domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionGet(AccountSid, SipDomainSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Map an IpAccessControlList to this domain.
     * @param {string} AccountSid
     * @param {string} SipDomainSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPDomainsSipDomainSidIpAccessControlListMappingsmediaTypeExtensionPost(AccountSid, SipDomainSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Delete a domain. If you have created subdomains of a domain, you will not be able to delete the domain until you first delete all subdomains of it.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} SipDomainSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, SipDomainSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, SipDomainSid, options)(this.fetch, this.basePath);
    }
    /**
     * Return a specific instance by Sid.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} SipDomainSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, SipDomainSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, SipDomainSid, options)(this.fetch, this.basePath);
    }
    /**
     * Update the attributes of a domain.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} SipDomainSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, SipDomainSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPDomainsSipDomainSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, SipDomainSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a paged list of the domains for an account.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPDomainsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPDomainsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Creates a new Domain and returns its instance resource. You must pick a unique domain name that ends in \".sip.twilio.com\". After creating a Domain, you must map it to an authentication method before the domain is ready to receive traffic.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPDomainsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPDomainsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes an IP address entry from the list.
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAddressSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionDelete(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options)(this.fetch, this.basePath);
    }
    /**
     * Return a single IP Address resource.
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAddressSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options)(this.fetch, this.basePath);
    }
    /**
     * Change the description or IP address of a given IpAddress instance resource
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAddressSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesIpAddressSidmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, IpAddressSid, options)(this.fetch, this.basePath);
    }
    /**
     * List the IP Addresses contained in this list.
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionGet(AccountSid, IpAccessControlListSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Add an IP Address to the list with a description.
     * @param {string} AccountSid
     * @param {string} IpAccessControlListSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidIpAddressesmediaTypeExtensionPost(AccountSid, IpAccessControlListSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Delete an IpAccessControlList from your account. It can only be deleted if no domains are mapped to it. If you attempt to delete one that is mapped to a domain, you will receive an error.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAccessControlListSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IpAccessControlListSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, IpAccessControlListSid, options)(this.fetch, this.basePath);
    }
    /**
     * Return a specific IpAccessControlList resource.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAccessControlListSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IpAccessControlListSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, IpAccessControlListSid, options)(this.fetch, this.basePath);
    }
    /**
     * Rename an IpAccessControlList.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} IpAccessControlListSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IpAccessControlListSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPIpAccessControlListsIpAccessControlListSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, IpAccessControlListSid, options)(this.fetch, this.basePath);
    }
    /**
     * Return a paged list of all IpAccessControlLists under this account.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Create a new IpAccessControlList resource.  When created, the list will contain no IP addresses. You will need to add IP addresses to the list for it to be active. To add IP addresses, you will need to POST to the IpAddresses List subresource.
     * @param {string} AccountSid
     * @param {string} mediaTypeExtension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSIPIpAccessControlListsmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Get a single message.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ShortCodeSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ShortCodeSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, ShortCodeSid, options)(this.fetch, this.basePath);
    }
    /**
     * Tries to update the shortcode's properties, and returns the updated resource representation if successful.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} ShortCodeSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ShortCodeSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSMSShortCodesShortCodeSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, ShortCodeSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of ShortCode resource representations, each representing a short code within your account. The list includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidSMSShortCodesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidSMSShortCodesmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes a transcription from your account.
     * @param {string} AccountSid
     * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} TranscriptionSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, TranscriptionSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, TranscriptionSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a single Transcription resource representation identified by the given {TranscriptionSid}. By default Twilio will respond with the XML metadata for the Transcription. If you append \".txt\" to the end of the Transcription resource's URI Twilio will just return you the transcription tex.
     * @param {string} AccountSid
     * @param {'.json' | '.csv' | '.html' | '.txt' | '.xml'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} TranscriptionSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, TranscriptionSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidTranscriptionsTranscriptionSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, TranscriptionSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a set of Transcription resource representations that includes paging information.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidTranscriptionsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns UsageRecords for all usage categories for a specified period.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {'Daily' | 'Monthly' | 'Yearly' | 'AllTime' | 'Today' | 'Yesterday' | 'ThisMonth' | 'LastMonth'} Subresource |Subresource|Description| |---|---| |Daily|Return multiple UsageRecords for each usage category, each representing usage over a daily time-interval.| |Monthly|Return multiple UsageRecords for each usage category, each representing usage over a monthly time-interval.| |Yearly|Return multple UsageRecords for each usage category, each representing usage over a yearly time-interval.| |AllTime|  Return a single UsageRecord for each usage category, each representing usage over the date-range specified. This is the same as the root /Usage/Records.| |Today|Return a single UsageRecord per usage category, for today&#39;s usage only.| ||Yesterday|Return a single UsageRecord per usage category, for yesterday&#39;s usage only.| |ThisMonth|Return a single UsageRecord per usage category, for this month&#39;s usage only.| |LastMonth|Return a single UsageRecord per usage category, for last month&#39;s usage only.|
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(AccountSid, mediaTypeExtension, Subresource, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidUsageRecordsSubresourcemediaTypeExtensionGet(AccountSid, mediaTypeExtension, Subresource, options)(this.fetch, this.basePath);
    }
    /**
     * Returns UsageRecords for all usage categories. The list includes paging information. By default, the UsageRecords resource will return one UsageRecord for each Category, representing all usage accrued all-time for the account. You can filter the usage Category or change the date-range over which usage is counted using optional GET query parameters.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidUsageRecordsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidUsageRecordsmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Delete this UsageTrigger.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} UsageTriggerSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, UsageTriggerSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionDelete(AccountSid, mediaTypeExtension, UsageTriggerSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a repesentation of the UsageTrigger.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} UsageTriggerSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, UsageTriggerSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionGet(AccountSid, mediaTypeExtension, UsageTriggerSid, options)(this.fetch, this.basePath);
    }
    /**
     * Tries to update the UsageTrigger's properties, and returns the updated resource representation if successful.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} UsageTriggerSid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, UsageTriggerSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidUsageTriggersUsageTriggerSidmediaTypeExtensionPost(AccountSid, mediaTypeExtension, UsageTriggerSid, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of UsageTrigger resource representations. The list includes paging information. By default, all UsageTriggers are returned. You can filter the list by specifying one or more query parameters. Note that the query parameters are case-sensitive
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidUsageTriggersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidUsageTriggersmediaTypeExtensionGet(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Creates a new UsageTrigger. Each account can create up to 1,000 UsageTriggers. Currently, UsageTriggers that are no longer active are not deleted automatically. Use DELETE to delete triggers you no longer need.
     * @param {string} AccountSid
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidUsageTriggersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidUsageTriggersmediaTypeExtensionPost(AccountSid, mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a representation of an account.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} AccountSid A 34 character string that uniquely identifies this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidmediaTypeExtensionGet(mediaTypeExtension, AccountSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidmediaTypeExtensionGet(mediaTypeExtension, AccountSid, options)(this.fetch, this.basePath);
    }
    /**
     * Allows you to modify the properties of an account.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} AccountSid A 34 character string that uniquely identifies this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidmediaTypeExtensionPost(mediaTypeExtension, AccountSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidmediaTypeExtensionPost(mediaTypeExtension, AccountSid, options)(this.fetch, this.basePath);
    }
    /**
     * Allows you to modify the properties of an account.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {string} AccountSid A 34 character string that uniquely identifies this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsAccountSidmediaTypeExtensionPut(mediaTypeExtension, AccountSid, options) {
        return exports.DefaultApiFp(this.configuration).accountsAccountSidmediaTypeExtensionPut(mediaTypeExtension, AccountSid, options)(this.fetch, this.basePath);
    }
    /**
     * Retrieve a list of the Account resources belonging to the account used to make the API request. This list will include that Account as well.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsmediaTypeExtensionGet(mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsmediaTypeExtensionGet(mediaTypeExtension, options)(this.fetch, this.basePath);
    }
    /**
     * Create a new Account instance resource as a subaccount of the one used to make the request. See Creating Subaccounts for more information.
     * @param {'.xml' | '.json' | '.csv' | '.html'} mediaTypeExtension By default, Twilio&#39;s REST API returns XML. You may obtain CSV, JSON or HTML by appending \&quot;.csv\&quot;, \&quot;.json\&quot;, or \&quot;.html\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    accountsmediaTypeExtensionPost(mediaTypeExtension, options) {
        return exports.DefaultApiFp(this.configuration).accountsmediaTypeExtensionPost(mediaTypeExtension, options)(this.fetch, this.basePath);
    }
}
exports.DefaultApi = DefaultApi;
//# sourceMappingURL=api.js.map